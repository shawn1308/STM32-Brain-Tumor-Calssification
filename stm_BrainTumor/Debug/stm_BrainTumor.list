
stm_BrainTumor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ce0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000cbbac  08007e80  08007e80  00017e80  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080d3a2c  080d3a2c  000f0e18  2**0
                  CONTENTS
  4 .ARM          00000008  080d3a2c  080d3a2c  000e3a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080d3a34  080d3a34  000f0e18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080d3a34  080d3a34  000e3a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080d3a38  080d3a38  000e3a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000e18  20000000  080d3a3c  000f0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013f28  20000e18  080d4854  000f0e18  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20014d40  080d4854  000f4d40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000f0e18  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  000f0e48  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ece0  00000000  00000000  000f0edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002757  00000000  00000000  000ffbbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b78  00000000  00000000  00102318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000089a  00000000  00000000  00102e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027d87  00000000  00000000  0010372a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f556  00000000  00000000  0012b4b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3ab6  00000000  00000000  0013aa07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000035a8  00000000  00000000  0022e4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00231a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000e18 	.word	0x20000e18
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007e58 	.word	0x08007e58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000e1c 	.word	0x20000e1c
 80001cc:	08007e58 	.word	0x08007e58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 fba5 	bl	8000cbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f818 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f8e8 	bl	800074c <MX_GPIO_Init>
  MX_DMA_Init();
 800057c:	f000 f8c8 	bl	8000710 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000580:	f000 f896 	bl	80006b0 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000584:	f000 f872 	bl	800066c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Init(&huart1);
 8000588:	4805      	ldr	r0, [pc, #20]	; (80005a0 <main+0x34>)
 800058a:	f002 fceb 	bl	8002f64 <HAL_UART_Init>
  AI_Init();
 800058e:	f000 f955 	bl	800083c <AI_Init>
  HAL_UART_Receive_DMA(&huart1, (uint8_t*)rxdata, sizeof(rxdata));
 8000592:	f640 32d1 	movw	r2, #3025	; 0xbd1
 8000596:	4903      	ldr	r1, [pc, #12]	; (80005a4 <main+0x38>)
 8000598:	4801      	ldr	r0, [pc, #4]	; (80005a0 <main+0x34>)
 800059a:	f002 fdc5 	bl	8003128 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //uint32_t index = 0;
  while (1)
 800059e:	e7fe      	b.n	800059e <main+0x32>
 80005a0:	20000e58 	.word	0x20000e58
 80005a4:	20000f24 	.word	0x20000f24

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b096      	sub	sp, #88	; 0x58
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	2244      	movs	r2, #68	; 0x44
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f006 fd7d 	bl	80070b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	463b      	mov	r3, r7
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ce:	f001 f9a7 	bl	8001920 <HAL_PWREx_ControlVoltageScaling>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005d8:	f000 f9f8 	bl	80009cc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005dc:	f001 f982 	bl	80018e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005e0:	4b21      	ldr	r3, [pc, #132]	; (8000668 <SystemClock_Config+0xc0>)
 80005e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005e6:	4a20      	ldr	r2, [pc, #128]	; (8000668 <SystemClock_Config+0xc0>)
 80005e8:	f023 0318 	bic.w	r3, r3, #24
 80005ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005f0:	2314      	movs	r3, #20
 80005f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005f8:	2301      	movs	r3, #1
 80005fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000600:	2360      	movs	r3, #96	; 0x60
 8000602:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000604:	2302      	movs	r3, #2
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000608:	2301      	movs	r3, #1
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800060c:	2301      	movs	r3, #1
 800060e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000610:	2328      	movs	r3, #40	; 0x28
 8000612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000614:	2307      	movs	r3, #7
 8000616:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	4618      	mov	r0, r3
 8000626:	f001 f9d1 	bl	80019cc <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000630:	f000 f9cc 	bl	80009cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000638:	2303      	movs	r3, #3
 800063a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000648:	463b      	mov	r3, r7
 800064a:	2104      	movs	r1, #4
 800064c:	4618      	mov	r0, r3
 800064e:	f001 fd99 	bl	8002184 <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000658:	f000 f9b8 	bl	80009cc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800065c:	f002 faa0 	bl	8002ba0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000660:	bf00      	nop
 8000662:	3758      	adds	r7, #88	; 0x58
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40021000 	.word	0x40021000

0800066c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000670:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <MX_CRC_Init+0x3c>)
 8000672:	4a0e      	ldr	r2, [pc, #56]	; (80006ac <MX_CRC_Init+0x40>)
 8000674:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_CRC_Init+0x3c>)
 8000678:	2200      	movs	r2, #0
 800067a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <MX_CRC_Init+0x3c>)
 800067e:	2200      	movs	r2, #0
 8000680:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_CRC_Init+0x3c>)
 8000684:	2200      	movs	r2, #0
 8000686:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <MX_CRC_Init+0x3c>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_CRC_Init+0x3c>)
 8000690:	2201      	movs	r2, #1
 8000692:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000694:	4804      	ldr	r0, [pc, #16]	; (80006a8 <MX_CRC_Init+0x3c>)
 8000696:	f000 fc99 	bl	8000fcc <HAL_CRC_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80006a0:	f000 f994 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000e34 	.word	0x20000e34
 80006ac:	40023000 	.word	0x40023000

080006b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006b6:	4a15      	ldr	r2, [pc, #84]	; (800070c <MX_USART1_UART_Init+0x5c>)
 80006b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006f2:	4805      	ldr	r0, [pc, #20]	; (8000708 <MX_USART1_UART_Init+0x58>)
 80006f4:	f002 fc36 	bl	8002f64 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006fe:	f000 f965 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000e58 	.word	0x20000e58
 800070c:	40013800 	.word	0x40013800

08000710 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_DMA_Init+0x38>)
 8000718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800071a:	4a0b      	ldr	r2, [pc, #44]	; (8000748 <MX_DMA_Init+0x38>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6493      	str	r3, [r2, #72]	; 0x48
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_DMA_Init+0x38>)
 8000724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	200f      	movs	r0, #15
 8000734:	f000 fc13 	bl	8000f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000738:	200f      	movs	r0, #15
 800073a:	f000 fc2c 	bl	8000f96 <HAL_NVIC_EnableIRQ>

}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40021000 	.word	0x40021000

0800074c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <MX_GPIO_Init+0x5c>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <MX_GPIO_Init+0x5c>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_GPIO_Init+0x5c>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_GPIO_Init+0x5c>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	4a0e      	ldr	r2, [pc, #56]	; (80007a8 <MX_GPIO_Init+0x5c>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000776:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_GPIO_Init+0x5c>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_GPIO_Init+0x5c>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4a08      	ldr	r2, [pc, #32]	; (80007a8 <MX_GPIO_Init+0x5c>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_GPIO_Init+0x5c>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800079a:	bf00      	nop
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000

080007ac <HAL_UART_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	copyToFloat(aiInData,rxdata);
 80007b4:	490f      	ldr	r1, [pc, #60]	; (80007f4 <HAL_UART_RxHalfCpltCallback+0x48>)
 80007b6:	4810      	ldr	r0, [pc, #64]	; (80007f8 <HAL_UART_RxHalfCpltCallback+0x4c>)
 80007b8:	f000 f8e4 	bl	8000984 <copyToFloat>
	AI_Run(aiInData, aiOutData);
 80007bc:	490f      	ldr	r1, [pc, #60]	; (80007fc <HAL_UART_RxHalfCpltCallback+0x50>)
 80007be:	480e      	ldr	r0, [pc, #56]	; (80007f8 <HAL_UART_RxHalfCpltCallback+0x4c>)
 80007c0:	f000 f878 	bl	80008b4 <AI_Run>
	uint32_t class = argmax(aiOutData, AI_NETWORK_OUT_1_SIZE);
 80007c4:	212b      	movs	r1, #43	; 0x2b
 80007c6:	480d      	ldr	r0, [pc, #52]	; (80007fc <HAL_UART_RxHalfCpltCallback+0x50>)
 80007c8:	f000 f8ac 	bl	8000924 <argmax>
 80007cc:	60f8      	str	r0, [r7, #12]
	printf("%s\r\n", activities[class]);
 80007ce:	4a0c      	ldr	r2, [pc, #48]	; (8000800 <HAL_UART_RxHalfCpltCallback+0x54>)
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007d6:	4619      	mov	r1, r3
 80007d8:	480a      	ldr	r0, [pc, #40]	; (8000804 <HAL_UART_RxHalfCpltCallback+0x58>)
 80007da:	f006 fc17 	bl	800700c <iprintf>
	HAL_UART_Transmit(&huart1, txdata_1, sizeof(txdata_1), 200);
 80007de:	23c8      	movs	r3, #200	; 0xc8
 80007e0:	2201      	movs	r2, #1
 80007e2:	4909      	ldr	r1, [pc, #36]	; (8000808 <HAL_UART_RxHalfCpltCallback+0x5c>)
 80007e4:	4809      	ldr	r0, [pc, #36]	; (800080c <HAL_UART_RxHalfCpltCallback+0x60>)
 80007e6:	f002 fc0b 	bl	8003000 <HAL_UART_Transmit>
}
 80007ea:	bf00      	nop
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000f24 	.word	0x20000f24
 80007f8:	20001afc 	.word	0x20001afc
 80007fc:	20004a40 	.word	0x20004a40
 8000800:	20000004 	.word	0x20000004
 8000804:	08007ea8 	.word	0x08007ea8
 8000808:	20000000 	.word	0x20000000
 800080c:	20000e58 	.word	0x20000e58

08000810 <_write>:

int _write(int fd, char * ptr, int len)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	b29a      	uxth	r2, r3
 8000820:	f04f 33ff 	mov.w	r3, #4294967295
 8000824:	68b9      	ldr	r1, [r7, #8]
 8000826:	4804      	ldr	r0, [pc, #16]	; (8000838 <_write+0x28>)
 8000828:	f002 fbea 	bl	8003000 <HAL_UART_Transmit>
  return len;
 800082c:	687b      	ldr	r3, [r7, #4]
}
 800082e:	4618      	mov	r0, r3
 8000830:	3710      	adds	r7, #16
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	20000e58 	.word	0x20000e58

0800083c <AI_Init>:

static void AI_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
  ai_error err;

  /* Create a local array with the addresses of the activations buffers */
  const ai_handle act_addr[] = { activations };
 8000842:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <AI_Init+0x64>)
 8000844:	603b      	str	r3, [r7, #0]
  /* Create an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 8000846:	463b      	mov	r3, r7
 8000848:	2200      	movs	r2, #0
 800084a:	4619      	mov	r1, r3
 800084c:	4815      	ldr	r0, [pc, #84]	; (80008a4 <AI_Init+0x68>)
 800084e:	f003 fd37 	bl	80042c0 <ai_network_create_and_init>
 8000852:	4603      	mov	r3, r0
 8000854:	607b      	str	r3, [r7, #4]
  if (err.type != AI_ERROR_NONE) {
 8000856:	793b      	ldrb	r3, [r7, #4]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d00a      	beq.n	8000872 <AI_Init+0x36>
    printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 800085c:	793b      	ldrb	r3, [r7, #4]
 800085e:	4619      	mov	r1, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8000866:	461a      	mov	r2, r3
 8000868:	480f      	ldr	r0, [pc, #60]	; (80008a8 <AI_Init+0x6c>)
 800086a:	f006 fbcf 	bl	800700c <iprintf>
    Error_Handler();
 800086e:	f000 f8ad 	bl	80009cc <Error_Handler>
  }
  ai_input = ai_network_inputs_get(network, NULL);
 8000872:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <AI_Init+0x68>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f003 fd95 	bl	80043a8 <ai_network_inputs_get>
 800087e:	4603      	mov	r3, r0
 8000880:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <AI_Init+0x70>)
 8000882:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8000884:	4b07      	ldr	r3, [pc, #28]	; (80008a4 <AI_Init+0x68>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f003 fda6 	bl	80043dc <ai_network_outputs_get>
 8000890:	4603      	mov	r3, r0
 8000892:	4a07      	ldr	r2, [pc, #28]	; (80008b0 <AI_Init+0x74>)
 8000894:	6013      	str	r3, [r2, #0]
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20004aec 	.word	0x20004aec
 80008a4:	20001af8 	.word	0x20001af8
 80008a8:	08007eb0 	.word	0x08007eb0
 80008ac:	20014ae8 	.word	0x20014ae8
 80008b0:	20014aec 	.word	0x20014aec

080008b4 <AI_Run>:

static void AI_Run(float *pIn, float *pOut)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
  ai_i32 batch;
  ai_error err;

  /* Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(pIn);
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <AI_Run+0x60>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(pOut);
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <AI_Run+0x64>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	683a      	ldr	r2, [r7, #0]
 80008cc:	605a      	str	r2, [r3, #4]

  batch = ai_network_run(network, ai_input, ai_output);
 80008ce:	4b13      	ldr	r3, [pc, #76]	; (800091c <AI_Run+0x68>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a10      	ldr	r2, [pc, #64]	; (8000914 <AI_Run+0x60>)
 80008d4:	6811      	ldr	r1, [r2, #0]
 80008d6:	4a10      	ldr	r2, [pc, #64]	; (8000918 <AI_Run+0x64>)
 80008d8:	6812      	ldr	r2, [r2, #0]
 80008da:	4618      	mov	r0, r3
 80008dc:	f003 fdd4 	bl	8004488 <ai_network_run>
 80008e0:	60f8      	str	r0, [r7, #12]
  if (batch != 1) {
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d011      	beq.n	800090c <AI_Run+0x58>
    err = ai_network_get_error(network);
 80008e8:	4b0c      	ldr	r3, [pc, #48]	; (800091c <AI_Run+0x68>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f003 fcc5 	bl	800427c <ai_network_get_error>
 80008f2:	4603      	mov	r3, r0
 80008f4:	60bb      	str	r3, [r7, #8]
    printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 80008f6:	7a3b      	ldrb	r3, [r7, #8]
 80008f8:	4619      	mov	r1, r3
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8000900:	461a      	mov	r2, r3
 8000902:	4807      	ldr	r0, [pc, #28]	; (8000920 <AI_Run+0x6c>)
 8000904:	f006 fb82 	bl	800700c <iprintf>
    Error_Handler();
 8000908:	f000 f860 	bl	80009cc <Error_Handler>
  }
}
 800090c:	bf00      	nop
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20014ae8 	.word	0x20014ae8
 8000918:	20014aec 	.word	0x20014aec
 800091c:	20001af8 	.word	0x20001af8
 8000920:	08007edc 	.word	0x08007edc

08000924 <argmax>:

static uint32_t argmax(const float * values, uint32_t len)
{
 8000924:	b480      	push	{r7}
 8000926:	b087      	sub	sp, #28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
  float max_value = values[0];
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	617b      	str	r3, [r7, #20]
  uint32_t max_index = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 8000938:	2301      	movs	r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	e017      	b.n	800096e <argmax+0x4a>
    if (values[i] > max_value) {
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	edd3 7a00 	vldr	s15, [r3]
 800094a:	ed97 7a05 	vldr	s14, [r7, #20]
 800094e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000956:	d507      	bpl.n	8000968 <argmax+0x44>
      max_value = values[i];
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	687a      	ldr	r2, [r7, #4]
 800095e:	4413      	add	r3, r2
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	617b      	str	r3, [r7, #20]
      max_index = i;
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	613b      	str	r3, [r7, #16]
  for (uint32_t i = 1; i < len; i++) {
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	3301      	adds	r3, #1
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	429a      	cmp	r2, r3
 8000974:	d3e3      	bcc.n	800093e <argmax+0x1a>
    }
  }
  return max_index;
 8000976:	693b      	ldr	r3, [r7, #16]
}
 8000978:	4618      	mov	r0, r3
 800097a:	371c      	adds	r7, #28
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <copyToFloat>:

static void copyToFloat(float aiInData[], uint8_t rxdata[]){
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < 3025; i++){
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	e010      	b.n	80009b6 <copyToFloat+0x32>
		aiInData[i] = rxdata[i];
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	683a      	ldr	r2, [r7, #0]
 8000998:	4413      	add	r3, r2
 800099a:	7819      	ldrb	r1, [r3, #0]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	4413      	add	r3, r2
 80009a4:	ee07 1a90 	vmov	s15, r1
 80009a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009ac:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 3025; i++){
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	3301      	adds	r3, #1
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	f5b3 6f3d 	cmp.w	r3, #3024	; 0xbd0
 80009bc:	ddea      	ble.n	8000994 <copyToFloat+0x10>
	}
}
 80009be:	bf00      	nop
 80009c0:	bf00      	nop
 80009c2:	3714      	adds	r7, #20
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d0:	b672      	cpsid	i
}
 80009d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <Error_Handler+0x8>
	...

080009d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <HAL_MspInit+0x44>)
 80009e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e2:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <HAL_MspInit+0x44>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6613      	str	r3, [r2, #96]	; 0x60
 80009ea:	4b0c      	ldr	r3, [pc, #48]	; (8000a1c <HAL_MspInit+0x44>)
 80009ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f6:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <HAL_MspInit+0x44>)
 80009f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009fa:	4a08      	ldr	r2, [pc, #32]	; (8000a1c <HAL_MspInit+0x44>)
 80009fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a00:	6593      	str	r3, [r2, #88]	; 0x58
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_MspInit+0x44>)
 8000a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	40021000 	.word	0x40021000

08000a20 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <HAL_CRC_MspInit+0x38>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d10b      	bne.n	8000a4a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <HAL_CRC_MspInit+0x3c>)
 8000a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a36:	4a09      	ldr	r2, [pc, #36]	; (8000a5c <HAL_CRC_MspInit+0x3c>)
 8000a38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a3c:	6493      	str	r3, [r2, #72]	; 0x48
 8000a3e:	4b07      	ldr	r3, [pc, #28]	; (8000a5c <HAL_CRC_MspInit+0x3c>)
 8000a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000a4a:	bf00      	nop
 8000a4c:	3714      	adds	r7, #20
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	40023000 	.word	0x40023000
 8000a5c:	40021000 	.word	0x40021000

08000a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b0ac      	sub	sp, #176	; 0xb0
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2288      	movs	r2, #136	; 0x88
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f006 fb18 	bl	80070b6 <memset>
  if(huart->Instance==USART1)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a35      	ldr	r2, [pc, #212]	; (8000b60 <HAL_UART_MspInit+0x100>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d163      	bne.n	8000b58 <HAL_UART_MspInit+0xf8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a90:	2301      	movs	r3, #1
 8000a92:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a94:	2300      	movs	r3, #0
 8000a96:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 fd95 	bl	80025cc <HAL_RCCEx_PeriphCLKConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000aa8:	f7ff ff90 	bl	80009cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aac:	4b2d      	ldr	r3, [pc, #180]	; (8000b64 <HAL_UART_MspInit+0x104>)
 8000aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ab0:	4a2c      	ldr	r2, [pc, #176]	; (8000b64 <HAL_UART_MspInit+0x104>)
 8000ab2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab6:	6613      	str	r3, [r2, #96]	; 0x60
 8000ab8:	4b2a      	ldr	r3, [pc, #168]	; (8000b64 <HAL_UART_MspInit+0x104>)
 8000aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac4:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <HAL_UART_MspInit+0x104>)
 8000ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac8:	4a26      	ldr	r2, [pc, #152]	; (8000b64 <HAL_UART_MspInit+0x104>)
 8000aca:	f043 0302 	orr.w	r3, r3, #2
 8000ace:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad0:	4b24      	ldr	r3, [pc, #144]	; (8000b64 <HAL_UART_MspInit+0x104>)
 8000ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad4:	f003 0302 	and.w	r3, r3, #2
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000adc:	23c0      	movs	r3, #192	; 0xc0
 8000ade:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aee:	2303      	movs	r3, #3
 8000af0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000af4:	2307      	movs	r3, #7
 8000af6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000afe:	4619      	mov	r1, r3
 8000b00:	4819      	ldr	r0, [pc, #100]	; (8000b68 <HAL_UART_MspInit+0x108>)
 8000b02:	f000 fd45 	bl	8001590 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000b06:	4b19      	ldr	r3, [pc, #100]	; (8000b6c <HAL_UART_MspInit+0x10c>)
 8000b08:	4a19      	ldr	r2, [pc, #100]	; (8000b70 <HAL_UART_MspInit+0x110>)
 8000b0a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 8000b0c:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <HAL_UART_MspInit+0x10c>)
 8000b0e:	2202      	movs	r2, #2
 8000b10:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b12:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <HAL_UART_MspInit+0x10c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b18:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <HAL_UART_MspInit+0x10c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b1e:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <HAL_UART_MspInit+0x10c>)
 8000b20:	2280      	movs	r2, #128	; 0x80
 8000b22:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <HAL_UART_MspInit+0x10c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <HAL_UART_MspInit+0x10c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000b30:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <HAL_UART_MspInit+0x10c>)
 8000b32:	2220      	movs	r2, #32
 8000b34:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <HAL_UART_MspInit+0x10c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b3c:	480b      	ldr	r0, [pc, #44]	; (8000b6c <HAL_UART_MspInit+0x10c>)
 8000b3e:	f000 fb2f 	bl	80011a0 <HAL_DMA_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 8000b48:	f7ff ff40 	bl	80009cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <HAL_UART_MspInit+0x10c>)
 8000b50:	671a      	str	r2, [r3, #112]	; 0x70
 8000b52:	4a06      	ldr	r2, [pc, #24]	; (8000b6c <HAL_UART_MspInit+0x10c>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b58:	bf00      	nop
 8000b5a:	37b0      	adds	r7, #176	; 0xb0
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40013800 	.word	0x40013800
 8000b64:	40021000 	.word	0x40021000
 8000b68:	48000400 	.word	0x48000400
 8000b6c:	20000edc 	.word	0x20000edc
 8000b70:	40020058 	.word	0x40020058

08000b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <NMI_Handler+0x4>

08000b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7e:	e7fe      	b.n	8000b7e <HardFault_Handler+0x4>

08000b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <MemManage_Handler+0x4>

08000b86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc0:	f000 f8d2 	bl	8000d68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <DMA1_Channel5_IRQHandler+0x10>)
 8000bce:	f000 fbff 	bl	80013d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000edc 	.word	0x20000edc

08000bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be4:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <_sbrk+0x5c>)
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <_sbrk+0x60>)
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <_sbrk+0x64>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <_sbrk+0x68>)
 8000bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d207      	bcs.n	8000c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c0c:	f006 fab2 	bl	8007174 <__errno>
 8000c10:	4603      	mov	r3, r0
 8000c12:	220c      	movs	r2, #12
 8000c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1a:	e009      	b.n	8000c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c22:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <_sbrk+0x64>)
 8000c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20018000 	.word	0x20018000
 8000c3c:	00000800 	.word	0x00000800
 8000c40:	20014af0 	.word	0x20014af0
 8000c44:	20014d40 	.word	0x20014d40

08000c48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <SystemInit+0x20>)
 8000c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c52:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <SystemInit+0x20>)
 8000c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c70:	f7ff ffea 	bl	8000c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c74:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c76:	490d      	ldr	r1, [pc, #52]	; (8000cac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c78:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <LoopForever+0xe>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c8c:	4c0a      	ldr	r4, [pc, #40]	; (8000cb8 <LoopForever+0x16>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9a:	f006 fa71 	bl	8007180 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c9e:	f7ff fc65 	bl	800056c <main>

08000ca2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ca2:	e7fe      	b.n	8000ca2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ca4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cac:	20000e18 	.word	0x20000e18
  ldr r2, =_sidata
 8000cb0:	080d3a3c 	.word	0x080d3a3c
  ldr r2, =_sbss
 8000cb4:	20000e18 	.word	0x20000e18
  ldr r4, =_ebss
 8000cb8:	20014d40 	.word	0x20014d40

08000cbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC1_2_IRQHandler>

08000cbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f000 f93d 	bl	8000f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f000 f80e 	bl	8000cf0 <HAL_InitTick>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d002      	beq.n	8000ce0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	71fb      	strb	r3, [r7, #7]
 8000cde:	e001      	b.n	8000ce4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ce0:	f7ff fe7a 	bl	80009d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
	...

08000cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cfc:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <HAL_InitTick+0x6c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d023      	beq.n	8000d4c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d04:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <HAL_InitTick+0x70>)
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <HAL_InitTick+0x6c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f000 f949 	bl	8000fb2 <HAL_SYSTICK_Config>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d10f      	bne.n	8000d46 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b0f      	cmp	r3, #15
 8000d2a:	d809      	bhi.n	8000d40 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f000 f913 	bl	8000f5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d38:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <HAL_InitTick+0x74>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6013      	str	r3, [r2, #0]
 8000d3e:	e007      	b.n	8000d50 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	73fb      	strb	r3, [r7, #15]
 8000d44:	e004      	b.n	8000d50 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	73fb      	strb	r3, [r7, #15]
 8000d4a:	e001      	b.n	8000d50 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3710      	adds	r7, #16
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200000b8 	.word	0x200000b8
 8000d60:	200000b0 	.word	0x200000b0
 8000d64:	200000b4 	.word	0x200000b4

08000d68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_IncTick+0x20>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_IncTick+0x24>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	4a04      	ldr	r2, [pc, #16]	; (8000d8c <HAL_IncTick+0x24>)
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	200000b8 	.word	0x200000b8
 8000d8c:	20014af4 	.word	0x20014af4

08000d90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return uwTick;
 8000d94:	4b03      	ldr	r3, [pc, #12]	; (8000da4 <HAL_GetTick+0x14>)
 8000d96:	681b      	ldr	r3, [r3, #0]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20014af4 	.word	0x20014af4

08000da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dda:	4a04      	ldr	r2, [pc, #16]	; (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	60d3      	str	r3, [r2, #12]
}
 8000de0:	bf00      	nop
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <__NVIC_GetPriorityGrouping+0x18>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	0a1b      	lsrs	r3, r3, #8
 8000dfa:	f003 0307 	and.w	r3, r3, #7
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	db0b      	blt.n	8000e36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	f003 021f 	and.w	r2, r3, #31
 8000e24:	4907      	ldr	r1, [pc, #28]	; (8000e44 <__NVIC_EnableIRQ+0x38>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	095b      	lsrs	r3, r3, #5
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000e100 	.word	0xe000e100

08000e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	db0a      	blt.n	8000e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	490c      	ldr	r1, [pc, #48]	; (8000e94 <__NVIC_SetPriority+0x4c>)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	0112      	lsls	r2, r2, #4
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	440b      	add	r3, r1
 8000e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e70:	e00a      	b.n	8000e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4908      	ldr	r1, [pc, #32]	; (8000e98 <__NVIC_SetPriority+0x50>)
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	3b04      	subs	r3, #4
 8000e80:	0112      	lsls	r2, r2, #4
 8000e82:	b2d2      	uxtb	r2, r2
 8000e84:	440b      	add	r3, r1
 8000e86:	761a      	strb	r2, [r3, #24]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000e100 	.word	0xe000e100
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b089      	sub	sp, #36	; 0x24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f1c3 0307 	rsb	r3, r3, #7
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	bf28      	it	cs
 8000eba:	2304      	movcs	r3, #4
 8000ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	2b06      	cmp	r3, #6
 8000ec4:	d902      	bls.n	8000ecc <NVIC_EncodePriority+0x30>
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3b03      	subs	r3, #3
 8000eca:	e000      	b.n	8000ece <NVIC_EncodePriority+0x32>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43da      	mvns	r2, r3
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	401a      	ands	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	fa01 f303 	lsl.w	r3, r1, r3
 8000eee:	43d9      	mvns	r1, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	4313      	orrs	r3, r2
         );
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3724      	adds	r7, #36	; 0x24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f14:	d301      	bcc.n	8000f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00f      	b.n	8000f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <SysTick_Config+0x40>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f22:	210f      	movs	r1, #15
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f7ff ff8e 	bl	8000e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <SysTick_Config+0x40>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f32:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <SysTick_Config+0x40>)
 8000f34:	2207      	movs	r2, #7
 8000f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	e000e010 	.word	0xe000e010

08000f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ff29 	bl	8000da8 <__NVIC_SetPriorityGrouping>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b086      	sub	sp, #24
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
 8000f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f70:	f7ff ff3e 	bl	8000df0 <__NVIC_GetPriorityGrouping>
 8000f74:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	68b9      	ldr	r1, [r7, #8]
 8000f7a:	6978      	ldr	r0, [r7, #20]
 8000f7c:	f7ff ff8e 	bl	8000e9c <NVIC_EncodePriority>
 8000f80:	4602      	mov	r2, r0
 8000f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff5d 	bl	8000e48 <__NVIC_SetPriority>
}
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff31 	bl	8000e0c <__NVIC_EnableIRQ>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ffa2 	bl	8000f04 <SysTick_Config>
 8000fc0:	4603      	mov	r3, r0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e054      	b.n	8001088 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7f5b      	ldrb	r3, [r3, #29]
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d105      	bne.n	8000ff4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff fd16 	bl	8000a20 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	791b      	ldrb	r3, [r3, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10c      	bne.n	800101c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a22      	ldr	r2, [pc, #136]	; (8001090 <HAL_CRC_Init+0xc4>)
 8001008:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f022 0218 	bic.w	r2, r2, #24
 8001018:	609a      	str	r2, [r3, #8]
 800101a:	e00c      	b.n	8001036 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6899      	ldr	r1, [r3, #8]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	461a      	mov	r2, r3
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 f834 	bl	8001094 <HAL_CRCEx_Polynomial_Set>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e028      	b.n	8001088 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	795b      	ldrb	r3, [r3, #5]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d105      	bne.n	800104a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f04f 32ff 	mov.w	r2, #4294967295
 8001046:	611a      	str	r2, [r3, #16]
 8001048:	e004      	b.n	8001054 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	6912      	ldr	r2, [r2, #16]
 8001052:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	695a      	ldr	r2, [r3, #20]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	430a      	orrs	r2, r1
 8001068:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	699a      	ldr	r2, [r3, #24]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	430a      	orrs	r2, r1
 800107e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2201      	movs	r2, #1
 8001084:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	04c11db7 	.word	0x04c11db7

08001094 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001094:	b480      	push	{r7}
 8001096:	b087      	sub	sp, #28
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010a0:	2300      	movs	r3, #0
 80010a2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80010a4:	231f      	movs	r3, #31
 80010a6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80010a8:	bf00      	nop
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1e5a      	subs	r2, r3, #1
 80010ae:	613a      	str	r2, [r7, #16]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d009      	beq.n	80010c8 <HAL_CRCEx_Polynomial_Set+0x34>
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	f003 031f 	and.w	r3, r3, #31
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	fa22 f303 	lsr.w	r3, r2, r3
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d0f0      	beq.n	80010aa <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b18      	cmp	r3, #24
 80010cc:	d846      	bhi.n	800115c <HAL_CRCEx_Polynomial_Set+0xc8>
 80010ce:	a201      	add	r2, pc, #4	; (adr r2, 80010d4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80010d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d4:	08001163 	.word	0x08001163
 80010d8:	0800115d 	.word	0x0800115d
 80010dc:	0800115d 	.word	0x0800115d
 80010e0:	0800115d 	.word	0x0800115d
 80010e4:	0800115d 	.word	0x0800115d
 80010e8:	0800115d 	.word	0x0800115d
 80010ec:	0800115d 	.word	0x0800115d
 80010f0:	0800115d 	.word	0x0800115d
 80010f4:	08001151 	.word	0x08001151
 80010f8:	0800115d 	.word	0x0800115d
 80010fc:	0800115d 	.word	0x0800115d
 8001100:	0800115d 	.word	0x0800115d
 8001104:	0800115d 	.word	0x0800115d
 8001108:	0800115d 	.word	0x0800115d
 800110c:	0800115d 	.word	0x0800115d
 8001110:	0800115d 	.word	0x0800115d
 8001114:	08001145 	.word	0x08001145
 8001118:	0800115d 	.word	0x0800115d
 800111c:	0800115d 	.word	0x0800115d
 8001120:	0800115d 	.word	0x0800115d
 8001124:	0800115d 	.word	0x0800115d
 8001128:	0800115d 	.word	0x0800115d
 800112c:	0800115d 	.word	0x0800115d
 8001130:	0800115d 	.word	0x0800115d
 8001134:	08001139 	.word	0x08001139
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	2b06      	cmp	r3, #6
 800113c:	d913      	bls.n	8001166 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001142:	e010      	b.n	8001166 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	2b07      	cmp	r3, #7
 8001148:	d90f      	bls.n	800116a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800114e:	e00c      	b.n	800116a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	2b0f      	cmp	r3, #15
 8001154:	d90b      	bls.n	800116e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800115a:	e008      	b.n	800116e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	75fb      	strb	r3, [r7, #23]
      break;
 8001160:	e006      	b.n	8001170 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001162:	bf00      	nop
 8001164:	e004      	b.n	8001170 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001166:	bf00      	nop
 8001168:	e002      	b.n	8001170 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800116a:	bf00      	nop
 800116c:	e000      	b.n	8001170 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800116e:	bf00      	nop
  }
  if (status == HAL_OK)
 8001170:	7dfb      	ldrb	r3, [r7, #23]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d10d      	bne.n	8001192 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f023 0118 	bic.w	r1, r3, #24
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	430a      	orrs	r2, r1
 8001190:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001192:	7dfb      	ldrb	r3, [r7, #23]
}
 8001194:	4618      	mov	r0, r3
 8001196:	371c      	adds	r7, #28
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e098      	b.n	80012e4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	461a      	mov	r2, r3
 80011b8:	4b4d      	ldr	r3, [pc, #308]	; (80012f0 <HAL_DMA_Init+0x150>)
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d80f      	bhi.n	80011de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	461a      	mov	r2, r3
 80011c4:	4b4b      	ldr	r3, [pc, #300]	; (80012f4 <HAL_DMA_Init+0x154>)
 80011c6:	4413      	add	r3, r2
 80011c8:	4a4b      	ldr	r2, [pc, #300]	; (80012f8 <HAL_DMA_Init+0x158>)
 80011ca:	fba2 2303 	umull	r2, r3, r2, r3
 80011ce:	091b      	lsrs	r3, r3, #4
 80011d0:	009a      	lsls	r2, r3, #2
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a48      	ldr	r2, [pc, #288]	; (80012fc <HAL_DMA_Init+0x15c>)
 80011da:	641a      	str	r2, [r3, #64]	; 0x40
 80011dc:	e00e      	b.n	80011fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b46      	ldr	r3, [pc, #280]	; (8001300 <HAL_DMA_Init+0x160>)
 80011e6:	4413      	add	r3, r2
 80011e8:	4a43      	ldr	r2, [pc, #268]	; (80012f8 <HAL_DMA_Init+0x158>)
 80011ea:	fba2 2303 	umull	r2, r3, r2, r3
 80011ee:	091b      	lsrs	r3, r3, #4
 80011f0:	009a      	lsls	r2, r3, #2
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a42      	ldr	r2, [pc, #264]	; (8001304 <HAL_DMA_Init+0x164>)
 80011fa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2202      	movs	r2, #2
 8001200:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001216:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001220:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	691b      	ldr	r3, [r3, #16]
 8001226:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800122c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001238:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a1b      	ldr	r3, [r3, #32]
 800123e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	4313      	orrs	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68fa      	ldr	r2, [r7, #12]
 800124c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001256:	d039      	beq.n	80012cc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	4a27      	ldr	r2, [pc, #156]	; (80012fc <HAL_DMA_Init+0x15c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d11a      	bne.n	8001298 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001262:	4b29      	ldr	r3, [pc, #164]	; (8001308 <HAL_DMA_Init+0x168>)
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	f003 031c 	and.w	r3, r3, #28
 800126e:	210f      	movs	r1, #15
 8001270:	fa01 f303 	lsl.w	r3, r1, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	4924      	ldr	r1, [pc, #144]	; (8001308 <HAL_DMA_Init+0x168>)
 8001278:	4013      	ands	r3, r2
 800127a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800127c:	4b22      	ldr	r3, [pc, #136]	; (8001308 <HAL_DMA_Init+0x168>)
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6859      	ldr	r1, [r3, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001288:	f003 031c 	and.w	r3, r3, #28
 800128c:	fa01 f303 	lsl.w	r3, r1, r3
 8001290:	491d      	ldr	r1, [pc, #116]	; (8001308 <HAL_DMA_Init+0x168>)
 8001292:	4313      	orrs	r3, r2
 8001294:	600b      	str	r3, [r1, #0]
 8001296:	e019      	b.n	80012cc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001298:	4b1c      	ldr	r3, [pc, #112]	; (800130c <HAL_DMA_Init+0x16c>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a0:	f003 031c 	and.w	r3, r3, #28
 80012a4:	210f      	movs	r1, #15
 80012a6:	fa01 f303 	lsl.w	r3, r1, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	4917      	ldr	r1, [pc, #92]	; (800130c <HAL_DMA_Init+0x16c>)
 80012ae:	4013      	ands	r3, r2
 80012b0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80012b2:	4b16      	ldr	r3, [pc, #88]	; (800130c <HAL_DMA_Init+0x16c>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6859      	ldr	r1, [r3, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	f003 031c 	and.w	r3, r3, #28
 80012c2:	fa01 f303 	lsl.w	r3, r1, r3
 80012c6:	4911      	ldr	r1, [pc, #68]	; (800130c <HAL_DMA_Init+0x16c>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	40020407 	.word	0x40020407
 80012f4:	bffdfff8 	.word	0xbffdfff8
 80012f8:	cccccccd 	.word	0xcccccccd
 80012fc:	40020000 	.word	0x40020000
 8001300:	bffdfbf8 	.word	0xbffdfbf8
 8001304:	40020400 	.word	0x40020400
 8001308:	400200a8 	.word	0x400200a8
 800130c:	400204a8 	.word	0x400204a8

08001310 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001328:	2b01      	cmp	r3, #1
 800132a:	d101      	bne.n	8001330 <HAL_DMA_Start_IT+0x20>
 800132c:	2302      	movs	r3, #2
 800132e:	e04b      	b.n	80013c8 <HAL_DMA_Start_IT+0xb8>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2201      	movs	r2, #1
 8001334:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b01      	cmp	r3, #1
 8001342:	d13a      	bne.n	80013ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2202      	movs	r2, #2
 8001348:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2200      	movs	r2, #0
 8001350:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 0201 	bic.w	r2, r2, #1
 8001360:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	68b9      	ldr	r1, [r7, #8]
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f000 f8e0 	bl	800152e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	2b00      	cmp	r3, #0
 8001374:	d008      	beq.n	8001388 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f042 020e 	orr.w	r2, r2, #14
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	e00f      	b.n	80013a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0204 	bic.w	r2, r2, #4
 8001396:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f042 020a 	orr.w	r2, r2, #10
 80013a6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f042 0201 	orr.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	e005      	b.n	80013c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80013c2:	2302      	movs	r3, #2
 80013c4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80013c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ec:	f003 031c 	and.w	r3, r3, #28
 80013f0:	2204      	movs	r2, #4
 80013f2:	409a      	lsls	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4013      	ands	r3, r2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d026      	beq.n	800144a <HAL_DMA_IRQHandler+0x7a>
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	2b00      	cmp	r3, #0
 8001404:	d021      	beq.n	800144a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0320 	and.w	r3, r3, #32
 8001410:	2b00      	cmp	r3, #0
 8001412:	d107      	bne.n	8001424 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0204 	bic.w	r2, r2, #4
 8001422:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001428:	f003 021c 	and.w	r2, r3, #28
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	2104      	movs	r1, #4
 8001432:	fa01 f202 	lsl.w	r2, r1, r2
 8001436:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143c:	2b00      	cmp	r3, #0
 800143e:	d071      	beq.n	8001524 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001448:	e06c      	b.n	8001524 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	f003 031c 	and.w	r3, r3, #28
 8001452:	2202      	movs	r2, #2
 8001454:	409a      	lsls	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4013      	ands	r3, r2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d02e      	beq.n	80014bc <HAL_DMA_IRQHandler+0xec>
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d029      	beq.n	80014bc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0320 	and.w	r3, r3, #32
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10b      	bne.n	800148e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 020a 	bic.w	r2, r2, #10
 8001484:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2201      	movs	r2, #1
 800148a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f003 021c 	and.w	r2, r3, #28
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	2102      	movs	r1, #2
 800149c:	fa01 f202 	lsl.w	r2, r1, r2
 80014a0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d038      	beq.n	8001524 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80014ba:	e033      	b.n	8001524 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c0:	f003 031c 	and.w	r3, r3, #28
 80014c4:	2208      	movs	r2, #8
 80014c6:	409a      	lsls	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4013      	ands	r3, r2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d02a      	beq.n	8001526 <HAL_DMA_IRQHandler+0x156>
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d025      	beq.n	8001526 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 020e 	bic.w	r2, r2, #14
 80014e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	f003 021c 	and.w	r2, r3, #28
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	2101      	movs	r1, #1
 80014f8:	fa01 f202 	lsl.w	r2, r1, r2
 80014fc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2201      	movs	r2, #1
 8001502:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001518:	2b00      	cmp	r3, #0
 800151a:	d004      	beq.n	8001526 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001524:	bf00      	nop
 8001526:	bf00      	nop
}
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}

0800152e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800152e:	b480      	push	{r7}
 8001530:	b085      	sub	sp, #20
 8001532:	af00      	add	r7, sp, #0
 8001534:	60f8      	str	r0, [r7, #12]
 8001536:	60b9      	str	r1, [r7, #8]
 8001538:	607a      	str	r2, [r7, #4]
 800153a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001540:	f003 021c 	and.w	r2, r3, #28
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	2101      	movs	r1, #1
 800154a:	fa01 f202 	lsl.w	r2, r1, r2
 800154e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b10      	cmp	r3, #16
 800155e:	d108      	bne.n	8001572 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	68ba      	ldr	r2, [r7, #8]
 800156e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001570:	e007      	b.n	8001582 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	60da      	str	r2, [r3, #12]
}
 8001582:	bf00      	nop
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001590:	b480      	push	{r7}
 8001592:	b087      	sub	sp, #28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800159a:	2300      	movs	r3, #0
 800159c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800159e:	e17f      	b.n	80018a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	2101      	movs	r1, #1
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ac:	4013      	ands	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f000 8171 	beq.w	800189a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d005      	beq.n	80015d0 <HAL_GPIO_Init+0x40>
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d130      	bne.n	8001632 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	2203      	movs	r2, #3
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4013      	ands	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	693a      	ldr	r2, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001606:	2201      	movs	r2, #1
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	fa02 f303 	lsl.w	r3, r2, r3
 800160e:	43db      	mvns	r3, r3
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	091b      	lsrs	r3, r3, #4
 800161c:	f003 0201 	and.w	r2, r3, #1
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f003 0303 	and.w	r3, r3, #3
 800163a:	2b03      	cmp	r3, #3
 800163c:	d118      	bne.n	8001670 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001642:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001644:	2201      	movs	r2, #1
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	08db      	lsrs	r3, r3, #3
 800165a:	f003 0201 	and.w	r2, r3, #1
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	2b03      	cmp	r3, #3
 800167a:	d017      	beq.n	80016ac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	2203      	movs	r2, #3
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	693a      	ldr	r2, [r7, #16]
 8001690:	4013      	ands	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 0303 	and.w	r3, r3, #3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d123      	bne.n	8001700 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	08da      	lsrs	r2, r3, #3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	3208      	adds	r2, #8
 80016c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	220f      	movs	r2, #15
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43db      	mvns	r3, r3
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4013      	ands	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	691a      	ldr	r2, [r3, #16]
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	08da      	lsrs	r2, r3, #3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3208      	adds	r2, #8
 80016fa:	6939      	ldr	r1, [r7, #16]
 80016fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	2203      	movs	r2, #3
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4013      	ands	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0203 	and.w	r2, r3, #3
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 80ac 	beq.w	800189a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001742:	4b5f      	ldr	r3, [pc, #380]	; (80018c0 <HAL_GPIO_Init+0x330>)
 8001744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001746:	4a5e      	ldr	r2, [pc, #376]	; (80018c0 <HAL_GPIO_Init+0x330>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6613      	str	r3, [r2, #96]	; 0x60
 800174e:	4b5c      	ldr	r3, [pc, #368]	; (80018c0 <HAL_GPIO_Init+0x330>)
 8001750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800175a:	4a5a      	ldr	r2, [pc, #360]	; (80018c4 <HAL_GPIO_Init+0x334>)
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	089b      	lsrs	r3, r3, #2
 8001760:	3302      	adds	r3, #2
 8001762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001766:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	220f      	movs	r2, #15
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	693a      	ldr	r2, [r7, #16]
 800177a:	4013      	ands	r3, r2
 800177c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001784:	d025      	beq.n	80017d2 <HAL_GPIO_Init+0x242>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4f      	ldr	r2, [pc, #316]	; (80018c8 <HAL_GPIO_Init+0x338>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d01f      	beq.n	80017ce <HAL_GPIO_Init+0x23e>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4e      	ldr	r2, [pc, #312]	; (80018cc <HAL_GPIO_Init+0x33c>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d019      	beq.n	80017ca <HAL_GPIO_Init+0x23a>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4d      	ldr	r2, [pc, #308]	; (80018d0 <HAL_GPIO_Init+0x340>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d013      	beq.n	80017c6 <HAL_GPIO_Init+0x236>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a4c      	ldr	r2, [pc, #304]	; (80018d4 <HAL_GPIO_Init+0x344>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d00d      	beq.n	80017c2 <HAL_GPIO_Init+0x232>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a4b      	ldr	r2, [pc, #300]	; (80018d8 <HAL_GPIO_Init+0x348>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d007      	beq.n	80017be <HAL_GPIO_Init+0x22e>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a4a      	ldr	r2, [pc, #296]	; (80018dc <HAL_GPIO_Init+0x34c>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d101      	bne.n	80017ba <HAL_GPIO_Init+0x22a>
 80017b6:	2306      	movs	r3, #6
 80017b8:	e00c      	b.n	80017d4 <HAL_GPIO_Init+0x244>
 80017ba:	2307      	movs	r3, #7
 80017bc:	e00a      	b.n	80017d4 <HAL_GPIO_Init+0x244>
 80017be:	2305      	movs	r3, #5
 80017c0:	e008      	b.n	80017d4 <HAL_GPIO_Init+0x244>
 80017c2:	2304      	movs	r3, #4
 80017c4:	e006      	b.n	80017d4 <HAL_GPIO_Init+0x244>
 80017c6:	2303      	movs	r3, #3
 80017c8:	e004      	b.n	80017d4 <HAL_GPIO_Init+0x244>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e002      	b.n	80017d4 <HAL_GPIO_Init+0x244>
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <HAL_GPIO_Init+0x244>
 80017d2:	2300      	movs	r3, #0
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	f002 0203 	and.w	r2, r2, #3
 80017da:	0092      	lsls	r2, r2, #2
 80017dc:	4093      	lsls	r3, r2
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017e4:	4937      	ldr	r1, [pc, #220]	; (80018c4 <HAL_GPIO_Init+0x334>)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	089b      	lsrs	r3, r3, #2
 80017ea:	3302      	adds	r3, #2
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017f2:	4b3b      	ldr	r3, [pc, #236]	; (80018e0 <HAL_GPIO_Init+0x350>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	43db      	mvns	r3, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001816:	4a32      	ldr	r2, [pc, #200]	; (80018e0 <HAL_GPIO_Init+0x350>)
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800181c:	4b30      	ldr	r3, [pc, #192]	; (80018e0 <HAL_GPIO_Init+0x350>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	43db      	mvns	r3, r3
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	4013      	ands	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4313      	orrs	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001840:	4a27      	ldr	r2, [pc, #156]	; (80018e0 <HAL_GPIO_Init+0x350>)
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001846:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <HAL_GPIO_Init+0x350>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	43db      	mvns	r3, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4313      	orrs	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800186a:	4a1d      	ldr	r2, [pc, #116]	; (80018e0 <HAL_GPIO_Init+0x350>)
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001870:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <HAL_GPIO_Init+0x350>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	43db      	mvns	r3, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001894:	4a12      	ldr	r2, [pc, #72]	; (80018e0 <HAL_GPIO_Init+0x350>)
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	3301      	adds	r3, #1
 800189e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	fa22 f303 	lsr.w	r3, r2, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f47f ae78 	bne.w	80015a0 <HAL_GPIO_Init+0x10>
  }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	371c      	adds	r7, #28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40010000 	.word	0x40010000
 80018c8:	48000400 	.word	0x48000400
 80018cc:	48000800 	.word	0x48000800
 80018d0:	48000c00 	.word	0x48000c00
 80018d4:	48001000 	.word	0x48001000
 80018d8:	48001400 	.word	0x48001400
 80018dc:	48001800 	.word	0x48001800
 80018e0:	40010400 	.word	0x40010400

080018e4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a04      	ldr	r2, [pc, #16]	; (8001900 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80018ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	40007000 	.word	0x40007000

08001904 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <HAL_PWREx_GetVoltageRange+0x18>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	40007000 	.word	0x40007000

08001920 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800192e:	d130      	bne.n	8001992 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001930:	4b23      	ldr	r3, [pc, #140]	; (80019c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800193c:	d038      	beq.n	80019b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800193e:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001946:	4a1e      	ldr	r2, [pc, #120]	; (80019c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001948:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800194c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800194e:	4b1d      	ldr	r3, [pc, #116]	; (80019c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2232      	movs	r2, #50	; 0x32
 8001954:	fb02 f303 	mul.w	r3, r2, r3
 8001958:	4a1b      	ldr	r2, [pc, #108]	; (80019c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800195a:	fba2 2303 	umull	r2, r3, r2, r3
 800195e:	0c9b      	lsrs	r3, r3, #18
 8001960:	3301      	adds	r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001964:	e002      	b.n	800196c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	3b01      	subs	r3, #1
 800196a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800196c:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001978:	d102      	bne.n	8001980 <HAL_PWREx_ControlVoltageScaling+0x60>
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1f2      	bne.n	8001966 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001980:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800198c:	d110      	bne.n	80019b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e00f      	b.n	80019b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001992:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800199a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800199e:	d007      	beq.n	80019b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019a0:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019a8:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3714      	adds	r7, #20
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	40007000 	.word	0x40007000
 80019c4:	200000b0 	.word	0x200000b0
 80019c8:	431bde83 	.word	0x431bde83

080019cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e3ca      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019de:	4b97      	ldr	r3, [pc, #604]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019e8:	4b94      	ldr	r3, [pc, #592]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 80e4 	beq.w	8001bc8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d007      	beq.n	8001a16 <HAL_RCC_OscConfig+0x4a>
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	2b0c      	cmp	r3, #12
 8001a0a:	f040 808b 	bne.w	8001b24 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	f040 8087 	bne.w	8001b24 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a16:	4b89      	ldr	r3, [pc, #548]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d005      	beq.n	8001a2e <HAL_RCC_OscConfig+0x62>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e3a2      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a1a      	ldr	r2, [r3, #32]
 8001a32:	4b82      	ldr	r3, [pc, #520]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d004      	beq.n	8001a48 <HAL_RCC_OscConfig+0x7c>
 8001a3e:	4b7f      	ldr	r3, [pc, #508]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a46:	e005      	b.n	8001a54 <HAL_RCC_OscConfig+0x88>
 8001a48:	4b7c      	ldr	r3, [pc, #496]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a4e:	091b      	lsrs	r3, r3, #4
 8001a50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d223      	bcs.n	8001aa0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f000 fd55 	bl	800250c <RCC_SetFlashLatencyFromMSIRange>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e383      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a6c:	4b73      	ldr	r3, [pc, #460]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a72      	ldr	r2, [pc, #456]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001a72:	f043 0308 	orr.w	r3, r3, #8
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	4b70      	ldr	r3, [pc, #448]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	496d      	ldr	r1, [pc, #436]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a8a:	4b6c      	ldr	r3, [pc, #432]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	021b      	lsls	r3, r3, #8
 8001a98:	4968      	ldr	r1, [pc, #416]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	604b      	str	r3, [r1, #4]
 8001a9e:	e025      	b.n	8001aec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aa0:	4b66      	ldr	r3, [pc, #408]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a65      	ldr	r2, [pc, #404]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001aa6:	f043 0308 	orr.w	r3, r3, #8
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b63      	ldr	r3, [pc, #396]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	4960      	ldr	r1, [pc, #384]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001abe:	4b5f      	ldr	r3, [pc, #380]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	495b      	ldr	r1, [pc, #364]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d109      	bne.n	8001aec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f000 fd15 	bl	800250c <RCC_SetFlashLatencyFromMSIRange>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e343      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001aec:	f000 fc4a 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 8001af0:	4602      	mov	r2, r0
 8001af2:	4b52      	ldr	r3, [pc, #328]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	091b      	lsrs	r3, r3, #4
 8001af8:	f003 030f 	and.w	r3, r3, #15
 8001afc:	4950      	ldr	r1, [pc, #320]	; (8001c40 <HAL_RCC_OscConfig+0x274>)
 8001afe:	5ccb      	ldrb	r3, [r1, r3]
 8001b00:	f003 031f 	and.w	r3, r3, #31
 8001b04:	fa22 f303 	lsr.w	r3, r2, r3
 8001b08:	4a4e      	ldr	r2, [pc, #312]	; (8001c44 <HAL_RCC_OscConfig+0x278>)
 8001b0a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b0c:	4b4e      	ldr	r3, [pc, #312]	; (8001c48 <HAL_RCC_OscConfig+0x27c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff f8ed 	bl	8000cf0 <HAL_InitTick>
 8001b16:	4603      	mov	r3, r0
 8001b18:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b1a:	7bfb      	ldrb	r3, [r7, #15]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d052      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
 8001b22:	e327      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d032      	beq.n	8001b92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b2c:	4b43      	ldr	r3, [pc, #268]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a42      	ldr	r2, [pc, #264]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b38:	f7ff f92a 	bl	8000d90 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b40:	f7ff f926 	bl	8000d90 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e310      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b52:	4b3a      	ldr	r3, [pc, #232]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b5e:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a36      	ldr	r2, [pc, #216]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001b64:	f043 0308 	orr.w	r3, r3, #8
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b34      	ldr	r3, [pc, #208]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	4931      	ldr	r1, [pc, #196]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b7c:	4b2f      	ldr	r3, [pc, #188]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	021b      	lsls	r3, r3, #8
 8001b8a:	492c      	ldr	r1, [pc, #176]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]
 8001b90:	e01a      	b.n	8001bc8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b92:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a29      	ldr	r2, [pc, #164]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001b98:	f023 0301 	bic.w	r3, r3, #1
 8001b9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b9e:	f7ff f8f7 	bl	8000d90 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ba6:	f7ff f8f3 	bl	8000d90 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e2dd      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bb8:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0302 	and.w	r3, r3, #2
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1f0      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x1da>
 8001bc4:	e000      	b.n	8001bc8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bc6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d074      	beq.n	8001cbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d005      	beq.n	8001be6 <HAL_RCC_OscConfig+0x21a>
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	2b0c      	cmp	r3, #12
 8001bde:	d10e      	bne.n	8001bfe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	2b03      	cmp	r3, #3
 8001be4:	d10b      	bne.n	8001bfe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be6:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d064      	beq.n	8001cbc <HAL_RCC_OscConfig+0x2f0>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d160      	bne.n	8001cbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e2ba      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c06:	d106      	bne.n	8001c16 <HAL_RCC_OscConfig+0x24a>
 8001c08:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a0b      	ldr	r2, [pc, #44]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	e026      	b.n	8001c64 <HAL_RCC_OscConfig+0x298>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c1e:	d115      	bne.n	8001c4c <HAL_RCC_OscConfig+0x280>
 8001c20:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a05      	ldr	r2, [pc, #20]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001c26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a02      	ldr	r2, [pc, #8]	; (8001c3c <HAL_RCC_OscConfig+0x270>)
 8001c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	e014      	b.n	8001c64 <HAL_RCC_OscConfig+0x298>
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	08007f38 	.word	0x08007f38
 8001c44:	200000b0 	.word	0x200000b0
 8001c48:	200000b4 	.word	0x200000b4
 8001c4c:	4ba0      	ldr	r3, [pc, #640]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a9f      	ldr	r2, [pc, #636]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c56:	6013      	str	r3, [r2, #0]
 8001c58:	4b9d      	ldr	r3, [pc, #628]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a9c      	ldr	r2, [pc, #624]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d013      	beq.n	8001c94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6c:	f7ff f890 	bl	8000d90 <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c74:	f7ff f88c 	bl	8000d90 <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b64      	cmp	r3, #100	; 0x64
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e276      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c86:	4b92      	ldr	r3, [pc, #584]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d0f0      	beq.n	8001c74 <HAL_RCC_OscConfig+0x2a8>
 8001c92:	e014      	b.n	8001cbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c94:	f7ff f87c 	bl	8000d90 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c9c:	f7ff f878 	bl	8000d90 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b64      	cmp	r3, #100	; 0x64
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e262      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cae:	4b88      	ldr	r3, [pc, #544]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x2d0>
 8001cba:	e000      	b.n	8001cbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d060      	beq.n	8001d8c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	d005      	beq.n	8001cdc <HAL_RCC_OscConfig+0x310>
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	2b0c      	cmp	r3, #12
 8001cd4:	d119      	bne.n	8001d0a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d116      	bne.n	8001d0a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cdc:	4b7c      	ldr	r3, [pc, #496]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d005      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x328>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e23f      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf4:	4b76      	ldr	r3, [pc, #472]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	061b      	lsls	r3, r3, #24
 8001d02:	4973      	ldr	r1, [pc, #460]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d08:	e040      	b.n	8001d8c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	68db      	ldr	r3, [r3, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d023      	beq.n	8001d5a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d12:	4b6f      	ldr	r3, [pc, #444]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a6e      	ldr	r2, [pc, #440]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1e:	f7ff f837 	bl	8000d90 <HAL_GetTick>
 8001d22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d24:	e008      	b.n	8001d38 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d26:	f7ff f833 	bl	8000d90 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e21d      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d38:	4b65      	ldr	r3, [pc, #404]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0f0      	beq.n	8001d26 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d44:	4b62      	ldr	r3, [pc, #392]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	061b      	lsls	r3, r3, #24
 8001d52:	495f      	ldr	r1, [pc, #380]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]
 8001d58:	e018      	b.n	8001d8c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d5a:	4b5d      	ldr	r3, [pc, #372]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a5c      	ldr	r2, [pc, #368]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d66:	f7ff f813 	bl	8000d90 <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d6e:	f7ff f80f 	bl	8000d90 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e1f9      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d80:	4b53      	ldr	r3, [pc, #332]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1f0      	bne.n	8001d6e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d03c      	beq.n	8001e12 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	695b      	ldr	r3, [r3, #20]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d01c      	beq.n	8001dda <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001da0:	4b4b      	ldr	r3, [pc, #300]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da6:	4a4a      	ldr	r2, [pc, #296]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db0:	f7fe ffee 	bl	8000d90 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db8:	f7fe ffea 	bl	8000d90 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e1d4      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dca:	4b41      	ldr	r3, [pc, #260]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0ef      	beq.n	8001db8 <HAL_RCC_OscConfig+0x3ec>
 8001dd8:	e01b      	b.n	8001e12 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dda:	4b3d      	ldr	r3, [pc, #244]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001de0:	4a3b      	ldr	r2, [pc, #236]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001de2:	f023 0301 	bic.w	r3, r3, #1
 8001de6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dea:	f7fe ffd1 	bl	8000d90 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df2:	f7fe ffcd 	bl	8000d90 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e1b7      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e04:	4b32      	ldr	r3, [pc, #200]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1ef      	bne.n	8001df2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 80a6 	beq.w	8001f6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e20:	2300      	movs	r3, #0
 8001e22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e24:	4b2a      	ldr	r3, [pc, #168]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10d      	bne.n	8001e4c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e30:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e34:	4a26      	ldr	r2, [pc, #152]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e3c:	4b24      	ldr	r3, [pc, #144]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e4c:	4b21      	ldr	r3, [pc, #132]	; (8001ed4 <HAL_RCC_OscConfig+0x508>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d118      	bne.n	8001e8a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e58:	4b1e      	ldr	r3, [pc, #120]	; (8001ed4 <HAL_RCC_OscConfig+0x508>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a1d      	ldr	r2, [pc, #116]	; (8001ed4 <HAL_RCC_OscConfig+0x508>)
 8001e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e64:	f7fe ff94 	bl	8000d90 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e6c:	f7fe ff90 	bl	8000d90 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e17a      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e7e:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <HAL_RCC_OscConfig+0x508>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d108      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x4d8>
 8001e92:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e98:	4a0d      	ldr	r2, [pc, #52]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ea2:	e029      	b.n	8001ef8 <HAL_RCC_OscConfig+0x52c>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	2b05      	cmp	r3, #5
 8001eaa:	d115      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x50c>
 8001eac:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb2:	4a07      	ldr	r2, [pc, #28]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001eb4:	f043 0304 	orr.w	r3, r3, #4
 8001eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ebc:	4b04      	ldr	r3, [pc, #16]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec2:	4a03      	ldr	r2, [pc, #12]	; (8001ed0 <HAL_RCC_OscConfig+0x504>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ecc:	e014      	b.n	8001ef8 <HAL_RCC_OscConfig+0x52c>
 8001ece:	bf00      	nop
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40007000 	.word	0x40007000
 8001ed8:	4b9c      	ldr	r3, [pc, #624]	; (800214c <HAL_RCC_OscConfig+0x780>)
 8001eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ede:	4a9b      	ldr	r2, [pc, #620]	; (800214c <HAL_RCC_OscConfig+0x780>)
 8001ee0:	f023 0301 	bic.w	r3, r3, #1
 8001ee4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ee8:	4b98      	ldr	r3, [pc, #608]	; (800214c <HAL_RCC_OscConfig+0x780>)
 8001eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eee:	4a97      	ldr	r2, [pc, #604]	; (800214c <HAL_RCC_OscConfig+0x780>)
 8001ef0:	f023 0304 	bic.w	r3, r3, #4
 8001ef4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d016      	beq.n	8001f2e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f00:	f7fe ff46 	bl	8000d90 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f06:	e00a      	b.n	8001f1e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f08:	f7fe ff42 	bl	8000d90 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e12a      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f1e:	4b8b      	ldr	r3, [pc, #556]	; (800214c <HAL_RCC_OscConfig+0x780>)
 8001f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d0ed      	beq.n	8001f08 <HAL_RCC_OscConfig+0x53c>
 8001f2c:	e015      	b.n	8001f5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2e:	f7fe ff2f 	bl	8000d90 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f34:	e00a      	b.n	8001f4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f36:	f7fe ff2b 	bl	8000d90 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e113      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f4c:	4b7f      	ldr	r3, [pc, #508]	; (800214c <HAL_RCC_OscConfig+0x780>)
 8001f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1ed      	bne.n	8001f36 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f5a:	7ffb      	ldrb	r3, [r7, #31]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d105      	bne.n	8001f6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f60:	4b7a      	ldr	r3, [pc, #488]	; (800214c <HAL_RCC_OscConfig+0x780>)
 8001f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f64:	4a79      	ldr	r2, [pc, #484]	; (800214c <HAL_RCC_OscConfig+0x780>)
 8001f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 80fe 	beq.w	8002172 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	f040 80d0 	bne.w	8002120 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f80:	4b72      	ldr	r3, [pc, #456]	; (800214c <HAL_RCC_OscConfig+0x780>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f003 0203 	and.w	r2, r3, #3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d130      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d127      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d11f      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fc0:	2a07      	cmp	r2, #7
 8001fc2:	bf14      	ite	ne
 8001fc4:	2201      	movne	r2, #1
 8001fc6:	2200      	moveq	r2, #0
 8001fc8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d113      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd8:	085b      	lsrs	r3, r3, #1
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d109      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	085b      	lsrs	r3, r3, #1
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d06e      	beq.n	80020d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	2b0c      	cmp	r3, #12
 8001ffa:	d069      	beq.n	80020d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ffc:	4b53      	ldr	r3, [pc, #332]	; (800214c <HAL_RCC_OscConfig+0x780>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d105      	bne.n	8002014 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002008:	4b50      	ldr	r3, [pc, #320]	; (800214c <HAL_RCC_OscConfig+0x780>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0ad      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002018:	4b4c      	ldr	r3, [pc, #304]	; (800214c <HAL_RCC_OscConfig+0x780>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a4b      	ldr	r2, [pc, #300]	; (800214c <HAL_RCC_OscConfig+0x780>)
 800201e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002022:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002024:	f7fe feb4 	bl	8000d90 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800202a:	e008      	b.n	800203e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800202c:	f7fe feb0 	bl	8000d90 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e09a      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800203e:	4b43      	ldr	r3, [pc, #268]	; (800214c <HAL_RCC_OscConfig+0x780>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f0      	bne.n	800202c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800204a:	4b40      	ldr	r3, [pc, #256]	; (800214c <HAL_RCC_OscConfig+0x780>)
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	4b40      	ldr	r3, [pc, #256]	; (8002150 <HAL_RCC_OscConfig+0x784>)
 8002050:	4013      	ands	r3, r2
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800205a:	3a01      	subs	r2, #1
 800205c:	0112      	lsls	r2, r2, #4
 800205e:	4311      	orrs	r1, r2
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002064:	0212      	lsls	r2, r2, #8
 8002066:	4311      	orrs	r1, r2
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800206c:	0852      	lsrs	r2, r2, #1
 800206e:	3a01      	subs	r2, #1
 8002070:	0552      	lsls	r2, r2, #21
 8002072:	4311      	orrs	r1, r2
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002078:	0852      	lsrs	r2, r2, #1
 800207a:	3a01      	subs	r2, #1
 800207c:	0652      	lsls	r2, r2, #25
 800207e:	4311      	orrs	r1, r2
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002084:	0912      	lsrs	r2, r2, #4
 8002086:	0452      	lsls	r2, r2, #17
 8002088:	430a      	orrs	r2, r1
 800208a:	4930      	ldr	r1, [pc, #192]	; (800214c <HAL_RCC_OscConfig+0x780>)
 800208c:	4313      	orrs	r3, r2
 800208e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002090:	4b2e      	ldr	r3, [pc, #184]	; (800214c <HAL_RCC_OscConfig+0x780>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a2d      	ldr	r2, [pc, #180]	; (800214c <HAL_RCC_OscConfig+0x780>)
 8002096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800209a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800209c:	4b2b      	ldr	r3, [pc, #172]	; (800214c <HAL_RCC_OscConfig+0x780>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	4a2a      	ldr	r2, [pc, #168]	; (800214c <HAL_RCC_OscConfig+0x780>)
 80020a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020a8:	f7fe fe72 	bl	8000d90 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b0:	f7fe fe6e 	bl	8000d90 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e058      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c2:	4b22      	ldr	r3, [pc, #136]	; (800214c <HAL_RCC_OscConfig+0x780>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ce:	e050      	b.n	8002172 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e04f      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d4:	4b1d      	ldr	r3, [pc, #116]	; (800214c <HAL_RCC_OscConfig+0x780>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d148      	bne.n	8002172 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020e0:	4b1a      	ldr	r3, [pc, #104]	; (800214c <HAL_RCC_OscConfig+0x780>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a19      	ldr	r2, [pc, #100]	; (800214c <HAL_RCC_OscConfig+0x780>)
 80020e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020ec:	4b17      	ldr	r3, [pc, #92]	; (800214c <HAL_RCC_OscConfig+0x780>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4a16      	ldr	r2, [pc, #88]	; (800214c <HAL_RCC_OscConfig+0x780>)
 80020f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020f8:	f7fe fe4a 	bl	8000d90 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002100:	f7fe fe46 	bl	8000d90 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e030      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002112:	4b0e      	ldr	r3, [pc, #56]	; (800214c <HAL_RCC_OscConfig+0x780>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x734>
 800211e:	e028      	b.n	8002172 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	2b0c      	cmp	r3, #12
 8002124:	d023      	beq.n	800216e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <HAL_RCC_OscConfig+0x780>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a08      	ldr	r2, [pc, #32]	; (800214c <HAL_RCC_OscConfig+0x780>)
 800212c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002132:	f7fe fe2d 	bl	8000d90 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002138:	e00c      	b.n	8002154 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213a:	f7fe fe29 	bl	8000d90 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d905      	bls.n	8002154 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e013      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
 800214c:	40021000 	.word	0x40021000
 8002150:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002154:	4b09      	ldr	r3, [pc, #36]	; (800217c <HAL_RCC_OscConfig+0x7b0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1ec      	bne.n	800213a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002160:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_RCC_OscConfig+0x7b0>)
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	4905      	ldr	r1, [pc, #20]	; (800217c <HAL_RCC_OscConfig+0x7b0>)
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_RCC_OscConfig+0x7b4>)
 8002168:	4013      	ands	r3, r2
 800216a:	60cb      	str	r3, [r1, #12]
 800216c:	e001      	b.n	8002172 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3720      	adds	r7, #32
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40021000 	.word	0x40021000
 8002180:	feeefffc 	.word	0xfeeefffc

08002184 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e0e7      	b.n	8002368 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002198:	4b75      	ldr	r3, [pc, #468]	; (8002370 <HAL_RCC_ClockConfig+0x1ec>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d910      	bls.n	80021c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a6:	4b72      	ldr	r3, [pc, #456]	; (8002370 <HAL_RCC_ClockConfig+0x1ec>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 0207 	bic.w	r2, r3, #7
 80021ae:	4970      	ldr	r1, [pc, #448]	; (8002370 <HAL_RCC_ClockConfig+0x1ec>)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b6:	4b6e      	ldr	r3, [pc, #440]	; (8002370 <HAL_RCC_ClockConfig+0x1ec>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0cf      	b.n	8002368 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d010      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	4b66      	ldr	r3, [pc, #408]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d908      	bls.n	80021f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e4:	4b63      	ldr	r3, [pc, #396]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	4960      	ldr	r1, [pc, #384]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d04c      	beq.n	800229c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b03      	cmp	r3, #3
 8002208:	d107      	bne.n	800221a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800220a:	4b5a      	ldr	r3, [pc, #360]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d121      	bne.n	800225a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e0a6      	b.n	8002368 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d107      	bne.n	8002232 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002222:	4b54      	ldr	r3, [pc, #336]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d115      	bne.n	800225a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e09a      	b.n	8002368 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d107      	bne.n	800224a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800223a:	4b4e      	ldr	r3, [pc, #312]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d109      	bne.n	800225a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e08e      	b.n	8002368 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800224a:	4b4a      	ldr	r3, [pc, #296]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e086      	b.n	8002368 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800225a:	4b46      	ldr	r3, [pc, #280]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f023 0203 	bic.w	r2, r3, #3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4943      	ldr	r1, [pc, #268]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 8002268:	4313      	orrs	r3, r2
 800226a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800226c:	f7fe fd90 	bl	8000d90 <HAL_GetTick>
 8002270:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002272:	e00a      	b.n	800228a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002274:	f7fe fd8c 	bl	8000d90 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002282:	4293      	cmp	r3, r2
 8002284:	d901      	bls.n	800228a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e06e      	b.n	8002368 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228a:	4b3a      	ldr	r3, [pc, #232]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 020c 	and.w	r2, r3, #12
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	429a      	cmp	r2, r3
 800229a:	d1eb      	bne.n	8002274 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d010      	beq.n	80022ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	4b31      	ldr	r3, [pc, #196]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d208      	bcs.n	80022ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b8:	4b2e      	ldr	r3, [pc, #184]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	492b      	ldr	r1, [pc, #172]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022ca:	4b29      	ldr	r3, [pc, #164]	; (8002370 <HAL_RCC_ClockConfig+0x1ec>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d210      	bcs.n	80022fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d8:	4b25      	ldr	r3, [pc, #148]	; (8002370 <HAL_RCC_ClockConfig+0x1ec>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f023 0207 	bic.w	r2, r3, #7
 80022e0:	4923      	ldr	r1, [pc, #140]	; (8002370 <HAL_RCC_ClockConfig+0x1ec>)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e8:	4b21      	ldr	r3, [pc, #132]	; (8002370 <HAL_RCC_ClockConfig+0x1ec>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d001      	beq.n	80022fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e036      	b.n	8002368 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0304 	and.w	r3, r3, #4
 8002302:	2b00      	cmp	r3, #0
 8002304:	d008      	beq.n	8002318 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002306:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	4918      	ldr	r1, [pc, #96]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 8002314:	4313      	orrs	r3, r2
 8002316:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b00      	cmp	r3, #0
 8002322:	d009      	beq.n	8002338 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002324:	4b13      	ldr	r3, [pc, #76]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	4910      	ldr	r1, [pc, #64]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 8002334:	4313      	orrs	r3, r2
 8002336:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002338:	f000 f824 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 800233c:	4602      	mov	r2, r0
 800233e:	4b0d      	ldr	r3, [pc, #52]	; (8002374 <HAL_RCC_ClockConfig+0x1f0>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	091b      	lsrs	r3, r3, #4
 8002344:	f003 030f 	and.w	r3, r3, #15
 8002348:	490b      	ldr	r1, [pc, #44]	; (8002378 <HAL_RCC_ClockConfig+0x1f4>)
 800234a:	5ccb      	ldrb	r3, [r1, r3]
 800234c:	f003 031f 	and.w	r3, r3, #31
 8002350:	fa22 f303 	lsr.w	r3, r2, r3
 8002354:	4a09      	ldr	r2, [pc, #36]	; (800237c <HAL_RCC_ClockConfig+0x1f8>)
 8002356:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002358:	4b09      	ldr	r3, [pc, #36]	; (8002380 <HAL_RCC_ClockConfig+0x1fc>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe fcc7 	bl	8000cf0 <HAL_InitTick>
 8002362:	4603      	mov	r3, r0
 8002364:	72fb      	strb	r3, [r7, #11]

  return status;
 8002366:	7afb      	ldrb	r3, [r7, #11]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40022000 	.word	0x40022000
 8002374:	40021000 	.word	0x40021000
 8002378:	08007f38 	.word	0x08007f38
 800237c:	200000b0 	.word	0x200000b0
 8002380:	200000b4 	.word	0x200000b4

08002384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002384:	b480      	push	{r7}
 8002386:	b089      	sub	sp, #36	; 0x24
 8002388:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
 800238e:	2300      	movs	r3, #0
 8002390:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002392:	4b3e      	ldr	r3, [pc, #248]	; (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 030c 	and.w	r3, r3, #12
 800239a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800239c:	4b3b      	ldr	r3, [pc, #236]	; (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_GetSysClockFreq+0x34>
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	2b0c      	cmp	r3, #12
 80023b0:	d121      	bne.n	80023f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d11e      	bne.n	80023f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023b8:	4b34      	ldr	r3, [pc, #208]	; (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d107      	bne.n	80023d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023c4:	4b31      	ldr	r3, [pc, #196]	; (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 80023c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ca:	0a1b      	lsrs	r3, r3, #8
 80023cc:	f003 030f 	and.w	r3, r3, #15
 80023d0:	61fb      	str	r3, [r7, #28]
 80023d2:	e005      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023d4:	4b2d      	ldr	r3, [pc, #180]	; (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023e0:	4a2b      	ldr	r2, [pc, #172]	; (8002490 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10d      	bne.n	800240c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023f4:	e00a      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d102      	bne.n	8002402 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023fc:	4b25      	ldr	r3, [pc, #148]	; (8002494 <HAL_RCC_GetSysClockFreq+0x110>)
 80023fe:	61bb      	str	r3, [r7, #24]
 8002400:	e004      	b.n	800240c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	2b08      	cmp	r3, #8
 8002406:	d101      	bne.n	800240c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002408:	4b23      	ldr	r3, [pc, #140]	; (8002498 <HAL_RCC_GetSysClockFreq+0x114>)
 800240a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	2b0c      	cmp	r3, #12
 8002410:	d134      	bne.n	800247c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002412:	4b1e      	ldr	r3, [pc, #120]	; (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b02      	cmp	r3, #2
 8002420:	d003      	beq.n	800242a <HAL_RCC_GetSysClockFreq+0xa6>
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b03      	cmp	r3, #3
 8002426:	d003      	beq.n	8002430 <HAL_RCC_GetSysClockFreq+0xac>
 8002428:	e005      	b.n	8002436 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800242a:	4b1a      	ldr	r3, [pc, #104]	; (8002494 <HAL_RCC_GetSysClockFreq+0x110>)
 800242c:	617b      	str	r3, [r7, #20]
      break;
 800242e:	e005      	b.n	800243c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002430:	4b19      	ldr	r3, [pc, #100]	; (8002498 <HAL_RCC_GetSysClockFreq+0x114>)
 8002432:	617b      	str	r3, [r7, #20]
      break;
 8002434:	e002      	b.n	800243c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	617b      	str	r3, [r7, #20]
      break;
 800243a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800243c:	4b13      	ldr	r3, [pc, #76]	; (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	091b      	lsrs	r3, r3, #4
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	3301      	adds	r3, #1
 8002448:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800244a:	4b10      	ldr	r3, [pc, #64]	; (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	0a1b      	lsrs	r3, r3, #8
 8002450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	fb03 f202 	mul.w	r2, r3, r2
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002460:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002462:	4b0a      	ldr	r3, [pc, #40]	; (800248c <HAL_RCC_GetSysClockFreq+0x108>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	0e5b      	lsrs	r3, r3, #25
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	3301      	adds	r3, #1
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	fbb2 f3f3 	udiv	r3, r2, r3
 800247a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800247c:	69bb      	ldr	r3, [r7, #24]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3724      	adds	r7, #36	; 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000
 8002490:	08007f50 	.word	0x08007f50
 8002494:	00f42400 	.word	0x00f42400
 8002498:	007a1200 	.word	0x007a1200

0800249c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800249c:	b480      	push	{r7}
 800249e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024a2:	681b      	ldr	r3, [r3, #0]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	200000b0 	.word	0x200000b0

080024b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024b8:	f7ff fff0 	bl	800249c <HAL_RCC_GetHCLKFreq>
 80024bc:	4602      	mov	r2, r0
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	0a1b      	lsrs	r3, r3, #8
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	4904      	ldr	r1, [pc, #16]	; (80024dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80024ca:	5ccb      	ldrb	r3, [r1, r3]
 80024cc:	f003 031f 	and.w	r3, r3, #31
 80024d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40021000 	.word	0x40021000
 80024dc:	08007f48 	.word	0x08007f48

080024e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024e4:	f7ff ffda 	bl	800249c <HAL_RCC_GetHCLKFreq>
 80024e8:	4602      	mov	r2, r0
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	0adb      	lsrs	r3, r3, #11
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	4904      	ldr	r1, [pc, #16]	; (8002508 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024f6:	5ccb      	ldrb	r3, [r1, r3]
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002500:	4618      	mov	r0, r3
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40021000 	.word	0x40021000
 8002508:	08007f48 	.word	0x08007f48

0800250c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002514:	2300      	movs	r3, #0
 8002516:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002518:	4b2a      	ldr	r3, [pc, #168]	; (80025c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800251a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002524:	f7ff f9ee 	bl	8001904 <HAL_PWREx_GetVoltageRange>
 8002528:	6178      	str	r0, [r7, #20]
 800252a:	e014      	b.n	8002556 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800252c:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800252e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002530:	4a24      	ldr	r2, [pc, #144]	; (80025c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002532:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002536:	6593      	str	r3, [r2, #88]	; 0x58
 8002538:	4b22      	ldr	r3, [pc, #136]	; (80025c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800253a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002544:	f7ff f9de 	bl	8001904 <HAL_PWREx_GetVoltageRange>
 8002548:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800254a:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800254c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254e:	4a1d      	ldr	r2, [pc, #116]	; (80025c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002554:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800255c:	d10b      	bne.n	8002576 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2b80      	cmp	r3, #128	; 0x80
 8002562:	d919      	bls.n	8002598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2ba0      	cmp	r3, #160	; 0xa0
 8002568:	d902      	bls.n	8002570 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800256a:	2302      	movs	r3, #2
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	e013      	b.n	8002598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002570:	2301      	movs	r3, #1
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	e010      	b.n	8002598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b80      	cmp	r3, #128	; 0x80
 800257a:	d902      	bls.n	8002582 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800257c:	2303      	movs	r3, #3
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	e00a      	b.n	8002598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b80      	cmp	r3, #128	; 0x80
 8002586:	d102      	bne.n	800258e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002588:	2302      	movs	r3, #2
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	e004      	b.n	8002598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b70      	cmp	r3, #112	; 0x70
 8002592:	d101      	bne.n	8002598 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002594:	2301      	movs	r3, #1
 8002596:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f023 0207 	bic.w	r2, r3, #7
 80025a0:	4909      	ldr	r1, [pc, #36]	; (80025c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025a8:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d001      	beq.n	80025ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40022000 	.word	0x40022000

080025cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025d4:	2300      	movs	r3, #0
 80025d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025d8:	2300      	movs	r3, #0
 80025da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d041      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025f0:	d02a      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025f6:	d824      	bhi.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025fc:	d008      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002602:	d81e      	bhi.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00a      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002608:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800260c:	d010      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800260e:	e018      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002610:	4b86      	ldr	r3, [pc, #536]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	4a85      	ldr	r2, [pc, #532]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800261a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800261c:	e015      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3304      	adds	r3, #4
 8002622:	2100      	movs	r1, #0
 8002624:	4618      	mov	r0, r3
 8002626:	f000 facb 	bl	8002bc0 <RCCEx_PLLSAI1_Config>
 800262a:	4603      	mov	r3, r0
 800262c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800262e:	e00c      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3320      	adds	r3, #32
 8002634:	2100      	movs	r1, #0
 8002636:	4618      	mov	r0, r3
 8002638:	f000 fbb6 	bl	8002da8 <RCCEx_PLLSAI2_Config>
 800263c:	4603      	mov	r3, r0
 800263e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002640:	e003      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	74fb      	strb	r3, [r7, #19]
      break;
 8002646:	e000      	b.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002648:	bf00      	nop
    }

    if(ret == HAL_OK)
 800264a:	7cfb      	ldrb	r3, [r7, #19]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10b      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002650:	4b76      	ldr	r3, [pc, #472]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002656:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800265e:	4973      	ldr	r1, [pc, #460]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002660:	4313      	orrs	r3, r2
 8002662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002666:	e001      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002668:	7cfb      	ldrb	r3, [r7, #19]
 800266a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d041      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800267c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002680:	d02a      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002682:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002686:	d824      	bhi.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002688:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800268c:	d008      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800268e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002692:	d81e      	bhi.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00a      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800269c:	d010      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800269e:	e018      	b.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026a0:	4b62      	ldr	r3, [pc, #392]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4a61      	ldr	r2, [pc, #388]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026ac:	e015      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3304      	adds	r3, #4
 80026b2:	2100      	movs	r1, #0
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 fa83 	bl	8002bc0 <RCCEx_PLLSAI1_Config>
 80026ba:	4603      	mov	r3, r0
 80026bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026be:	e00c      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3320      	adds	r3, #32
 80026c4:	2100      	movs	r1, #0
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 fb6e 	bl	8002da8 <RCCEx_PLLSAI2_Config>
 80026cc:	4603      	mov	r3, r0
 80026ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026d0:	e003      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	74fb      	strb	r3, [r7, #19]
      break;
 80026d6:	e000      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80026d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026da:	7cfb      	ldrb	r3, [r7, #19]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10b      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026e0:	4b52      	ldr	r3, [pc, #328]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026ee:	494f      	ldr	r1, [pc, #316]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026f6:	e001      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026f8:	7cfb      	ldrb	r3, [r7, #19]
 80026fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	f000 80a0 	beq.w	800284a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800270a:	2300      	movs	r3, #0
 800270c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800270e:	4b47      	ldr	r3, [pc, #284]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800271e:	2300      	movs	r3, #0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00d      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002724:	4b41      	ldr	r3, [pc, #260]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002728:	4a40      	ldr	r2, [pc, #256]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800272a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272e:	6593      	str	r3, [r2, #88]	; 0x58
 8002730:	4b3e      	ldr	r3, [pc, #248]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800273c:	2301      	movs	r3, #1
 800273e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002740:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a3a      	ldr	r2, [pc, #232]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800274a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800274c:	f7fe fb20 	bl	8000d90 <HAL_GetTick>
 8002750:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002752:	e009      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002754:	f7fe fb1c 	bl	8000d90 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d902      	bls.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	74fb      	strb	r3, [r7, #19]
        break;
 8002766:	e005      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002768:	4b31      	ldr	r3, [pc, #196]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0ef      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002774:	7cfb      	ldrb	r3, [r7, #19]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d15c      	bne.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800277a:	4b2c      	ldr	r3, [pc, #176]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002780:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002784:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d01f      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	429a      	cmp	r2, r3
 8002796:	d019      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002798:	4b24      	ldr	r3, [pc, #144]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027a4:	4b21      	ldr	r3, [pc, #132]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027aa:	4a20      	ldr	r2, [pc, #128]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027b4:	4b1d      	ldr	r3, [pc, #116]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ba:	4a1c      	ldr	r2, [pc, #112]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027c4:	4a19      	ldr	r2, [pc, #100]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d016      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7fe fadb 	bl	8000d90 <HAL_GetTick>
 80027da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027dc:	e00b      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027de:	f7fe fad7 	bl	8000d90 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d902      	bls.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	74fb      	strb	r3, [r7, #19]
            break;
 80027f4:	e006      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027f6:	4b0d      	ldr	r3, [pc, #52]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0ec      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002804:	7cfb      	ldrb	r3, [r7, #19]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10c      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800280a:	4b08      	ldr	r3, [pc, #32]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002810:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800281a:	4904      	ldr	r1, [pc, #16]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002822:	e009      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002824:	7cfb      	ldrb	r3, [r7, #19]
 8002826:	74bb      	strb	r3, [r7, #18]
 8002828:	e006      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800282a:	bf00      	nop
 800282c:	40021000 	.word	0x40021000
 8002830:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002834:	7cfb      	ldrb	r3, [r7, #19]
 8002836:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002838:	7c7b      	ldrb	r3, [r7, #17]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d105      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800283e:	4b9e      	ldr	r3, [pc, #632]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002842:	4a9d      	ldr	r2, [pc, #628]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002844:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002848:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00a      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002856:	4b98      	ldr	r3, [pc, #608]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285c:	f023 0203 	bic.w	r2, r3, #3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002864:	4994      	ldr	r1, [pc, #592]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00a      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002878:	4b8f      	ldr	r3, [pc, #572]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287e:	f023 020c 	bic.w	r2, r3, #12
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002886:	498c      	ldr	r1, [pc, #560]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800289a:	4b87      	ldr	r3, [pc, #540]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	4983      	ldr	r1, [pc, #524]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028bc:	4b7e      	ldr	r3, [pc, #504]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	497b      	ldr	r1, [pc, #492]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0310 	and.w	r3, r3, #16
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028de:	4b76      	ldr	r3, [pc, #472]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ec:	4972      	ldr	r1, [pc, #456]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0320 	and.w	r3, r3, #32
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00a      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002900:	4b6d      	ldr	r3, [pc, #436]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002906:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290e:	496a      	ldr	r1, [pc, #424]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002922:	4b65      	ldr	r3, [pc, #404]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002928:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002930:	4961      	ldr	r1, [pc, #388]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00a      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002944:	4b5c      	ldr	r3, [pc, #368]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002952:	4959      	ldr	r1, [pc, #356]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002966:	4b54      	ldr	r3, [pc, #336]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002974:	4950      	ldr	r1, [pc, #320]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002976:	4313      	orrs	r3, r2
 8002978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002988:	4b4b      	ldr	r3, [pc, #300]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002996:	4948      	ldr	r1, [pc, #288]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029aa:	4b43      	ldr	r3, [pc, #268]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b8:	493f      	ldr	r1, [pc, #252]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d028      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029cc:	4b3a      	ldr	r3, [pc, #232]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029da:	4937      	ldr	r1, [pc, #220]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029ea:	d106      	bne.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029ec:	4b32      	ldr	r3, [pc, #200]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	4a31      	ldr	r2, [pc, #196]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029f6:	60d3      	str	r3, [r2, #12]
 80029f8:	e011      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a02:	d10c      	bne.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3304      	adds	r3, #4
 8002a08:	2101      	movs	r1, #1
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 f8d8 	bl	8002bc0 <RCCEx_PLLSAI1_Config>
 8002a10:	4603      	mov	r3, r0
 8002a12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a14:	7cfb      	ldrb	r3, [r7, #19]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002a1a:	7cfb      	ldrb	r3, [r7, #19]
 8002a1c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d028      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a2a:	4b23      	ldr	r3, [pc, #140]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a38:	491f      	ldr	r1, [pc, #124]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a48:	d106      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a4a:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	4a1a      	ldr	r2, [pc, #104]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a54:	60d3      	str	r3, [r2, #12]
 8002a56:	e011      	b.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a60:	d10c      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	3304      	adds	r3, #4
 8002a66:	2101      	movs	r1, #1
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 f8a9 	bl	8002bc0 <RCCEx_PLLSAI1_Config>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a72:	7cfb      	ldrb	r3, [r7, #19]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a78:	7cfb      	ldrb	r3, [r7, #19]
 8002a7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d02b      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a88:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a96:	4908      	ldr	r1, [pc, #32]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aa6:	d109      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aa8:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4a02      	ldr	r2, [pc, #8]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ab2:	60d3      	str	r3, [r2, #12]
 8002ab4:	e014      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002ab6:	bf00      	nop
 8002ab8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ac0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	2101      	movs	r1, #1
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 f877 	bl	8002bc0 <RCCEx_PLLSAI1_Config>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ad6:	7cfb      	ldrb	r3, [r7, #19]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002adc:	7cfb      	ldrb	r3, [r7, #19]
 8002ade:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d02f      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002aec:	4b2b      	ldr	r3, [pc, #172]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002afa:	4928      	ldr	r1, [pc, #160]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b0a:	d10d      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	3304      	adds	r3, #4
 8002b10:	2102      	movs	r1, #2
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 f854 	bl	8002bc0 <RCCEx_PLLSAI1_Config>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b1c:	7cfb      	ldrb	r3, [r7, #19]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d014      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b22:	7cfb      	ldrb	r3, [r7, #19]
 8002b24:	74bb      	strb	r3, [r7, #18]
 8002b26:	e011      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b30:	d10c      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3320      	adds	r3, #32
 8002b36:	2102      	movs	r1, #2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 f935 	bl	8002da8 <RCCEx_PLLSAI2_Config>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b42:	7cfb      	ldrb	r3, [r7, #19]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b48:	7cfb      	ldrb	r3, [r7, #19]
 8002b4a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00a      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b58:	4b10      	ldr	r3, [pc, #64]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b66:	490d      	ldr	r1, [pc, #52]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00b      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b7a:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b8a:	4904      	ldr	r1, [pc, #16]	; (8002b9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b92:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40021000 	.word	0x40021000

08002ba0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a04      	ldr	r2, [pc, #16]	; (8002bbc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002baa:	f043 0304 	orr.w	r3, r3, #4
 8002bae:	6013      	str	r3, [r2, #0]
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40021000 	.word	0x40021000

08002bc0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bce:	4b75      	ldr	r3, [pc, #468]	; (8002da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d018      	beq.n	8002c0c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bda:	4b72      	ldr	r3, [pc, #456]	; (8002da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	f003 0203 	and.w	r2, r3, #3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d10d      	bne.n	8002c06 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
       ||
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d009      	beq.n	8002c06 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bf2:	4b6c      	ldr	r3, [pc, #432]	; (8002da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	091b      	lsrs	r3, r3, #4
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
       ||
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d047      	beq.n	8002c96 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	73fb      	strb	r3, [r7, #15]
 8002c0a:	e044      	b.n	8002c96 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d018      	beq.n	8002c46 <RCCEx_PLLSAI1_Config+0x86>
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d825      	bhi.n	8002c64 <RCCEx_PLLSAI1_Config+0xa4>
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d002      	beq.n	8002c22 <RCCEx_PLLSAI1_Config+0x62>
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d009      	beq.n	8002c34 <RCCEx_PLLSAI1_Config+0x74>
 8002c20:	e020      	b.n	8002c64 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c22:	4b60      	ldr	r3, [pc, #384]	; (8002da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d11d      	bne.n	8002c6a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c32:	e01a      	b.n	8002c6a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c34:	4b5b      	ldr	r3, [pc, #364]	; (8002da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d116      	bne.n	8002c6e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c44:	e013      	b.n	8002c6e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c46:	4b57      	ldr	r3, [pc, #348]	; (8002da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10f      	bne.n	8002c72 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c52:	4b54      	ldr	r3, [pc, #336]	; (8002da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d109      	bne.n	8002c72 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c62:	e006      	b.n	8002c72 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	73fb      	strb	r3, [r7, #15]
      break;
 8002c68:	e004      	b.n	8002c74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c6a:	bf00      	nop
 8002c6c:	e002      	b.n	8002c74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c6e:	bf00      	nop
 8002c70:	e000      	b.n	8002c74 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c72:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10d      	bne.n	8002c96 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c7a:	4b4a      	ldr	r3, [pc, #296]	; (8002da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6819      	ldr	r1, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	011b      	lsls	r3, r3, #4
 8002c8e:	430b      	orrs	r3, r1
 8002c90:	4944      	ldr	r1, [pc, #272]	; (8002da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c96:	7bfb      	ldrb	r3, [r7, #15]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d17d      	bne.n	8002d98 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c9c:	4b41      	ldr	r3, [pc, #260]	; (8002da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a40      	ldr	r2, [pc, #256]	; (8002da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ca6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ca8:	f7fe f872 	bl	8000d90 <HAL_GetTick>
 8002cac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cae:	e009      	b.n	8002cc4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cb0:	f7fe f86e 	bl	8000d90 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d902      	bls.n	8002cc4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	73fb      	strb	r3, [r7, #15]
        break;
 8002cc2:	e005      	b.n	8002cd0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cc4:	4b37      	ldr	r3, [pc, #220]	; (8002da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1ef      	bne.n	8002cb0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d160      	bne.n	8002d98 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d111      	bne.n	8002d00 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cdc:	4b31      	ldr	r3, [pc, #196]	; (8002da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ce4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6892      	ldr	r2, [r2, #8]
 8002cec:	0211      	lsls	r1, r2, #8
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	68d2      	ldr	r2, [r2, #12]
 8002cf2:	0912      	lsrs	r2, r2, #4
 8002cf4:	0452      	lsls	r2, r2, #17
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	492a      	ldr	r1, [pc, #168]	; (8002da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	610b      	str	r3, [r1, #16]
 8002cfe:	e027      	b.n	8002d50 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d112      	bne.n	8002d2c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d06:	4b27      	ldr	r3, [pc, #156]	; (8002da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6892      	ldr	r2, [r2, #8]
 8002d16:	0211      	lsls	r1, r2, #8
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6912      	ldr	r2, [r2, #16]
 8002d1c:	0852      	lsrs	r2, r2, #1
 8002d1e:	3a01      	subs	r2, #1
 8002d20:	0552      	lsls	r2, r2, #21
 8002d22:	430a      	orrs	r2, r1
 8002d24:	491f      	ldr	r1, [pc, #124]	; (8002da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	610b      	str	r3, [r1, #16]
 8002d2a:	e011      	b.n	8002d50 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d2c:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6892      	ldr	r2, [r2, #8]
 8002d3c:	0211      	lsls	r1, r2, #8
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6952      	ldr	r2, [r2, #20]
 8002d42:	0852      	lsrs	r2, r2, #1
 8002d44:	3a01      	subs	r2, #1
 8002d46:	0652      	lsls	r2, r2, #25
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	4916      	ldr	r1, [pc, #88]	; (8002da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d50:	4b14      	ldr	r3, [pc, #80]	; (8002da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a13      	ldr	r2, [pc, #76]	; (8002da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d56:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d5c:	f7fe f818 	bl	8000d90 <HAL_GetTick>
 8002d60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d62:	e009      	b.n	8002d78 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d64:	f7fe f814 	bl	8000d90 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d902      	bls.n	8002d78 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	73fb      	strb	r3, [r7, #15]
          break;
 8002d76:	e005      	b.n	8002d84 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d78:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0ef      	beq.n	8002d64 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d106      	bne.n	8002d98 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d8a:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	4904      	ldr	r1, [pc, #16]	; (8002da4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000

08002da8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002db2:	2300      	movs	r3, #0
 8002db4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002db6:	4b6a      	ldr	r3, [pc, #424]	; (8002f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d018      	beq.n	8002df4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002dc2:	4b67      	ldr	r3, [pc, #412]	; (8002f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f003 0203 	and.w	r2, r3, #3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d10d      	bne.n	8002dee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
       ||
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d009      	beq.n	8002dee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002dda:	4b61      	ldr	r3, [pc, #388]	; (8002f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	091b      	lsrs	r3, r3, #4
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
       ||
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d047      	beq.n	8002e7e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	73fb      	strb	r3, [r7, #15]
 8002df2:	e044      	b.n	8002e7e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d018      	beq.n	8002e2e <RCCEx_PLLSAI2_Config+0x86>
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	d825      	bhi.n	8002e4c <RCCEx_PLLSAI2_Config+0xa4>
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d002      	beq.n	8002e0a <RCCEx_PLLSAI2_Config+0x62>
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d009      	beq.n	8002e1c <RCCEx_PLLSAI2_Config+0x74>
 8002e08:	e020      	b.n	8002e4c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e0a:	4b55      	ldr	r3, [pc, #340]	; (8002f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d11d      	bne.n	8002e52 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e1a:	e01a      	b.n	8002e52 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e1c:	4b50      	ldr	r3, [pc, #320]	; (8002f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d116      	bne.n	8002e56 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e2c:	e013      	b.n	8002e56 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e2e:	4b4c      	ldr	r3, [pc, #304]	; (8002f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10f      	bne.n	8002e5a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e3a:	4b49      	ldr	r3, [pc, #292]	; (8002f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d109      	bne.n	8002e5a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e4a:	e006      	b.n	8002e5a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e50:	e004      	b.n	8002e5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e52:	bf00      	nop
 8002e54:	e002      	b.n	8002e5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e56:	bf00      	nop
 8002e58:	e000      	b.n	8002e5c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10d      	bne.n	8002e7e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e62:	4b3f      	ldr	r3, [pc, #252]	; (8002f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6819      	ldr	r1, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	430b      	orrs	r3, r1
 8002e78:	4939      	ldr	r1, [pc, #228]	; (8002f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d167      	bne.n	8002f54 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e84:	4b36      	ldr	r3, [pc, #216]	; (8002f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a35      	ldr	r2, [pc, #212]	; (8002f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e90:	f7fd ff7e 	bl	8000d90 <HAL_GetTick>
 8002e94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e96:	e009      	b.n	8002eac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e98:	f7fd ff7a 	bl	8000d90 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d902      	bls.n	8002eac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	73fb      	strb	r3, [r7, #15]
        break;
 8002eaa:	e005      	b.n	8002eb8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002eac:	4b2c      	ldr	r3, [pc, #176]	; (8002f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1ef      	bne.n	8002e98 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d14a      	bne.n	8002f54 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d111      	bne.n	8002ee8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ec4:	4b26      	ldr	r3, [pc, #152]	; (8002f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6892      	ldr	r2, [r2, #8]
 8002ed4:	0211      	lsls	r1, r2, #8
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68d2      	ldr	r2, [r2, #12]
 8002eda:	0912      	lsrs	r2, r2, #4
 8002edc:	0452      	lsls	r2, r2, #17
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	491f      	ldr	r1, [pc, #124]	; (8002f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	614b      	str	r3, [r1, #20]
 8002ee6:	e011      	b.n	8002f0c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ee8:	4b1d      	ldr	r3, [pc, #116]	; (8002f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ef0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6892      	ldr	r2, [r2, #8]
 8002ef8:	0211      	lsls	r1, r2, #8
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6912      	ldr	r2, [r2, #16]
 8002efe:	0852      	lsrs	r2, r2, #1
 8002f00:	3a01      	subs	r2, #1
 8002f02:	0652      	lsls	r2, r2, #25
 8002f04:	430a      	orrs	r2, r1
 8002f06:	4916      	ldr	r1, [pc, #88]	; (8002f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f0c:	4b14      	ldr	r3, [pc, #80]	; (8002f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a13      	ldr	r2, [pc, #76]	; (8002f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f18:	f7fd ff3a 	bl	8000d90 <HAL_GetTick>
 8002f1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f1e:	e009      	b.n	8002f34 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f20:	f7fd ff36 	bl	8000d90 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d902      	bls.n	8002f34 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	73fb      	strb	r3, [r7, #15]
          break;
 8002f32:	e005      	b.n	8002f40 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f34:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0ef      	beq.n	8002f20 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d106      	bne.n	8002f54 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f46:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f48:	695a      	ldr	r2, [r3, #20]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	4904      	ldr	r1, [pc, #16]	; (8002f60 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40021000 	.word	0x40021000

08002f64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e040      	b.n	8002ff8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f7fd fd6a 	bl	8000a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2224      	movs	r2, #36	; 0x24
 8002f90:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0201 	bic.w	r2, r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f936 	bl	8003214 <UART_SetConfig>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e022      	b.n	8002ff8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 fbe2 	bl	8003784 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f000 fc69 	bl	80038c8 <UART_CheckIdleState>
 8002ff6:	4603      	mov	r3, r0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b08a      	sub	sp, #40	; 0x28
 8003004:	af02      	add	r7, sp, #8
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	4613      	mov	r3, r2
 800300e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003014:	2b20      	cmp	r3, #32
 8003016:	f040 8082 	bne.w	800311e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <HAL_UART_Transmit+0x26>
 8003020:	88fb      	ldrh	r3, [r7, #6]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e07a      	b.n	8003120 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_UART_Transmit+0x38>
 8003034:	2302      	movs	r3, #2
 8003036:	e073      	b.n	8003120 <HAL_UART_Transmit+0x120>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2221      	movs	r2, #33	; 0x21
 800304c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800304e:	f7fd fe9f 	bl	8000d90 <HAL_GetTick>
 8003052:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	88fa      	ldrh	r2, [r7, #6]
 8003058:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	88fa      	ldrh	r2, [r7, #6]
 8003060:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800306c:	d108      	bne.n	8003080 <HAL_UART_Transmit+0x80>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d104      	bne.n	8003080 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003076:	2300      	movs	r3, #0
 8003078:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	e003      	b.n	8003088 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003084:	2300      	movs	r3, #0
 8003086:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003090:	e02d      	b.n	80030ee <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	9300      	str	r3, [sp, #0]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2200      	movs	r2, #0
 800309a:	2180      	movs	r1, #128	; 0x80
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 fc5c 	bl	800395a <UART_WaitOnFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	e039      	b.n	8003120 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10b      	bne.n	80030ca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	881a      	ldrh	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030be:	b292      	uxth	r2, r2
 80030c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	3302      	adds	r3, #2
 80030c6:	61bb      	str	r3, [r7, #24]
 80030c8:	e008      	b.n	80030dc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	781a      	ldrb	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	b292      	uxth	r2, r2
 80030d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	3301      	adds	r3, #1
 80030da:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1cb      	bne.n	8003092 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	2200      	movs	r2, #0
 8003102:	2140      	movs	r1, #64	; 0x40
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 fc28 	bl	800395a <UART_WaitOnFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e005      	b.n	8003120 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2220      	movs	r2, #32
 8003118:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800311a:	2300      	movs	r3, #0
 800311c:	e000      	b.n	8003120 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800311e:	2302      	movs	r3, #2
  }
}
 8003120:	4618      	mov	r0, r3
 8003122:	3720      	adds	r7, #32
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b08a      	sub	sp, #40	; 0x28
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	4613      	mov	r3, r2
 8003134:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800313a:	2b20      	cmp	r3, #32
 800313c:	d142      	bne.n	80031c4 <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <HAL_UART_Receive_DMA+0x22>
 8003144:	88fb      	ldrh	r3, [r7, #6]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e03b      	b.n	80031c6 <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_UART_Receive_DMA+0x34>
 8003158:	2302      	movs	r3, #2
 800315a:	e034      	b.n	80031c6 <HAL_UART_Receive_DMA+0x9e>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a18      	ldr	r2, [pc, #96]	; (80031d0 <HAL_UART_Receive_DMA+0xa8>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d01f      	beq.n	80031b4 <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d018      	beq.n	80031b4 <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	e853 3f00 	ldrex	r3, [r3]
 800318e:	613b      	str	r3, [r7, #16]
   return(result);
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	461a      	mov	r2, r3
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	623b      	str	r3, [r7, #32]
 80031a2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a4:	69f9      	ldr	r1, [r7, #28]
 80031a6:	6a3a      	ldr	r2, [r7, #32]
 80031a8:	e841 2300 	strex	r3, r2, [r1]
 80031ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1e6      	bne.n	8003182 <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80031b4:	88fb      	ldrh	r3, [r7, #6]
 80031b6:	461a      	mov	r2, r3
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 fc92 	bl	8003ae4 <UART_Start_Receive_DMA>
 80031c0:	4603      	mov	r3, r0
 80031c2:	e000      	b.n	80031c6 <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80031c4:	2302      	movs	r3, #2
  }
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3728      	adds	r7, #40	; 0x28
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	40008000 	.word	0x40008000

080031d4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003218:	b08a      	sub	sp, #40	; 0x28
 800321a:	af00      	add	r7, sp, #0
 800321c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800321e:	2300      	movs	r3, #0
 8003220:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	431a      	orrs	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	431a      	orrs	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	4313      	orrs	r3, r2
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	4ba4      	ldr	r3, [pc, #656]	; (80034d4 <UART_SetConfig+0x2c0>)
 8003244:	4013      	ands	r3, r2
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	6812      	ldr	r2, [r2, #0]
 800324a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800324c:	430b      	orrs	r3, r1
 800324e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a99      	ldr	r2, [pc, #612]	; (80034d8 <UART_SetConfig+0x2c4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d004      	beq.n	8003280 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800327c:	4313      	orrs	r3, r2
 800327e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003290:	430a      	orrs	r2, r1
 8003292:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a90      	ldr	r2, [pc, #576]	; (80034dc <UART_SetConfig+0x2c8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d126      	bne.n	80032ec <UART_SetConfig+0xd8>
 800329e:	4b90      	ldr	r3, [pc, #576]	; (80034e0 <UART_SetConfig+0x2cc>)
 80032a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d81b      	bhi.n	80032e4 <UART_SetConfig+0xd0>
 80032ac:	a201      	add	r2, pc, #4	; (adr r2, 80032b4 <UART_SetConfig+0xa0>)
 80032ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b2:	bf00      	nop
 80032b4:	080032c5 	.word	0x080032c5
 80032b8:	080032d5 	.word	0x080032d5
 80032bc:	080032cd 	.word	0x080032cd
 80032c0:	080032dd 	.word	0x080032dd
 80032c4:	2301      	movs	r3, #1
 80032c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ca:	e116      	b.n	80034fa <UART_SetConfig+0x2e6>
 80032cc:	2302      	movs	r3, #2
 80032ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032d2:	e112      	b.n	80034fa <UART_SetConfig+0x2e6>
 80032d4:	2304      	movs	r3, #4
 80032d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032da:	e10e      	b.n	80034fa <UART_SetConfig+0x2e6>
 80032dc:	2308      	movs	r3, #8
 80032de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032e2:	e10a      	b.n	80034fa <UART_SetConfig+0x2e6>
 80032e4:	2310      	movs	r3, #16
 80032e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ea:	e106      	b.n	80034fa <UART_SetConfig+0x2e6>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a7c      	ldr	r2, [pc, #496]	; (80034e4 <UART_SetConfig+0x2d0>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d138      	bne.n	8003368 <UART_SetConfig+0x154>
 80032f6:	4b7a      	ldr	r3, [pc, #488]	; (80034e0 <UART_SetConfig+0x2cc>)
 80032f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fc:	f003 030c 	and.w	r3, r3, #12
 8003300:	2b0c      	cmp	r3, #12
 8003302:	d82d      	bhi.n	8003360 <UART_SetConfig+0x14c>
 8003304:	a201      	add	r2, pc, #4	; (adr r2, 800330c <UART_SetConfig+0xf8>)
 8003306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330a:	bf00      	nop
 800330c:	08003341 	.word	0x08003341
 8003310:	08003361 	.word	0x08003361
 8003314:	08003361 	.word	0x08003361
 8003318:	08003361 	.word	0x08003361
 800331c:	08003351 	.word	0x08003351
 8003320:	08003361 	.word	0x08003361
 8003324:	08003361 	.word	0x08003361
 8003328:	08003361 	.word	0x08003361
 800332c:	08003349 	.word	0x08003349
 8003330:	08003361 	.word	0x08003361
 8003334:	08003361 	.word	0x08003361
 8003338:	08003361 	.word	0x08003361
 800333c:	08003359 	.word	0x08003359
 8003340:	2300      	movs	r3, #0
 8003342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003346:	e0d8      	b.n	80034fa <UART_SetConfig+0x2e6>
 8003348:	2302      	movs	r3, #2
 800334a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800334e:	e0d4      	b.n	80034fa <UART_SetConfig+0x2e6>
 8003350:	2304      	movs	r3, #4
 8003352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003356:	e0d0      	b.n	80034fa <UART_SetConfig+0x2e6>
 8003358:	2308      	movs	r3, #8
 800335a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800335e:	e0cc      	b.n	80034fa <UART_SetConfig+0x2e6>
 8003360:	2310      	movs	r3, #16
 8003362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003366:	e0c8      	b.n	80034fa <UART_SetConfig+0x2e6>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a5e      	ldr	r2, [pc, #376]	; (80034e8 <UART_SetConfig+0x2d4>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d125      	bne.n	80033be <UART_SetConfig+0x1aa>
 8003372:	4b5b      	ldr	r3, [pc, #364]	; (80034e0 <UART_SetConfig+0x2cc>)
 8003374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003378:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800337c:	2b30      	cmp	r3, #48	; 0x30
 800337e:	d016      	beq.n	80033ae <UART_SetConfig+0x19a>
 8003380:	2b30      	cmp	r3, #48	; 0x30
 8003382:	d818      	bhi.n	80033b6 <UART_SetConfig+0x1a2>
 8003384:	2b20      	cmp	r3, #32
 8003386:	d00a      	beq.n	800339e <UART_SetConfig+0x18a>
 8003388:	2b20      	cmp	r3, #32
 800338a:	d814      	bhi.n	80033b6 <UART_SetConfig+0x1a2>
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <UART_SetConfig+0x182>
 8003390:	2b10      	cmp	r3, #16
 8003392:	d008      	beq.n	80033a6 <UART_SetConfig+0x192>
 8003394:	e00f      	b.n	80033b6 <UART_SetConfig+0x1a2>
 8003396:	2300      	movs	r3, #0
 8003398:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800339c:	e0ad      	b.n	80034fa <UART_SetConfig+0x2e6>
 800339e:	2302      	movs	r3, #2
 80033a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033a4:	e0a9      	b.n	80034fa <UART_SetConfig+0x2e6>
 80033a6:	2304      	movs	r3, #4
 80033a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033ac:	e0a5      	b.n	80034fa <UART_SetConfig+0x2e6>
 80033ae:	2308      	movs	r3, #8
 80033b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033b4:	e0a1      	b.n	80034fa <UART_SetConfig+0x2e6>
 80033b6:	2310      	movs	r3, #16
 80033b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033bc:	e09d      	b.n	80034fa <UART_SetConfig+0x2e6>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a4a      	ldr	r2, [pc, #296]	; (80034ec <UART_SetConfig+0x2d8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d125      	bne.n	8003414 <UART_SetConfig+0x200>
 80033c8:	4b45      	ldr	r3, [pc, #276]	; (80034e0 <UART_SetConfig+0x2cc>)
 80033ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80033d2:	2bc0      	cmp	r3, #192	; 0xc0
 80033d4:	d016      	beq.n	8003404 <UART_SetConfig+0x1f0>
 80033d6:	2bc0      	cmp	r3, #192	; 0xc0
 80033d8:	d818      	bhi.n	800340c <UART_SetConfig+0x1f8>
 80033da:	2b80      	cmp	r3, #128	; 0x80
 80033dc:	d00a      	beq.n	80033f4 <UART_SetConfig+0x1e0>
 80033de:	2b80      	cmp	r3, #128	; 0x80
 80033e0:	d814      	bhi.n	800340c <UART_SetConfig+0x1f8>
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <UART_SetConfig+0x1d8>
 80033e6:	2b40      	cmp	r3, #64	; 0x40
 80033e8:	d008      	beq.n	80033fc <UART_SetConfig+0x1e8>
 80033ea:	e00f      	b.n	800340c <UART_SetConfig+0x1f8>
 80033ec:	2300      	movs	r3, #0
 80033ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033f2:	e082      	b.n	80034fa <UART_SetConfig+0x2e6>
 80033f4:	2302      	movs	r3, #2
 80033f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80033fa:	e07e      	b.n	80034fa <UART_SetConfig+0x2e6>
 80033fc:	2304      	movs	r3, #4
 80033fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003402:	e07a      	b.n	80034fa <UART_SetConfig+0x2e6>
 8003404:	2308      	movs	r3, #8
 8003406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800340a:	e076      	b.n	80034fa <UART_SetConfig+0x2e6>
 800340c:	2310      	movs	r3, #16
 800340e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003412:	e072      	b.n	80034fa <UART_SetConfig+0x2e6>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a35      	ldr	r2, [pc, #212]	; (80034f0 <UART_SetConfig+0x2dc>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d12a      	bne.n	8003474 <UART_SetConfig+0x260>
 800341e:	4b30      	ldr	r3, [pc, #192]	; (80034e0 <UART_SetConfig+0x2cc>)
 8003420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003424:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003428:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800342c:	d01a      	beq.n	8003464 <UART_SetConfig+0x250>
 800342e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003432:	d81b      	bhi.n	800346c <UART_SetConfig+0x258>
 8003434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003438:	d00c      	beq.n	8003454 <UART_SetConfig+0x240>
 800343a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800343e:	d815      	bhi.n	800346c <UART_SetConfig+0x258>
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <UART_SetConfig+0x238>
 8003444:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003448:	d008      	beq.n	800345c <UART_SetConfig+0x248>
 800344a:	e00f      	b.n	800346c <UART_SetConfig+0x258>
 800344c:	2300      	movs	r3, #0
 800344e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003452:	e052      	b.n	80034fa <UART_SetConfig+0x2e6>
 8003454:	2302      	movs	r3, #2
 8003456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800345a:	e04e      	b.n	80034fa <UART_SetConfig+0x2e6>
 800345c:	2304      	movs	r3, #4
 800345e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003462:	e04a      	b.n	80034fa <UART_SetConfig+0x2e6>
 8003464:	2308      	movs	r3, #8
 8003466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800346a:	e046      	b.n	80034fa <UART_SetConfig+0x2e6>
 800346c:	2310      	movs	r3, #16
 800346e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003472:	e042      	b.n	80034fa <UART_SetConfig+0x2e6>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a17      	ldr	r2, [pc, #92]	; (80034d8 <UART_SetConfig+0x2c4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d13a      	bne.n	80034f4 <UART_SetConfig+0x2e0>
 800347e:	4b18      	ldr	r3, [pc, #96]	; (80034e0 <UART_SetConfig+0x2cc>)
 8003480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003484:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003488:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800348c:	d01a      	beq.n	80034c4 <UART_SetConfig+0x2b0>
 800348e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003492:	d81b      	bhi.n	80034cc <UART_SetConfig+0x2b8>
 8003494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003498:	d00c      	beq.n	80034b4 <UART_SetConfig+0x2a0>
 800349a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800349e:	d815      	bhi.n	80034cc <UART_SetConfig+0x2b8>
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <UART_SetConfig+0x298>
 80034a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a8:	d008      	beq.n	80034bc <UART_SetConfig+0x2a8>
 80034aa:	e00f      	b.n	80034cc <UART_SetConfig+0x2b8>
 80034ac:	2300      	movs	r3, #0
 80034ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034b2:	e022      	b.n	80034fa <UART_SetConfig+0x2e6>
 80034b4:	2302      	movs	r3, #2
 80034b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ba:	e01e      	b.n	80034fa <UART_SetConfig+0x2e6>
 80034bc:	2304      	movs	r3, #4
 80034be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034c2:	e01a      	b.n	80034fa <UART_SetConfig+0x2e6>
 80034c4:	2308      	movs	r3, #8
 80034c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ca:	e016      	b.n	80034fa <UART_SetConfig+0x2e6>
 80034cc:	2310      	movs	r3, #16
 80034ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034d2:	e012      	b.n	80034fa <UART_SetConfig+0x2e6>
 80034d4:	efff69f3 	.word	0xefff69f3
 80034d8:	40008000 	.word	0x40008000
 80034dc:	40013800 	.word	0x40013800
 80034e0:	40021000 	.word	0x40021000
 80034e4:	40004400 	.word	0x40004400
 80034e8:	40004800 	.word	0x40004800
 80034ec:	40004c00 	.word	0x40004c00
 80034f0:	40005000 	.word	0x40005000
 80034f4:	2310      	movs	r3, #16
 80034f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a9f      	ldr	r2, [pc, #636]	; (800377c <UART_SetConfig+0x568>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d17a      	bne.n	80035fa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003504:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003508:	2b08      	cmp	r3, #8
 800350a:	d824      	bhi.n	8003556 <UART_SetConfig+0x342>
 800350c:	a201      	add	r2, pc, #4	; (adr r2, 8003514 <UART_SetConfig+0x300>)
 800350e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003512:	bf00      	nop
 8003514:	08003539 	.word	0x08003539
 8003518:	08003557 	.word	0x08003557
 800351c:	08003541 	.word	0x08003541
 8003520:	08003557 	.word	0x08003557
 8003524:	08003547 	.word	0x08003547
 8003528:	08003557 	.word	0x08003557
 800352c:	08003557 	.word	0x08003557
 8003530:	08003557 	.word	0x08003557
 8003534:	0800354f 	.word	0x0800354f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003538:	f7fe ffbc 	bl	80024b4 <HAL_RCC_GetPCLK1Freq>
 800353c:	61f8      	str	r0, [r7, #28]
        break;
 800353e:	e010      	b.n	8003562 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003540:	4b8f      	ldr	r3, [pc, #572]	; (8003780 <UART_SetConfig+0x56c>)
 8003542:	61fb      	str	r3, [r7, #28]
        break;
 8003544:	e00d      	b.n	8003562 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003546:	f7fe ff1d 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 800354a:	61f8      	str	r0, [r7, #28]
        break;
 800354c:	e009      	b.n	8003562 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800354e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003552:	61fb      	str	r3, [r7, #28]
        break;
 8003554:	e005      	b.n	8003562 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003556:	2300      	movs	r3, #0
 8003558:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003560:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 80fb 	beq.w	8003760 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	4413      	add	r3, r2
 8003574:	69fa      	ldr	r2, [r7, #28]
 8003576:	429a      	cmp	r2, r3
 8003578:	d305      	bcc.n	8003586 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003580:	69fa      	ldr	r2, [r7, #28]
 8003582:	429a      	cmp	r2, r3
 8003584:	d903      	bls.n	800358e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800358c:	e0e8      	b.n	8003760 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	2200      	movs	r2, #0
 8003592:	461c      	mov	r4, r3
 8003594:	4615      	mov	r5, r2
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	f04f 0300 	mov.w	r3, #0
 800359e:	022b      	lsls	r3, r5, #8
 80035a0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80035a4:	0222      	lsls	r2, r4, #8
 80035a6:	68f9      	ldr	r1, [r7, #12]
 80035a8:	6849      	ldr	r1, [r1, #4]
 80035aa:	0849      	lsrs	r1, r1, #1
 80035ac:	2000      	movs	r0, #0
 80035ae:	4688      	mov	r8, r1
 80035b0:	4681      	mov	r9, r0
 80035b2:	eb12 0a08 	adds.w	sl, r2, r8
 80035b6:	eb43 0b09 	adc.w	fp, r3, r9
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	607a      	str	r2, [r7, #4]
 80035c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035c8:	4650      	mov	r0, sl
 80035ca:	4659      	mov	r1, fp
 80035cc:	f7fc fe50 	bl	8000270 <__aeabi_uldivmod>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4613      	mov	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035de:	d308      	bcc.n	80035f2 <UART_SetConfig+0x3de>
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035e6:	d204      	bcs.n	80035f2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	60da      	str	r2, [r3, #12]
 80035f0:	e0b6      	b.n	8003760 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80035f8:	e0b2      	b.n	8003760 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003602:	d15e      	bne.n	80036c2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003604:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003608:	2b08      	cmp	r3, #8
 800360a:	d828      	bhi.n	800365e <UART_SetConfig+0x44a>
 800360c:	a201      	add	r2, pc, #4	; (adr r2, 8003614 <UART_SetConfig+0x400>)
 800360e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003612:	bf00      	nop
 8003614:	08003639 	.word	0x08003639
 8003618:	08003641 	.word	0x08003641
 800361c:	08003649 	.word	0x08003649
 8003620:	0800365f 	.word	0x0800365f
 8003624:	0800364f 	.word	0x0800364f
 8003628:	0800365f 	.word	0x0800365f
 800362c:	0800365f 	.word	0x0800365f
 8003630:	0800365f 	.word	0x0800365f
 8003634:	08003657 	.word	0x08003657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003638:	f7fe ff3c 	bl	80024b4 <HAL_RCC_GetPCLK1Freq>
 800363c:	61f8      	str	r0, [r7, #28]
        break;
 800363e:	e014      	b.n	800366a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003640:	f7fe ff4e 	bl	80024e0 <HAL_RCC_GetPCLK2Freq>
 8003644:	61f8      	str	r0, [r7, #28]
        break;
 8003646:	e010      	b.n	800366a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003648:	4b4d      	ldr	r3, [pc, #308]	; (8003780 <UART_SetConfig+0x56c>)
 800364a:	61fb      	str	r3, [r7, #28]
        break;
 800364c:	e00d      	b.n	800366a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800364e:	f7fe fe99 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 8003652:	61f8      	str	r0, [r7, #28]
        break;
 8003654:	e009      	b.n	800366a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800365a:	61fb      	str	r3, [r7, #28]
        break;
 800365c:	e005      	b.n	800366a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003668:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d077      	beq.n	8003760 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	005a      	lsls	r2, r3, #1
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	085b      	lsrs	r3, r3, #1
 800367a:	441a      	add	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	fbb2 f3f3 	udiv	r3, r2, r3
 8003684:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	2b0f      	cmp	r3, #15
 800368a:	d916      	bls.n	80036ba <UART_SetConfig+0x4a6>
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003692:	d212      	bcs.n	80036ba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	b29b      	uxth	r3, r3
 8003698:	f023 030f 	bic.w	r3, r3, #15
 800369c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	085b      	lsrs	r3, r3, #1
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	8afb      	ldrh	r3, [r7, #22]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	8afa      	ldrh	r2, [r7, #22]
 80036b6:	60da      	str	r2, [r3, #12]
 80036b8:	e052      	b.n	8003760 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80036c0:	e04e      	b.n	8003760 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80036c6:	2b08      	cmp	r3, #8
 80036c8:	d827      	bhi.n	800371a <UART_SetConfig+0x506>
 80036ca:	a201      	add	r2, pc, #4	; (adr r2, 80036d0 <UART_SetConfig+0x4bc>)
 80036cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d0:	080036f5 	.word	0x080036f5
 80036d4:	080036fd 	.word	0x080036fd
 80036d8:	08003705 	.word	0x08003705
 80036dc:	0800371b 	.word	0x0800371b
 80036e0:	0800370b 	.word	0x0800370b
 80036e4:	0800371b 	.word	0x0800371b
 80036e8:	0800371b 	.word	0x0800371b
 80036ec:	0800371b 	.word	0x0800371b
 80036f0:	08003713 	.word	0x08003713
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036f4:	f7fe fede 	bl	80024b4 <HAL_RCC_GetPCLK1Freq>
 80036f8:	61f8      	str	r0, [r7, #28]
        break;
 80036fa:	e014      	b.n	8003726 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036fc:	f7fe fef0 	bl	80024e0 <HAL_RCC_GetPCLK2Freq>
 8003700:	61f8      	str	r0, [r7, #28]
        break;
 8003702:	e010      	b.n	8003726 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003704:	4b1e      	ldr	r3, [pc, #120]	; (8003780 <UART_SetConfig+0x56c>)
 8003706:	61fb      	str	r3, [r7, #28]
        break;
 8003708:	e00d      	b.n	8003726 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800370a:	f7fe fe3b 	bl	8002384 <HAL_RCC_GetSysClockFreq>
 800370e:	61f8      	str	r0, [r7, #28]
        break;
 8003710:	e009      	b.n	8003726 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003712:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003716:	61fb      	str	r3, [r7, #28]
        break;
 8003718:	e005      	b.n	8003726 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003724:	bf00      	nop
    }

    if (pclk != 0U)
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d019      	beq.n	8003760 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	085a      	lsrs	r2, r3, #1
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	441a      	add	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	fbb2 f3f3 	udiv	r3, r2, r3
 800373e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	2b0f      	cmp	r3, #15
 8003744:	d909      	bls.n	800375a <UART_SetConfig+0x546>
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800374c:	d205      	bcs.n	800375a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	b29a      	uxth	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	60da      	str	r2, [r3, #12]
 8003758:	e002      	b.n	8003760 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2200      	movs	r2, #0
 800376a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800376c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003770:	4618      	mov	r0, r3
 8003772:	3728      	adds	r7, #40	; 0x28
 8003774:	46bd      	mov	sp, r7
 8003776:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800377a:	bf00      	nop
 800377c:	40008000 	.word	0x40008000
 8003780:	00f42400 	.word	0x00f42400

08003784 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00a      	beq.n	80037d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00a      	beq.n	80037f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00a      	beq.n	8003814 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	f003 0310 	and.w	r3, r3, #16
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003860:	2b00      	cmp	r3, #0
 8003862:	d01a      	beq.n	800389a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003882:	d10a      	bne.n	800389a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	605a      	str	r2, [r3, #4]
  }
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038d8:	f7fd fa5a 	bl	8000d90 <HAL_GetTick>
 80038dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d10e      	bne.n	800390a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038f0:	9300      	str	r3, [sp, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f82d 	bl	800395a <UART_WaitOnFlagUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e023      	b.n	8003952 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0304 	and.w	r3, r3, #4
 8003914:	2b04      	cmp	r3, #4
 8003916:	d10e      	bne.n	8003936 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003918:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f817 	bl	800395a <UART_WaitOnFlagUntilTimeout>
 800392c:	4603      	mov	r3, r0
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e00d      	b.n	8003952 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2220      	movs	r2, #32
 800393a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b09c      	sub	sp, #112	; 0x70
 800395e:	af00      	add	r7, sp, #0
 8003960:	60f8      	str	r0, [r7, #12]
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	603b      	str	r3, [r7, #0]
 8003966:	4613      	mov	r3, r2
 8003968:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800396a:	e0a5      	b.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800396c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800396e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003972:	f000 80a1 	beq.w	8003ab8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003976:	f7fd fa0b 	bl	8000d90 <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003982:	429a      	cmp	r2, r3
 8003984:	d302      	bcc.n	800398c <UART_WaitOnFlagUntilTimeout+0x32>
 8003986:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003988:	2b00      	cmp	r3, #0
 800398a:	d13e      	bne.n	8003a0a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003994:	e853 3f00 	ldrex	r3, [r3]
 8003998:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800399a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800399c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039a0:	667b      	str	r3, [r7, #100]	; 0x64
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80039ac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80039b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80039b2:	e841 2300 	strex	r3, r2, [r1]
 80039b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80039b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1e6      	bne.n	800398c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	3308      	adds	r3, #8
 80039c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c8:	e853 3f00 	ldrex	r3, [r3]
 80039cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d0:	f023 0301 	bic.w	r3, r3, #1
 80039d4:	663b      	str	r3, [r7, #96]	; 0x60
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	3308      	adds	r3, #8
 80039dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039de:	64ba      	str	r2, [r7, #72]	; 0x48
 80039e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80039e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039e6:	e841 2300 	strex	r3, r2, [r1]
 80039ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80039ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1e5      	bne.n	80039be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2220      	movs	r2, #32
 80039f6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e067      	b.n	8003ada <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d04f      	beq.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	69db      	ldr	r3, [r3, #28]
 8003a1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a26:	d147      	bne.n	8003ab8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a30:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3a:	e853 3f00 	ldrex	r3, [r3]
 8003a3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a50:	637b      	str	r3, [r7, #52]	; 0x34
 8003a52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a58:	e841 2300 	strex	r3, r2, [r1]
 8003a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1e6      	bne.n	8003a32 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3308      	adds	r3, #8
 8003a6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	e853 3f00 	ldrex	r3, [r3]
 8003a72:	613b      	str	r3, [r7, #16]
   return(result);
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f023 0301 	bic.w	r3, r3, #1
 8003a7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3308      	adds	r3, #8
 8003a82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a84:	623a      	str	r2, [r7, #32]
 8003a86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a88:	69f9      	ldr	r1, [r7, #28]
 8003a8a:	6a3a      	ldr	r2, [r7, #32]
 8003a8c:	e841 2300 	strex	r3, r2, [r1]
 8003a90:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e5      	bne.n	8003a64 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e010      	b.n	8003ada <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	69da      	ldr	r2, [r3, #28]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	bf0c      	ite	eq
 8003ac8:	2301      	moveq	r3, #1
 8003aca:	2300      	movne	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	461a      	mov	r2, r3
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	f43f af4a 	beq.w	800396c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3770      	adds	r7, #112	; 0x70
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b096      	sub	sp, #88	; 0x58
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	4613      	mov	r3, r2
 8003af0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	88fa      	ldrh	r2, [r7, #6]
 8003afc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2222      	movs	r2, #34	; 0x22
 8003b0c:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d02b      	beq.n	8003b6e <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b1a:	4a42      	ldr	r2, [pc, #264]	; (8003c24 <UART_Start_Receive_DMA+0x140>)
 8003b1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b22:	4a41      	ldr	r2, [pc, #260]	; (8003c28 <UART_Start_Receive_DMA+0x144>)
 8003b24:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2a:	4a40      	ldr	r2, [pc, #256]	; (8003c2c <UART_Start_Receive_DMA+0x148>)
 8003b2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b32:	2200      	movs	r2, #0
 8003b34:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	3324      	adds	r3, #36	; 0x24
 8003b40:	4619      	mov	r1, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b46:	461a      	mov	r2, r3
 8003b48:	88fb      	ldrh	r3, [r7, #6]
 8003b4a:	f7fd fbe1 	bl	8001310 <HAL_DMA_Start_IT>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00c      	beq.n	8003b6e <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2210      	movs	r2, #16
 8003b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e055      	b.n	8003c1a <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d018      	beq.n	8003bb0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b86:	e853 3f00 	ldrex	r3, [r3]
 8003b8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b92:	657b      	str	r3, [r7, #84]	; 0x54
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	461a      	mov	r2, r3
 8003b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b9e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ba2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ba4:	e841 2300 	strex	r3, r2, [r1]
 8003ba8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003baa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d1e6      	bne.n	8003b7e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3308      	adds	r3, #8
 8003bb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bba:	e853 3f00 	ldrex	r3, [r3]
 8003bbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	f043 0301 	orr.w	r3, r3, #1
 8003bc6:	653b      	str	r3, [r7, #80]	; 0x50
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	3308      	adds	r3, #8
 8003bce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003bd0:	637a      	str	r2, [r7, #52]	; 0x34
 8003bd2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bd8:	e841 2300 	strex	r3, r2, [r1]
 8003bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1e5      	bne.n	8003bb0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	3308      	adds	r3, #8
 8003bea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	e853 3f00 	ldrex	r3, [r3]
 8003bf2:	613b      	str	r3, [r7, #16]
   return(result);
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3308      	adds	r3, #8
 8003c02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c04:	623a      	str	r2, [r7, #32]
 8003c06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c08:	69f9      	ldr	r1, [r7, #28]
 8003c0a:	6a3a      	ldr	r2, [r7, #32]
 8003c0c:	e841 2300 	strex	r3, r2, [r1]
 8003c10:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1e5      	bne.n	8003be4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3758      	adds	r7, #88	; 0x58
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	08003d43 	.word	0x08003d43
 8003c28:	08003e67 	.word	0x08003e67
 8003c2c:	08003e9f 	.word	0x08003e9f

08003c30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b089      	sub	sp, #36	; 0x24
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	e853 3f00 	ldrex	r3, [r3]
 8003c44:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003c4c:	61fb      	str	r3, [r7, #28]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	6979      	ldr	r1, [r7, #20]
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	e841 2300 	strex	r3, r2, [r1]
 8003c62:	613b      	str	r3, [r7, #16]
   return(result);
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d1e6      	bne.n	8003c38 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	679a      	str	r2, [r3, #120]	; 0x78
}
 8003c70:	bf00      	nop
 8003c72:	3724      	adds	r7, #36	; 0x24
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b095      	sub	sp, #84	; 0x54
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8c:	e853 3f00 	ldrex	r3, [r3]
 8003c90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca2:	643b      	str	r3, [r7, #64]	; 0x40
 8003ca4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ca8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003caa:	e841 2300 	strex	r3, r2, [r1]
 8003cae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1e6      	bne.n	8003c84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	3308      	adds	r3, #8
 8003cbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	e853 3f00 	ldrex	r3, [r3]
 8003cc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	f023 0301 	bic.w	r3, r3, #1
 8003ccc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	3308      	adds	r3, #8
 8003cd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cde:	e841 2300 	strex	r3, r2, [r1]
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e5      	bne.n	8003cb6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d118      	bne.n	8003d24 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	e853 3f00 	ldrex	r3, [r3]
 8003cfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	f023 0310 	bic.w	r3, r3, #16
 8003d06:	647b      	str	r3, [r7, #68]	; 0x44
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d10:	61bb      	str	r3, [r7, #24]
 8003d12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d14:	6979      	ldr	r1, [r7, #20]
 8003d16:	69ba      	ldr	r2, [r7, #24]
 8003d18:	e841 2300 	strex	r3, r2, [r1]
 8003d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1e6      	bne.n	8003cf2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2220      	movs	r2, #32
 8003d28:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003d36:	bf00      	nop
 8003d38:	3754      	adds	r7, #84	; 0x54
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b09c      	sub	sp, #112	; 0x70
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d170      	bne.n	8003e40 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 8003d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d60:	2200      	movs	r2, #0
 8003d62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d6e:	e853 3f00 	ldrex	r3, [r3]
 8003d72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	461a      	mov	r2, r3
 8003d82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d84:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d86:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003d8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d8c:	e841 2300 	strex	r3, r2, [r1]
 8003d90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1e6      	bne.n	8003d66 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3308      	adds	r3, #8
 8003d9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da2:	e853 3f00 	ldrex	r3, [r3]
 8003da6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003daa:	f023 0301 	bic.w	r3, r3, #1
 8003dae:	667b      	str	r3, [r7, #100]	; 0x64
 8003db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3308      	adds	r3, #8
 8003db6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003db8:	647a      	str	r2, [r7, #68]	; 0x44
 8003dba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003dbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003dc0:	e841 2300 	strex	r3, r2, [r1]
 8003dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1e5      	bne.n	8003d98 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	3308      	adds	r3, #8
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd6:	e853 3f00 	ldrex	r3, [r3]
 8003dda:	623b      	str	r3, [r7, #32]
   return(result);
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003de2:	663b      	str	r3, [r7, #96]	; 0x60
 8003de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	3308      	adds	r3, #8
 8003dea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003dec:	633a      	str	r2, [r7, #48]	; 0x30
 8003dee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003df2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003df4:	e841 2300 	strex	r3, r2, [r1]
 8003df8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1e5      	bne.n	8003dcc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e02:	2220      	movs	r2, #32
 8003e04:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d118      	bne.n	8003e40 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f023 0310 	bic.w	r3, r3, #16
 8003e22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	69b9      	ldr	r1, [r7, #24]
 8003e32:	69fa      	ldr	r2, [r7, #28]
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	617b      	str	r3, [r7, #20]
   return(result);
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e6      	bne.n	8003e0e <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d107      	bne.n	8003e58 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e4a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e4e:	4619      	mov	r1, r3
 8003e50:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003e52:	f7ff f9d3 	bl	80031fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e56:	e002      	b.n	8003e5e <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 8003e58:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003e5a:	f7ff f9bb 	bl	80031d4 <HAL_UART_RxCpltCallback>
}
 8003e5e:	bf00      	nop
 8003e60:	3770      	adds	r7, #112	; 0x70
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b084      	sub	sp, #16
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e72:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d109      	bne.n	8003e90 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e82:	085b      	lsrs	r3, r3, #1
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	4619      	mov	r1, r3
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f7ff f9b7 	bl	80031fc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e8e:	e002      	b.n	8003e96 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f7fc fc8b 	bl	80007ac <HAL_UART_RxHalfCpltCallback>
}
 8003e96:	bf00      	nop
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b086      	sub	sp, #24
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eaa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eb0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec2:	2b80      	cmp	r3, #128	; 0x80
 8003ec4:	d109      	bne.n	8003eda <UART_DMAError+0x3c>
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	2b21      	cmp	r3, #33	; 0x21
 8003eca:	d106      	bne.n	8003eda <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8003ed4:	6978      	ldr	r0, [r7, #20]
 8003ed6:	f7ff feab 	bl	8003c30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee4:	2b40      	cmp	r3, #64	; 0x40
 8003ee6:	d109      	bne.n	8003efc <UART_DMAError+0x5e>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2b22      	cmp	r3, #34	; 0x22
 8003eec:	d106      	bne.n	8003efc <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8003ef6:	6978      	ldr	r0, [r7, #20]
 8003ef8:	f7ff fec0 	bl	8003c7c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f02:	f043 0210 	orr.w	r2, r3, #16
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f0c:	6978      	ldr	r0, [r7, #20]
 8003f0e:	f7ff f96b 	bl	80031e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f12:	bf00      	nop
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	2101      	movs	r1, #1
 8003f2a:	484c      	ldr	r0, [pc, #304]	; (800405c <network_configure_activations+0x140>)
 8003f2c:	f000 fb8a 	bl	8004644 <ai_platform_get_activations_map>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 8088 	beq.w	8004048 <network_configure_activations+0x12c>
    /* Updating activations (byte) offsets */
    
    serving_default_conv2d_31_input0_output_array.data = AI_PTR(g_network_activations_map[0] + 53432);
 8003f38:	4b48      	ldr	r3, [pc, #288]	; (800405c <network_configure_activations+0x140>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8003f40:	33b8      	adds	r3, #184	; 0xb8
 8003f42:	4a47      	ldr	r2, [pc, #284]	; (8004060 <network_configure_activations+0x144>)
 8003f44:	6093      	str	r3, [r2, #8]
    serving_default_conv2d_31_input0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 53432);
 8003f46:	4b45      	ldr	r3, [pc, #276]	; (800405c <network_configure_activations+0x140>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8003f4e:	33b8      	adds	r3, #184	; 0xb8
 8003f50:	4a43      	ldr	r2, [pc, #268]	; (8004060 <network_configure_activations+0x144>)
 8003f52:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8003f54:	4b41      	ldr	r3, [pc, #260]	; (800405c <network_configure_activations+0x140>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a42      	ldr	r2, [pc, #264]	; (8004064 <network_configure_activations+0x148>)
 8003f5a:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8003f5c:	4b3f      	ldr	r3, [pc, #252]	; (800405c <network_configure_activations+0x140>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a40      	ldr	r2, [pc, #256]	; (8004064 <network_configure_activations+0x148>)
 8003f62:	60d3      	str	r3, [r2, #12]
    
    nl_0_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8003f64:	4b3d      	ldr	r3, [pc, #244]	; (800405c <network_configure_activations+0x140>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a3f      	ldr	r2, [pc, #252]	; (8004068 <network_configure_activations+0x14c>)
 8003f6a:	6093      	str	r3, [r2, #8]
    nl_0_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8003f6c:	4b3b      	ldr	r3, [pc, #236]	; (800405c <network_configure_activations+0x140>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a3d      	ldr	r2, [pc, #244]	; (8004068 <network_configure_activations+0x14c>)
 8003f72:	60d3      	str	r3, [r2, #12]
    
    pool_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8003f74:	4b39      	ldr	r3, [pc, #228]	; (800405c <network_configure_activations+0x140>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a3c      	ldr	r2, [pc, #240]	; (800406c <network_configure_activations+0x150>)
 8003f7a:	6093      	str	r3, [r2, #8]
    pool_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8003f7c:	4b37      	ldr	r3, [pc, #220]	; (800405c <network_configure_activations+0x140>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a3a      	ldr	r2, [pc, #232]	; (800406c <network_configure_activations+0x150>)
 8003f82:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_output_array.data = AI_PTR(g_network_activations_map[0] + 15000);
 8003f84:	4b35      	ldr	r3, [pc, #212]	; (800405c <network_configure_activations+0x140>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8003f8c:	3318      	adds	r3, #24
 8003f8e:	4a38      	ldr	r2, [pc, #224]	; (8004070 <network_configure_activations+0x154>)
 8003f90:	6093      	str	r3, [r2, #8]
    conv2d_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 15000);
 8003f92:	4b32      	ldr	r3, [pc, #200]	; (800405c <network_configure_activations+0x140>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8003f9a:	3318      	adds	r3, #24
 8003f9c:	4a34      	ldr	r2, [pc, #208]	; (8004070 <network_configure_activations+0x154>)
 8003f9e:	60d3      	str	r3, [r2, #12]
    
    nl_2_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 15000);
 8003fa0:	4b2e      	ldr	r3, [pc, #184]	; (800405c <network_configure_activations+0x140>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8003fa8:	3318      	adds	r3, #24
 8003faa:	4a32      	ldr	r2, [pc, #200]	; (8004074 <network_configure_activations+0x158>)
 8003fac:	6093      	str	r3, [r2, #8]
    nl_2_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 15000);
 8003fae:	4b2b      	ldr	r3, [pc, #172]	; (800405c <network_configure_activations+0x140>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f503 536a 	add.w	r3, r3, #14976	; 0x3a80
 8003fb6:	3318      	adds	r3, #24
 8003fb8:	4a2e      	ldr	r2, [pc, #184]	; (8004074 <network_configure_activations+0x158>)
 8003fba:	60d3      	str	r3, [r2, #12]
    
    pool_3_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8003fbc:	4b27      	ldr	r3, [pc, #156]	; (800405c <network_configure_activations+0x140>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a2d      	ldr	r2, [pc, #180]	; (8004078 <network_configure_activations+0x15c>)
 8003fc2:	6093      	str	r3, [r2, #8]
    pool_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8003fc4:	4b25      	ldr	r3, [pc, #148]	; (800405c <network_configure_activations+0x140>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a2b      	ldr	r2, [pc, #172]	; (8004078 <network_configure_activations+0x15c>)
 8003fca:	60d3      	str	r3, [r2, #12]
    
    gemm_5_output_array.data = AI_PTR(g_network_activations_map[0] + 6400);
 8003fcc:	4b23      	ldr	r3, [pc, #140]	; (800405c <network_configure_activations+0x140>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8003fd4:	4a29      	ldr	r2, [pc, #164]	; (800407c <network_configure_activations+0x160>)
 8003fd6:	6093      	str	r3, [r2, #8]
    gemm_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 6400);
 8003fd8:	4b20      	ldr	r3, [pc, #128]	; (800405c <network_configure_activations+0x140>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8003fe0:	4a26      	ldr	r2, [pc, #152]	; (800407c <network_configure_activations+0x160>)
 8003fe2:	60d3      	str	r3, [r2, #12]
    
    nl_5_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8003fe4:	4b1d      	ldr	r3, [pc, #116]	; (800405c <network_configure_activations+0x140>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a25      	ldr	r2, [pc, #148]	; (8004080 <network_configure_activations+0x164>)
 8003fea:	6093      	str	r3, [r2, #8]
    nl_5_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8003fec:	4b1b      	ldr	r3, [pc, #108]	; (800405c <network_configure_activations+0x140>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a23      	ldr	r2, [pc, #140]	; (8004080 <network_configure_activations+0x164>)
 8003ff2:	60d3      	str	r3, [r2, #12]
    
    gemm_6_output_array.data = AI_PTR(g_network_activations_map[0] + 480);
 8003ff4:	4b19      	ldr	r3, [pc, #100]	; (800405c <network_configure_activations+0x140>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8003ffc:	4a21      	ldr	r2, [pc, #132]	; (8004084 <network_configure_activations+0x168>)
 8003ffe:	6093      	str	r3, [r2, #8]
    gemm_6_output_array.data_start = AI_PTR(g_network_activations_map[0] + 480);
 8004000:	4b16      	ldr	r3, [pc, #88]	; (800405c <network_configure_activations+0x140>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8004008:	4a1e      	ldr	r2, [pc, #120]	; (8004084 <network_configure_activations+0x168>)
 800400a:	60d3      	str	r3, [r2, #12]
    
    nl_6_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800400c:	4b13      	ldr	r3, [pc, #76]	; (800405c <network_configure_activations+0x140>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a1d      	ldr	r2, [pc, #116]	; (8004088 <network_configure_activations+0x16c>)
 8004012:	6093      	str	r3, [r2, #8]
    nl_6_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8004014:	4b11      	ldr	r3, [pc, #68]	; (800405c <network_configure_activations+0x140>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a1b      	ldr	r2, [pc, #108]	; (8004088 <network_configure_activations+0x16c>)
 800401a:	60d3      	str	r3, [r2, #12]
    
    gemm_7_output_array.data = AI_PTR(g_network_activations_map[0] + 336);
 800401c:	4b0f      	ldr	r3, [pc, #60]	; (800405c <network_configure_activations+0x140>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004024:	4a19      	ldr	r2, [pc, #100]	; (800408c <network_configure_activations+0x170>)
 8004026:	6093      	str	r3, [r2, #8]
    gemm_7_output_array.data_start = AI_PTR(g_network_activations_map[0] + 336);
 8004028:	4b0c      	ldr	r3, [pc, #48]	; (800405c <network_configure_activations+0x140>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004030:	4a16      	ldr	r2, [pc, #88]	; (800408c <network_configure_activations+0x170>)
 8004032:	60d3      	str	r3, [r2, #12]
    
    nl_8_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8004034:	4b09      	ldr	r3, [pc, #36]	; (800405c <network_configure_activations+0x140>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a15      	ldr	r2, [pc, #84]	; (8004090 <network_configure_activations+0x174>)
 800403a:	6093      	str	r3, [r2, #8]
    nl_8_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800403c:	4b07      	ldr	r3, [pc, #28]	; (800405c <network_configure_activations+0x140>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a13      	ldr	r2, [pc, #76]	; (8004090 <network_configure_activations+0x174>)
 8004042:	60d3      	str	r3, [r2, #12]
    
    return true;
 8004044:	2301      	movs	r3, #1
 8004046:	e005      	b.n	8004054 <network_configure_activations+0x138>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8004048:	2213      	movs	r2, #19
 800404a:	2130      	movs	r1, #48	; 0x30
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 fbdd 	bl	800480c <ai_platform_network_set_error>
  return false;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}
 800405c:	20014af8 	.word	0x20014af8
 8004060:	2000018c 	.word	0x2000018c
 8004064:	2000019c 	.word	0x2000019c
 8004068:	200001ac 	.word	0x200001ac
 800406c:	200001bc 	.word	0x200001bc
 8004070:	200001cc 	.word	0x200001cc
 8004074:	200001dc 	.word	0x200001dc
 8004078:	200001ec 	.word	0x200001ec
 800407c:	200001fc 	.word	0x200001fc
 8004080:	2000020c 	.word	0x2000020c
 8004084:	2000021c 	.word	0x2000021c
 8004088:	200000bc 	.word	0x200000bc
 800408c:	200000cc 	.word	0x200000cc
 8004090:	200000dc 	.word	0x200000dc

08004094 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	2101      	movs	r1, #1
 80040a2:	486b      	ldr	r0, [pc, #428]	; (8004250 <network_configure_weights+0x1bc>)
 80040a4:	f000 fa7a 	bl	800459c <ai_platform_get_weights_map>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 80c6 	beq.w	800423c <network_configure_weights+0x1a8>
    /* Updating weights (byte) offsets */
    
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 80040b0:	4b68      	ldr	r3, [pc, #416]	; (8004254 <network_configure_weights+0x1c0>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040b8:	4a66      	ldr	r2, [pc, #408]	; (8004254 <network_configure_weights+0x1c0>)
 80040ba:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80040bc:	4b64      	ldr	r3, [pc, #400]	; (8004250 <network_configure_weights+0x1bc>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a64      	ldr	r2, [pc, #400]	; (8004254 <network_configure_weights+0x1c0>)
 80040c2:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 80040c4:	4b62      	ldr	r3, [pc, #392]	; (8004250 <network_configure_weights+0x1bc>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a62      	ldr	r2, [pc, #392]	; (8004254 <network_configure_weights+0x1c0>)
 80040ca:	60d3      	str	r3, [r2, #12]
    
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80040cc:	4b62      	ldr	r3, [pc, #392]	; (8004258 <network_configure_weights+0x1c4>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040d4:	4a60      	ldr	r2, [pc, #384]	; (8004258 <network_configure_weights+0x1c4>)
 80040d6:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 600);
 80040d8:	4b5d      	ldr	r3, [pc, #372]	; (8004250 <network_configure_weights+0x1bc>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80040e0:	4a5d      	ldr	r2, [pc, #372]	; (8004258 <network_configure_weights+0x1c4>)
 80040e2:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 600);
 80040e4:	4b5a      	ldr	r3, [pc, #360]	; (8004250 <network_configure_weights+0x1bc>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80040ec:	4a5a      	ldr	r2, [pc, #360]	; (8004258 <network_configure_weights+0x1c4>)
 80040ee:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80040f0:	4b5a      	ldr	r3, [pc, #360]	; (800425c <network_configure_weights+0x1c8>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040f8:	4a58      	ldr	r2, [pc, #352]	; (800425c <network_configure_weights+0x1c8>)
 80040fa:	6013      	str	r3, [r2, #0]
    conv2d_2_weights_array.data = AI_PTR(g_network_weights_map[0] + 624);
 80040fc:	4b54      	ldr	r3, [pc, #336]	; (8004250 <network_configure_weights+0x1bc>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8004104:	4a55      	ldr	r2, [pc, #340]	; (800425c <network_configure_weights+0x1c8>)
 8004106:	6093      	str	r3, [r2, #8]
    conv2d_2_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 624);
 8004108:	4b51      	ldr	r3, [pc, #324]	; (8004250 <network_configure_weights+0x1bc>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8004110:	4a52      	ldr	r2, [pc, #328]	; (800425c <network_configure_weights+0x1c8>)
 8004112:	60d3      	str	r3, [r2, #12]
    
    conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004114:	4b52      	ldr	r3, [pc, #328]	; (8004260 <network_configure_weights+0x1cc>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800411c:	4a50      	ldr	r2, [pc, #320]	; (8004260 <network_configure_weights+0x1cc>)
 800411e:	6013      	str	r3, [r2, #0]
    conv2d_2_bias_array.data = AI_PTR(g_network_weights_map[0] + 10224);
 8004120:	4b4b      	ldr	r3, [pc, #300]	; (8004250 <network_configure_weights+0x1bc>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f503 531f 	add.w	r3, r3, #10176	; 0x27c0
 8004128:	3330      	adds	r3, #48	; 0x30
 800412a:	4a4d      	ldr	r2, [pc, #308]	; (8004260 <network_configure_weights+0x1cc>)
 800412c:	6093      	str	r3, [r2, #8]
    conv2d_2_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 10224);
 800412e:	4b48      	ldr	r3, [pc, #288]	; (8004250 <network_configure_weights+0x1bc>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f503 531f 	add.w	r3, r3, #10176	; 0x27c0
 8004136:	3330      	adds	r3, #48	; 0x30
 8004138:	4a49      	ldr	r2, [pc, #292]	; (8004260 <network_configure_weights+0x1cc>)
 800413a:	60d3      	str	r3, [r2, #12]
    
    gemm_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800413c:	4b49      	ldr	r3, [pc, #292]	; (8004264 <network_configure_weights+0x1d0>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004144:	4a47      	ldr	r2, [pc, #284]	; (8004264 <network_configure_weights+0x1d0>)
 8004146:	6013      	str	r3, [r2, #0]
    gemm_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 10288);
 8004148:	4b41      	ldr	r3, [pc, #260]	; (8004250 <network_configure_weights+0x1bc>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8004150:	3330      	adds	r3, #48	; 0x30
 8004152:	4a44      	ldr	r2, [pc, #272]	; (8004264 <network_configure_weights+0x1d0>)
 8004154:	6093      	str	r3, [r2, #8]
    gemm_5_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 10288);
 8004156:	4b3e      	ldr	r3, [pc, #248]	; (8004250 <network_configure_weights+0x1bc>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 800415e:	3330      	adds	r3, #48	; 0x30
 8004160:	4a40      	ldr	r2, [pc, #256]	; (8004264 <network_configure_weights+0x1d0>)
 8004162:	60d3      	str	r3, [r2, #12]
    
    gemm_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8004164:	4b40      	ldr	r3, [pc, #256]	; (8004268 <network_configure_weights+0x1d4>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800416c:	4a3e      	ldr	r2, [pc, #248]	; (8004268 <network_configure_weights+0x1d4>)
 800416e:	6013      	str	r3, [r2, #0]
    gemm_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 778288);
 8004170:	4b37      	ldr	r3, [pc, #220]	; (8004250 <network_configure_weights+0x1bc>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f503 233e 	add.w	r3, r3, #778240	; 0xbe000
 8004178:	3330      	adds	r3, #48	; 0x30
 800417a:	4a3b      	ldr	r2, [pc, #236]	; (8004268 <network_configure_weights+0x1d4>)
 800417c:	6093      	str	r3, [r2, #8]
    gemm_5_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 778288);
 800417e:	4b34      	ldr	r3, [pc, #208]	; (8004250 <network_configure_weights+0x1bc>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f503 233e 	add.w	r3, r3, #778240	; 0xbe000
 8004186:	3330      	adds	r3, #48	; 0x30
 8004188:	4a37      	ldr	r2, [pc, #220]	; (8004268 <network_configure_weights+0x1d4>)
 800418a:	60d3      	str	r3, [r2, #12]
    
    gemm_6_weights_array.format |= AI_FMT_FLAG_CONST;
 800418c:	4b37      	ldr	r3, [pc, #220]	; (800426c <network_configure_weights+0x1d8>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004194:	4a35      	ldr	r2, [pc, #212]	; (800426c <network_configure_weights+0x1d8>)
 8004196:	6013      	str	r3, [r2, #0]
    gemm_6_weights_array.data = AI_PTR(g_network_weights_map[0] + 778768);
 8004198:	4b2d      	ldr	r3, [pc, #180]	; (8004250 <network_configure_weights+0x1bc>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f503 233e 	add.w	r3, r3, #778240	; 0xbe000
 80041a0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80041a4:	4a31      	ldr	r2, [pc, #196]	; (800426c <network_configure_weights+0x1d8>)
 80041a6:	6093      	str	r3, [r2, #8]
    gemm_6_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 778768);
 80041a8:	4b29      	ldr	r3, [pc, #164]	; (8004250 <network_configure_weights+0x1bc>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f503 233e 	add.w	r3, r3, #778240	; 0xbe000
 80041b0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80041b4:	4a2d      	ldr	r2, [pc, #180]	; (800426c <network_configure_weights+0x1d8>)
 80041b6:	60d3      	str	r3, [r2, #12]
    
    gemm_6_bias_array.format |= AI_FMT_FLAG_CONST;
 80041b8:	4b2d      	ldr	r3, [pc, #180]	; (8004270 <network_configure_weights+0x1dc>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041c0:	4a2b      	ldr	r2, [pc, #172]	; (8004270 <network_configure_weights+0x1dc>)
 80041c2:	6013      	str	r3, [r2, #0]
    gemm_6_bias_array.data = AI_PTR(g_network_weights_map[0] + 819088);
 80041c4:	4b22      	ldr	r3, [pc, #136]	; (8004250 <network_configure_weights+0x1bc>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f503 2347 	add.w	r3, r3, #815104	; 0xc7000
 80041cc:	f503 6379 	add.w	r3, r3, #3984	; 0xf90
 80041d0:	4a27      	ldr	r2, [pc, #156]	; (8004270 <network_configure_weights+0x1dc>)
 80041d2:	6093      	str	r3, [r2, #8]
    gemm_6_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 819088);
 80041d4:	4b1e      	ldr	r3, [pc, #120]	; (8004250 <network_configure_weights+0x1bc>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f503 2347 	add.w	r3, r3, #815104	; 0xc7000
 80041dc:	f503 6379 	add.w	r3, r3, #3984	; 0xf90
 80041e0:	4a23      	ldr	r2, [pc, #140]	; (8004270 <network_configure_weights+0x1dc>)
 80041e2:	60d3      	str	r3, [r2, #12]
    
    gemm_7_weights_array.format |= AI_FMT_FLAG_CONST;
 80041e4:	4b23      	ldr	r3, [pc, #140]	; (8004274 <network_configure_weights+0x1e0>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041ec:	4a21      	ldr	r2, [pc, #132]	; (8004274 <network_configure_weights+0x1e0>)
 80041ee:	6013      	str	r3, [r2, #0]
    gemm_7_weights_array.data = AI_PTR(g_network_weights_map[0] + 819424);
 80041f0:	4b17      	ldr	r3, [pc, #92]	; (8004250 <network_configure_weights+0x1bc>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f503 2348 	add.w	r3, r3, #819200	; 0xc8000
 80041f8:	33e0      	adds	r3, #224	; 0xe0
 80041fa:	4a1e      	ldr	r2, [pc, #120]	; (8004274 <network_configure_weights+0x1e0>)
 80041fc:	6093      	str	r3, [r2, #8]
    gemm_7_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 819424);
 80041fe:	4b14      	ldr	r3, [pc, #80]	; (8004250 <network_configure_weights+0x1bc>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f503 2348 	add.w	r3, r3, #819200	; 0xc8000
 8004206:	33e0      	adds	r3, #224	; 0xe0
 8004208:	4a1a      	ldr	r2, [pc, #104]	; (8004274 <network_configure_weights+0x1e0>)
 800420a:	60d3      	str	r3, [r2, #12]
    
    gemm_7_bias_array.format |= AI_FMT_FLAG_CONST;
 800420c:	4b1a      	ldr	r3, [pc, #104]	; (8004278 <network_configure_weights+0x1e4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004214:	4a18      	ldr	r2, [pc, #96]	; (8004278 <network_configure_weights+0x1e4>)
 8004216:	6013      	str	r3, [r2, #0]
    gemm_7_bias_array.data = AI_PTR(g_network_weights_map[0] + 833872);
 8004218:	4b0d      	ldr	r3, [pc, #52]	; (8004250 <network_configure_weights+0x1bc>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f503 234b 	add.w	r3, r3, #831488	; 0xcb000
 8004220:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8004224:	4a14      	ldr	r2, [pc, #80]	; (8004278 <network_configure_weights+0x1e4>)
 8004226:	6093      	str	r3, [r2, #8]
    gemm_7_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 833872);
 8004228:	4b09      	ldr	r3, [pc, #36]	; (8004250 <network_configure_weights+0x1bc>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f503 234b 	add.w	r3, r3, #831488	; 0xcb000
 8004230:	f503 6315 	add.w	r3, r3, #2384	; 0x950
 8004234:	4a10      	ldr	r2, [pc, #64]	; (8004278 <network_configure_weights+0x1e4>)
 8004236:	60d3      	str	r3, [r2, #12]
    
    return true;
 8004238:	2301      	movs	r3, #1
 800423a:	e005      	b.n	8004248 <network_configure_weights+0x1b4>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 800423c:	2212      	movs	r2, #18
 800423e:	2130      	movs	r1, #48	; 0x30
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 fae3 	bl	800480c <ai_platform_network_set_error>
  return false;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	20014afc 	.word	0x20014afc
 8004254:	200000ec 	.word	0x200000ec
 8004258:	200000fc 	.word	0x200000fc
 800425c:	2000010c 	.word	0x2000010c
 8004260:	2000011c 	.word	0x2000011c
 8004264:	2000012c 	.word	0x2000012c
 8004268:	2000013c 	.word	0x2000013c
 800426c:	2000014c 	.word	0x2000014c
 8004270:	2000015c 	.word	0x2000015c
 8004274:	2000016c 	.word	0x2000016c
 8004278:	2000017c 	.word	0x2000017c

0800427c <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 fa53 	bl	8004730 <ai_platform_network_get_error>
 800428a:	4603      	mov	r3, r0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3708      	adds	r7, #8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af02      	add	r7, sp, #8
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800429e:	2300      	movs	r3, #0
 80042a0:	9301      	str	r3, [sp, #4]
 80042a2:	2305      	movs	r3, #5
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	2301      	movs	r3, #1
 80042a8:	4a04      	ldr	r2, [pc, #16]	; (80042bc <ai_network_create+0x28>)
 80042aa:	6839      	ldr	r1, [r7, #0]
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 fc59 	bl	8004b64 <ai_platform_network_create>
 80042b2:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	20000d18 	.word	0x20000d18

080042c0 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b096      	sub	sp, #88	; 0x58
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 80042cc:	2100      	movs	r1, #0
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f7ff ffe0 	bl	8004294 <ai_network_create>
 80042d4:	4603      	mov	r3, r0
 80042d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 80042d8:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <ai_network_create_and_init+0x24>
        return err;
 80042e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e2:	e05d      	b.n	80043a0 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 80042e4:	f107 0314 	add.w	r3, r7, #20
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 f8dd 	bl	80044a8 <ai_network_data_params_get>
 80042ee:	4603      	mov	r3, r0
 80042f0:	f083 0301 	eor.w	r3, r3, #1
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d008      	beq.n	800430c <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff ffbc 	bl	800427c <ai_network_get_error>
 8004304:	4603      	mov	r3, r0
 8004306:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8004308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800430a:	e049      	b.n	80043a0 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d016      	beq.n	8004340 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8004312:	2300      	movs	r3, #0
 8004314:	657b      	str	r3, [r7, #84]	; 0x54
 8004316:	e00e      	b.n	8004336 <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8004318:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800431a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	4413      	add	r3, r2
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	f107 0314 	add.w	r3, r7, #20
 8004328:	330c      	adds	r3, #12
 800432a:	4618      	mov	r0, r3
 800432c:	f000 f922 	bl	8004574 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8004330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004332:	3301      	adds	r3, #1
 8004334:	657b      	str	r3, [r7, #84]	; 0x54
 8004336:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004338:	461a      	mov	r2, r3
 800433a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800433c:	4293      	cmp	r3, r2
 800433e:	dbeb      	blt.n	8004318 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d016      	beq.n	8004374 <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8004346:	2300      	movs	r3, #0
 8004348:	653b      	str	r3, [r7, #80]	; 0x50
 800434a:	e00e      	b.n	800436a <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 800434c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800434e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	4413      	add	r3, r2
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	f107 0314 	add.w	r3, r7, #20
 800435c:	3304      	adds	r3, #4
 800435e:	4618      	mov	r0, r3
 8004360:	f000 f908 	bl	8004574 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8004364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004366:	3301      	adds	r3, #1
 8004368:	653b      	str	r3, [r7, #80]	; 0x50
 800436a:	8b7b      	ldrh	r3, [r7, #26]
 800436c:	461a      	mov	r2, r3
 800436e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004370:	4293      	cmp	r3, r2
 8004372:	dbeb      	blt.n	800434c <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f107 0214 	add.w	r2, r7, #20
 800437c:	4611      	mov	r1, r2
 800437e:	4618      	mov	r0, r3
 8004380:	f000 f846 	bl	8004410 <ai_network_init>
 8004384:	4603      	mov	r3, r0
 8004386:	f083 0301 	eor.w	r3, r3, #1
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	d006      	beq.n	800439e <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff ff71 	bl	800427c <ai_network_get_error>
 800439a:	4603      	mov	r3, r0
 800439c:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 800439e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3758      	adds	r7, #88	; 0x58
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d104      	bne.n	80043c2 <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80043b8:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <ai_network_inputs_get+0x2c>)
 80043ba:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a06      	ldr	r2, [pc, #24]	; (80043d8 <ai_network_inputs_get+0x30>)
 80043c0:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 80043c2:	6839      	ldr	r1, [r7, #0]
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 fa27 	bl	8004818 <ai_platform_inputs_get>
 80043ca:	4603      	mov	r3, r0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	20000d18 	.word	0x20000d18
 80043d8:	a1c00100 	.word	0xa1c00100

080043dc <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d104      	bne.n	80043f6 <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 80043ec:	4b06      	ldr	r3, [pc, #24]	; (8004408 <ai_network_outputs_get+0x2c>)
 80043ee:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a06      	ldr	r2, [pc, #24]	; (800440c <ai_network_outputs_get+0x30>)
 80043f4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 80043f6:	6839      	ldr	r1, [r7, #0]
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 fae3 	bl	80049c4 <ai_platform_outputs_get>
 80043fe:	4603      	mov	r3, r0
}
 8004400:	4618      	mov	r0, r3
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	20000d18 	.word	0x20000d18
 800440c:	a1c00100 	.word	0xa1c00100

08004410 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800441a:	6839      	ldr	r1, [r7, #0]
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 fc77 	bl	8004d10 <ai_platform_network_init>
 8004422:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <ai_network_init+0x1e>
 800442a:	2300      	movs	r3, #0
 800442c:	e028      	b.n	8004480 <ai_network_init+0x70>

  ai_bool ok = true;
 800442e:	2301      	movs	r3, #1
 8004430:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8004432:	6839      	ldr	r1, [r7, #0]
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f7ff fe2d 	bl	8004094 <network_configure_weights>
 800443a:	4603      	mov	r3, r0
 800443c:	461a      	mov	r2, r3
 800443e:	7afb      	ldrb	r3, [r7, #11]
 8004440:	4013      	ands	r3, r2
 8004442:	2b00      	cmp	r3, #0
 8004444:	bf14      	ite	ne
 8004446:	2301      	movne	r3, #1
 8004448:	2300      	moveq	r3, #0
 800444a:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 800444c:	6839      	ldr	r1, [r7, #0]
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f7ff fd64 	bl	8003f1c <network_configure_activations>
 8004454:	4603      	mov	r3, r0
 8004456:	461a      	mov	r2, r3
 8004458:	7afb      	ldrb	r3, [r7, #11]
 800445a:	4013      	ands	r3, r2
 800445c:	2b00      	cmp	r3, #0
 800445e:	bf14      	ite	ne
 8004460:	2301      	movne	r3, #1
 8004462:	2300      	moveq	r3, #0
 8004464:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fd40 	bl	8004eec <ai_platform_network_post_init>
 800446c:	4603      	mov	r3, r0
 800446e:	461a      	mov	r2, r3
 8004470:	7afb      	ldrb	r3, [r7, #11]
 8004472:	4013      	ands	r3, r2
 8004474:	2b00      	cmp	r3, #0
 8004476:	bf14      	ite	ne
 8004478:	2301      	movne	r3, #1
 800447a:	2300      	moveq	r3, #0
 800447c:	72fb      	strb	r3, [r7, #11]

  return ok;
 800447e:	7afb      	ldrb	r3, [r7, #11]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	68b9      	ldr	r1, [r7, #8]
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 fdaf 	bl	8004ffc <ai_platform_network_process>
 800449e:	4603      	mov	r3, r0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <ai_network_data_params_get+0x12>
 80044b6:	2300      	movs	r3, #0
 80044b8:	e016      	b.n	80044e8 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 80044ba:	4a0d      	ldr	r2, [pc, #52]	; (80044f0 <ai_network_data_params_get+0x48>)
 80044bc:	f107 0310 	add.w	r3, r7, #16
 80044c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044c4:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80044c8:	4a0a      	ldr	r2, [pc, #40]	; (80044f4 <ai_network_data_params_get+0x4c>)
 80044ca:	f107 0308 	add.w	r3, r7, #8
 80044ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80044d2:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80044d6:	f107 0210 	add.w	r2, r7, #16
 80044da:	f107 0308 	add.w	r3, r7, #8
 80044de:	4619      	mov	r1, r3
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f903 	bl	80046ec <ai_platform_bind_network_params>
 80044e6:	4603      	mov	r3, r0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3718      	adds	r7, #24
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	08007f28 	.word	0x08007f28
 80044f4:	08007f30 	.word	0x08007f30

080044f8 <ai_buffer_get_size>:
 80044f8:	b378      	cbz	r0, 800455a <ai_buffer_get_size+0x62>
 80044fa:	b410      	push	{r4}
 80044fc:	6803      	ldr	r3, [r0, #0]
 80044fe:	4a17      	ldr	r2, [pc, #92]	; (800455c <ai_buffer_get_size+0x64>)
 8004500:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004504:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004508:	4293      	cmp	r3, r2
 800450a:	d01e      	beq.n	800454a <ai_buffer_get_size+0x52>
 800450c:	6984      	ldr	r4, [r0, #24]
 800450e:	6862      	ldr	r2, [r4, #4]
 8004510:	7d03      	ldrb	r3, [r0, #20]
 8004512:	6941      	ldr	r1, [r0, #20]
 8004514:	f1a3 0301 	sub.w	r3, r3, #1
 8004518:	fab3 f383 	clz	r3, r3
 800451c:	095b      	lsrs	r3, r3, #5
 800451e:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8004522:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8004526:	da0b      	bge.n	8004540 <ai_buffer_get_size+0x48>
 8004528:	2b01      	cmp	r3, #1
 800452a:	d102      	bne.n	8004532 <ai_buffer_get_size+0x3a>
 800452c:	2802      	cmp	r0, #2
 800452e:	d007      	beq.n	8004540 <ai_buffer_get_size+0x48>
 8004530:	2302      	movs	r3, #2
 8004532:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8004536:	3301      	adds	r3, #1
 8004538:	4298      	cmp	r0, r3
 800453a:	fb01 f202 	mul.w	r2, r1, r2
 800453e:	d1f3      	bne.n	8004528 <ai_buffer_get_size+0x30>
 8004540:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8004544:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	2900      	cmp	r1, #0
 800454c:	d0de      	beq.n	800450c <ai_buffer_get_size+0x14>
 800454e:	6984      	ldr	r4, [r0, #24]
 8004550:	6863      	ldr	r3, [r4, #4]
 8004552:	331f      	adds	r3, #31
 8004554:	f023 021f 	bic.w	r2, r3, #31
 8004558:	e7da      	b.n	8004510 <ai_buffer_get_size+0x18>
 800455a:	4770      	bx	lr
 800455c:	000400c0 	.word	0x000400c0

08004560 <ai_buffer_array_sane>:
 8004560:	b138      	cbz	r0, 8004572 <ai_buffer_array_sane+0x12>
 8004562:	6843      	ldr	r3, [r0, #4]
 8004564:	b123      	cbz	r3, 8004570 <ai_buffer_array_sane+0x10>
 8004566:	8840      	ldrh	r0, [r0, #2]
 8004568:	3800      	subs	r0, #0
 800456a:	bf18      	it	ne
 800456c:	2001      	movne	r0, #1
 800456e:	4770      	bx	lr
 8004570:	4618      	mov	r0, r3
 8004572:	4770      	bx	lr

08004574 <ai_buffer_array_item_set_address>:
 8004574:	b150      	cbz	r0, 800458c <ai_buffer_array_item_set_address+0x18>
 8004576:	6843      	ldr	r3, [r0, #4]
 8004578:	b14b      	cbz	r3, 800458e <ai_buffer_array_item_set_address+0x1a>
 800457a:	8840      	ldrh	r0, [r0, #2]
 800457c:	b900      	cbnz	r0, 8004580 <ai_buffer_array_item_set_address+0xc>
 800457e:	4770      	bx	lr
 8004580:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8004584:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8004588:	2001      	movs	r0, #1
 800458a:	604a      	str	r2, [r1, #4]
 800458c:	4770      	bx	lr
 800458e:	4618      	mov	r0, r3
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop

08004594 <_ai_platform_acquire_crc>:
 8004594:	2001      	movs	r0, #1
 8004596:	4770      	bx	lr

08004598 <_ai_platform_release_crc>:
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop

0800459c <ai_platform_get_weights_map>:
 800459c:	2a00      	cmp	r2, #0
 800459e:	d037      	beq.n	8004610 <ai_platform_get_weights_map+0x74>
 80045a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a2:	4604      	mov	r4, r0
 80045a4:	b1a0      	cbz	r0, 80045d0 <ai_platform_get_weights_map+0x34>
 80045a6:	460f      	mov	r7, r1
 80045a8:	b191      	cbz	r1, 80045d0 <ai_platform_get_weights_map+0x34>
 80045aa:	4b25      	ldr	r3, [pc, #148]	; (8004640 <ai_platform_get_weights_map+0xa4>)
 80045ac:	6810      	ldr	r0, [r2, #0]
 80045ae:	4298      	cmp	r0, r3
 80045b0:	4615      	mov	r5, r2
 80045b2:	d00f      	beq.n	80045d4 <ai_platform_get_weights_map+0x38>
 80045b4:	6855      	ldr	r5, [r2, #4]
 80045b6:	b15d      	cbz	r5, 80045d0 <ai_platform_get_weights_map+0x34>
 80045b8:	682e      	ldr	r6, [r5, #0]
 80045ba:	429e      	cmp	r6, r3
 80045bc:	d02a      	beq.n	8004614 <ai_platform_get_weights_map+0x78>
 80045be:	f1a1 0001 	sub.w	r0, r1, #1
 80045c2:	6025      	str	r5, [r4, #0]
 80045c4:	fab0 f080 	clz	r0, r0
 80045c8:	0940      	lsrs	r0, r0, #5
 80045ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045cc:	42a7      	cmp	r7, r4
 80045ce:	d034      	beq.n	800463a <ai_platform_get_weights_map+0x9e>
 80045d0:	2000      	movs	r0, #0
 80045d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045d4:	1d10      	adds	r0, r2, #4
 80045d6:	f7ff ffc3 	bl	8004560 <ai_buffer_array_sane>
 80045da:	2800      	cmp	r0, #0
 80045dc:	d0f8      	beq.n	80045d0 <ai_platform_get_weights_map+0x34>
 80045de:	88eb      	ldrh	r3, [r5, #6]
 80045e0:	429f      	cmp	r7, r3
 80045e2:	d1f5      	bne.n	80045d0 <ai_platform_get_weights_map+0x34>
 80045e4:	f04f 0e00 	mov.w	lr, #0
 80045e8:	1f23      	subs	r3, r4, #4
 80045ea:	4670      	mov	r0, lr
 80045ec:	68aa      	ldr	r2, [r5, #8]
 80045ee:	eb02 0c0e 	add.w	ip, r2, lr
 80045f2:	f10e 0e1c 	add.w	lr, lr, #28
 80045f6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80045fa:	b124      	cbz	r4, 8004606 <ai_platform_get_weights_map+0x6a>
 80045fc:	3001      	adds	r0, #1
 80045fe:	4287      	cmp	r7, r0
 8004600:	f843 4f04 	str.w	r4, [r3, #4]!
 8004604:	d1f2      	bne.n	80045ec <ai_platform_get_weights_map+0x50>
 8004606:	1a38      	subs	r0, r7, r0
 8004608:	fab0 f080 	clz	r0, r0
 800460c:	0940      	lsrs	r0, r0, #5
 800460e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004610:	2000      	movs	r0, #0
 8004612:	4770      	bx	lr
 8004614:	1f23      	subs	r3, r4, #4
 8004616:	4628      	mov	r0, r5
 8004618:	2400      	movs	r4, #0
 800461a:	e000      	b.n	800461e <ai_platform_get_weights_map+0x82>
 800461c:	4614      	mov	r4, r2
 800461e:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8004622:	42b2      	cmp	r2, r6
 8004624:	d0d2      	beq.n	80045cc <ai_platform_get_weights_map+0x30>
 8004626:	f843 2f04 	str.w	r2, [r3, #4]!
 800462a:	1c62      	adds	r2, r4, #1
 800462c:	4297      	cmp	r7, r2
 800462e:	d1f5      	bne.n	800461c <ai_platform_get_weights_map+0x80>
 8004630:	3402      	adds	r4, #2
 8004632:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8004636:	42b3      	cmp	r3, r6
 8004638:	d1ca      	bne.n	80045d0 <ai_platform_get_weights_map+0x34>
 800463a:	2001      	movs	r0, #1
 800463c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800463e:	bf00      	nop
 8004640:	a1facade 	.word	0xa1facade

08004644 <ai_platform_get_activations_map>:
 8004644:	2a00      	cmp	r2, #0
 8004646:	d038      	beq.n	80046ba <ai_platform_get_activations_map+0x76>
 8004648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464a:	4604      	mov	r4, r0
 800464c:	b1a0      	cbz	r0, 8004678 <ai_platform_get_activations_map+0x34>
 800464e:	460f      	mov	r7, r1
 8004650:	b191      	cbz	r1, 8004678 <ai_platform_get_activations_map+0x34>
 8004652:	4b25      	ldr	r3, [pc, #148]	; (80046e8 <ai_platform_get_activations_map+0xa4>)
 8004654:	6810      	ldr	r0, [r2, #0]
 8004656:	4298      	cmp	r0, r3
 8004658:	4615      	mov	r5, r2
 800465a:	d00f      	beq.n	800467c <ai_platform_get_activations_map+0x38>
 800465c:	6a15      	ldr	r5, [r2, #32]
 800465e:	b15d      	cbz	r5, 8004678 <ai_platform_get_activations_map+0x34>
 8004660:	682e      	ldr	r6, [r5, #0]
 8004662:	429e      	cmp	r6, r3
 8004664:	d02b      	beq.n	80046be <ai_platform_get_activations_map+0x7a>
 8004666:	f1a1 0001 	sub.w	r0, r1, #1
 800466a:	6025      	str	r5, [r4, #0]
 800466c:	fab0 f080 	clz	r0, r0
 8004670:	0940      	lsrs	r0, r0, #5
 8004672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004674:	42a7      	cmp	r7, r4
 8004676:	d035      	beq.n	80046e4 <ai_platform_get_activations_map+0xa0>
 8004678:	2000      	movs	r0, #0
 800467a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800467c:	f102 000c 	add.w	r0, r2, #12
 8004680:	f7ff ff6e 	bl	8004560 <ai_buffer_array_sane>
 8004684:	2800      	cmp	r0, #0
 8004686:	d0f7      	beq.n	8004678 <ai_platform_get_activations_map+0x34>
 8004688:	89eb      	ldrh	r3, [r5, #14]
 800468a:	429f      	cmp	r7, r3
 800468c:	d1f4      	bne.n	8004678 <ai_platform_get_activations_map+0x34>
 800468e:	f04f 0e00 	mov.w	lr, #0
 8004692:	1f23      	subs	r3, r4, #4
 8004694:	4670      	mov	r0, lr
 8004696:	692a      	ldr	r2, [r5, #16]
 8004698:	eb02 0c0e 	add.w	ip, r2, lr
 800469c:	f10e 0e1c 	add.w	lr, lr, #28
 80046a0:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80046a4:	b124      	cbz	r4, 80046b0 <ai_platform_get_activations_map+0x6c>
 80046a6:	3001      	adds	r0, #1
 80046a8:	4287      	cmp	r7, r0
 80046aa:	f843 4f04 	str.w	r4, [r3, #4]!
 80046ae:	d1f2      	bne.n	8004696 <ai_platform_get_activations_map+0x52>
 80046b0:	1a38      	subs	r0, r7, r0
 80046b2:	fab0 f080 	clz	r0, r0
 80046b6:	0940      	lsrs	r0, r0, #5
 80046b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046ba:	2000      	movs	r0, #0
 80046bc:	4770      	bx	lr
 80046be:	1f23      	subs	r3, r4, #4
 80046c0:	4628      	mov	r0, r5
 80046c2:	2400      	movs	r4, #0
 80046c4:	e000      	b.n	80046c8 <ai_platform_get_activations_map+0x84>
 80046c6:	4614      	mov	r4, r2
 80046c8:	f850 2f04 	ldr.w	r2, [r0, #4]!
 80046cc:	42b2      	cmp	r2, r6
 80046ce:	d0d1      	beq.n	8004674 <ai_platform_get_activations_map+0x30>
 80046d0:	f843 2f04 	str.w	r2, [r3, #4]!
 80046d4:	1c62      	adds	r2, r4, #1
 80046d6:	4297      	cmp	r7, r2
 80046d8:	d1f5      	bne.n	80046c6 <ai_platform_get_activations_map+0x82>
 80046da:	3402      	adds	r4, #2
 80046dc:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80046e0:	42b3      	cmp	r3, r6
 80046e2:	d1c9      	bne.n	8004678 <ai_platform_get_activations_map+0x34>
 80046e4:	2001      	movs	r0, #1
 80046e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046e8:	a1facade 	.word	0xa1facade

080046ec <ai_platform_bind_network_params>:
 80046ec:	b1a0      	cbz	r0, 8004718 <ai_platform_bind_network_params+0x2c>
 80046ee:	b1b1      	cbz	r1, 800471e <ai_platform_bind_network_params+0x32>
 80046f0:	b1c2      	cbz	r2, 8004724 <ai_platform_bind_network_params+0x38>
 80046f2:	b410      	push	{r4}
 80046f4:	4603      	mov	r3, r0
 80046f6:	4c0d      	ldr	r4, [pc, #52]	; (800472c <ai_platform_bind_network_params+0x40>)
 80046f8:	f843 4b04 	str.w	r4, [r3], #4
 80046fc:	f100 0c0c 	add.w	ip, r0, #12
 8004700:	c903      	ldmia	r1, {r0, r1}
 8004702:	e883 0003 	stmia.w	r3, {r0, r1}
 8004706:	e892 0003 	ldmia.w	r2, {r0, r1}
 800470a:	e88c 0003 	stmia.w	ip, {r0, r1}
 800470e:	2301      	movs	r3, #1
 8004710:	4618      	mov	r0, r3
 8004712:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	4603      	mov	r3, r0
 800471a:	4618      	mov	r0, r3
 800471c:	4770      	bx	lr
 800471e:	460b      	mov	r3, r1
 8004720:	4618      	mov	r0, r3
 8004722:	4770      	bx	lr
 8004724:	4613      	mov	r3, r2
 8004726:	4618      	mov	r0, r3
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	a1facade 	.word	0xa1facade

08004730 <ai_platform_network_get_error>:
 8004730:	b510      	push	{r4, lr}
 8004732:	b1f0      	cbz	r0, 8004772 <ai_platform_network_get_error+0x42>
 8004734:	4b2f      	ldr	r3, [pc, #188]	; (80047f4 <ai_platform_network_get_error+0xc4>)
 8004736:	6802      	ldr	r2, [r0, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	4604      	mov	r4, r0
 800473c:	d119      	bne.n	8004772 <ai_platform_network_get_error+0x42>
 800473e:	f7ff ff29 	bl	8004594 <_ai_platform_acquire_crc>
 8004742:	4b2d      	ldr	r3, [pc, #180]	; (80047f8 <ai_platform_network_get_error+0xc8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800474a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800474e:	d03c      	beq.n	80047ca <ai_platform_network_get_error+0x9a>
 8004750:	4a2a      	ldr	r2, [pc, #168]	; (80047fc <ai_platform_network_get_error+0xcc>)
 8004752:	2301      	movs	r3, #1
 8004754:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004758:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1fb      	bne.n	8004758 <ai_platform_network_get_error+0x28>
 8004760:	4b27      	ldr	r3, [pc, #156]	; (8004800 <ai_platform_network_get_error+0xd0>)
 8004762:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004766:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800476a:	4b26      	ldr	r3, [pc, #152]	; (8004804 <ai_platform_network_get_error+0xd4>)
 800476c:	429a      	cmp	r2, r3
 800476e:	d038      	beq.n	80047e2 <ai_platform_network_get_error+0xb2>
 8004770:	e7fe      	b.n	8004770 <ai_platform_network_get_error+0x40>
 8004772:	f7ff ff0f 	bl	8004594 <_ai_platform_acquire_crc>
 8004776:	4b20      	ldr	r3, [pc, #128]	; (80047f8 <ai_platform_network_get_error+0xc8>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800477e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004782:	d010      	beq.n	80047a6 <ai_platform_network_get_error+0x76>
 8004784:	4a1d      	ldr	r2, [pc, #116]	; (80047fc <ai_platform_network_get_error+0xcc>)
 8004786:	2301      	movs	r3, #1
 8004788:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800478c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1fb      	bne.n	800478c <ai_platform_network_get_error+0x5c>
 8004794:	4b1a      	ldr	r3, [pc, #104]	; (8004800 <ai_platform_network_get_error+0xd0>)
 8004796:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800479a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800479e:	4b19      	ldr	r3, [pc, #100]	; (8004804 <ai_platform_network_get_error+0xd4>)
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d00d      	beq.n	80047c0 <ai_platform_network_get_error+0x90>
 80047a4:	e7fe      	b.n	80047a4 <ai_platform_network_get_error+0x74>
 80047a6:	4a18      	ldr	r2, [pc, #96]	; (8004808 <ai_platform_network_get_error+0xd8>)
 80047a8:	2301      	movs	r3, #1
 80047aa:	6093      	str	r3, [r2, #8]
 80047ac:	6893      	ldr	r3, [r2, #8]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1fc      	bne.n	80047ac <ai_platform_network_get_error+0x7c>
 80047b2:	4b13      	ldr	r3, [pc, #76]	; (8004800 <ai_platform_network_get_error+0xd0>)
 80047b4:	6013      	str	r3, [r2, #0]
 80047b6:	6812      	ldr	r2, [r2, #0]
 80047b8:	4b12      	ldr	r3, [pc, #72]	; (8004804 <ai_platform_network_get_error+0xd4>)
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d000      	beq.n	80047c0 <ai_platform_network_get_error+0x90>
 80047be:	e7fe      	b.n	80047be <ai_platform_network_get_error+0x8e>
 80047c0:	f7ff feea 	bl	8004598 <_ai_platform_release_crc>
 80047c4:	f241 0010 	movw	r0, #4112	; 0x1010
 80047c8:	bd10      	pop	{r4, pc}
 80047ca:	4a0f      	ldr	r2, [pc, #60]	; (8004808 <ai_platform_network_get_error+0xd8>)
 80047cc:	2301      	movs	r3, #1
 80047ce:	6093      	str	r3, [r2, #8]
 80047d0:	6893      	ldr	r3, [r2, #8]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1fc      	bne.n	80047d0 <ai_platform_network_get_error+0xa0>
 80047d6:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <ai_platform_network_get_error+0xd0>)
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	6812      	ldr	r2, [r2, #0]
 80047dc:	4b09      	ldr	r3, [pc, #36]	; (8004804 <ai_platform_network_get_error+0xd4>)
 80047de:	429a      	cmp	r2, r3
 80047e0:	d107      	bne.n	80047f2 <ai_platform_network_get_error+0xc2>
 80047e2:	f7ff fed9 	bl	8004598 <_ai_platform_release_crc>
 80047e6:	f104 0010 	add.w	r0, r4, #16
 80047ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047ee:	f000 be8b 	b.w	8005508 <core_get_error>
 80047f2:	e7fe      	b.n	80047f2 <ai_platform_network_get_error+0xc2>
 80047f4:	a1c00100 	.word	0xa1c00100
 80047f8:	e0042000 	.word	0xe0042000
 80047fc:	58024000 	.word	0x58024000
 8004800:	f407a5c2 	.word	0xf407a5c2
 8004804:	b5e8b5cd 	.word	0xb5e8b5cd
 8004808:	40023000 	.word	0x40023000

0800480c <ai_platform_network_set_error>:
 800480c:	b110      	cbz	r0, 8004814 <ai_platform_network_set_error+0x8>
 800480e:	3010      	adds	r0, #16
 8004810:	f000 be80 	b.w	8005514 <core_set_error>
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop

08004818 <ai_platform_inputs_get>:
 8004818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800481c:	b085      	sub	sp, #20
 800481e:	9102      	str	r1, [sp, #8]
 8004820:	b1f0      	cbz	r0, 8004860 <ai_platform_inputs_get+0x48>
 8004822:	4b62      	ldr	r3, [pc, #392]	; (80049ac <ai_platform_inputs_get+0x194>)
 8004824:	6802      	ldr	r2, [r0, #0]
 8004826:	429a      	cmp	r2, r3
 8004828:	4607      	mov	r7, r0
 800482a:	d119      	bne.n	8004860 <ai_platform_inputs_get+0x48>
 800482c:	f7ff feb2 	bl	8004594 <_ai_platform_acquire_crc>
 8004830:	4b5f      	ldr	r3, [pc, #380]	; (80049b0 <ai_platform_inputs_get+0x198>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800483c:	d03d      	beq.n	80048ba <ai_platform_inputs_get+0xa2>
 800483e:	4a5d      	ldr	r2, [pc, #372]	; (80049b4 <ai_platform_inputs_get+0x19c>)
 8004840:	2301      	movs	r3, #1
 8004842:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004846:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800484a:	2b00      	cmp	r3, #0
 800484c:	d1fb      	bne.n	8004846 <ai_platform_inputs_get+0x2e>
 800484e:	4b5a      	ldr	r3, [pc, #360]	; (80049b8 <ai_platform_inputs_get+0x1a0>)
 8004850:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004854:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004858:	4b58      	ldr	r3, [pc, #352]	; (80049bc <ai_platform_inputs_get+0x1a4>)
 800485a:	429a      	cmp	r2, r3
 800485c:	d039      	beq.n	80048d2 <ai_platform_inputs_get+0xba>
 800485e:	e7fe      	b.n	800485e <ai_platform_inputs_get+0x46>
 8004860:	f7ff fe98 	bl	8004594 <_ai_platform_acquire_crc>
 8004864:	4b52      	ldr	r3, [pc, #328]	; (80049b0 <ai_platform_inputs_get+0x198>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800486c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004870:	d010      	beq.n	8004894 <ai_platform_inputs_get+0x7c>
 8004872:	4a50      	ldr	r2, [pc, #320]	; (80049b4 <ai_platform_inputs_get+0x19c>)
 8004874:	2301      	movs	r3, #1
 8004876:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800487a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1fb      	bne.n	800487a <ai_platform_inputs_get+0x62>
 8004882:	4b4d      	ldr	r3, [pc, #308]	; (80049b8 <ai_platform_inputs_get+0x1a0>)
 8004884:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004888:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800488c:	4b4b      	ldr	r3, [pc, #300]	; (80049bc <ai_platform_inputs_get+0x1a4>)
 800488e:	429a      	cmp	r2, r3
 8004890:	d00d      	beq.n	80048ae <ai_platform_inputs_get+0x96>
 8004892:	e7fe      	b.n	8004892 <ai_platform_inputs_get+0x7a>
 8004894:	4a4a      	ldr	r2, [pc, #296]	; (80049c0 <ai_platform_inputs_get+0x1a8>)
 8004896:	2301      	movs	r3, #1
 8004898:	6093      	str	r3, [r2, #8]
 800489a:	6893      	ldr	r3, [r2, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1fc      	bne.n	800489a <ai_platform_inputs_get+0x82>
 80048a0:	4b45      	ldr	r3, [pc, #276]	; (80049b8 <ai_platform_inputs_get+0x1a0>)
 80048a2:	6013      	str	r3, [r2, #0]
 80048a4:	6812      	ldr	r2, [r2, #0]
 80048a6:	4b45      	ldr	r3, [pc, #276]	; (80049bc <ai_platform_inputs_get+0x1a4>)
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d000      	beq.n	80048ae <ai_platform_inputs_get+0x96>
 80048ac:	e7fe      	b.n	80048ac <ai_platform_inputs_get+0x94>
 80048ae:	f7ff fe73 	bl	8004598 <_ai_platform_release_crc>
 80048b2:	2000      	movs	r0, #0
 80048b4:	b005      	add	sp, #20
 80048b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ba:	4a41      	ldr	r2, [pc, #260]	; (80049c0 <ai_platform_inputs_get+0x1a8>)
 80048bc:	2301      	movs	r3, #1
 80048be:	6093      	str	r3, [r2, #8]
 80048c0:	6893      	ldr	r3, [r2, #8]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1fc      	bne.n	80048c0 <ai_platform_inputs_get+0xa8>
 80048c6:	4b3c      	ldr	r3, [pc, #240]	; (80049b8 <ai_platform_inputs_get+0x1a0>)
 80048c8:	6013      	str	r3, [r2, #0]
 80048ca:	6812      	ldr	r2, [r2, #0]
 80048cc:	4b3b      	ldr	r3, [pc, #236]	; (80049bc <ai_platform_inputs_get+0x1a4>)
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d155      	bne.n	800497e <ai_platform_inputs_get+0x166>
 80048d2:	f7ff fe61 	bl	8004598 <_ai_platform_release_crc>
 80048d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d051      	beq.n	8004980 <ai_platform_inputs_get+0x168>
 80048dc:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 80048e0:	f1ba 0f00 	cmp.w	sl, #0
 80048e4:	d04c      	beq.n	8004980 <ai_platform_inputs_get+0x168>
 80048e6:	f04f 0b00 	mov.w	fp, #0
 80048ea:	465d      	mov	r5, fp
 80048ec:	9703      	str	r7, [sp, #12]
 80048ee:	e016      	b.n	800491e <ai_platform_inputs_get+0x106>
 80048f0:	9901      	ldr	r1, [sp, #4]
 80048f2:	2301      	movs	r3, #1
 80048f4:	507b      	str	r3, [r7, r1]
 80048f6:	69b1      	ldr	r1, [r6, #24]
 80048f8:	6849      	ldr	r1, [r1, #4]
 80048fa:	6121      	str	r1, [r4, #16]
 80048fc:	f04f 0301 	mov.w	r3, #1
 8004900:	7523      	strb	r3, [r4, #20]
 8004902:	e9c4 c200 	strd	ip, r2, [r4]
 8004906:	6962      	ldr	r2, [r4, #20]
 8004908:	60a0      	str	r0, [r4, #8]
 800490a:	2300      	movs	r3, #0
 800490c:	f369 221f 	bfi	r2, r9, #8, #24
 8004910:	f8c4 8018 	str.w	r8, [r4, #24]
 8004914:	60e3      	str	r3, [r4, #12]
 8004916:	3501      	adds	r5, #1
 8004918:	f10b 0b1c 	add.w	fp, fp, #28
 800491c:	6162      	str	r2, [r4, #20]
 800491e:	f8ba 3000 	ldrh.w	r3, [sl]
 8004922:	42ab      	cmp	r3, r5
 8004924:	b2aa      	uxth	r2, r5
 8004926:	d93a      	bls.n	800499e <ai_platform_inputs_get+0x186>
 8004928:	f8da 3004 	ldr.w	r3, [sl, #4]
 800492c:	00e9      	lsls	r1, r5, #3
 800492e:	9101      	str	r1, [sp, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d034      	beq.n	800499e <ai_platform_inputs_get+0x186>
 8004934:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8004938:	2e00      	cmp	r6, #0
 800493a:	d030      	beq.n	800499e <ai_platform_inputs_get+0x186>
 800493c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004940:	69b2      	ldr	r2, [r6, #24]
 8004942:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8004946:	6810      	ldr	r0, [r2, #0]
 8004948:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800494c:	68b3      	ldr	r3, [r6, #8]
 800494e:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8004952:	f002 f929 	bl	8006ba8 <ai_array_to_buffer_fmt>
 8004956:	69b1      	ldr	r1, [r6, #24]
 8004958:	4684      	mov	ip, r0
 800495a:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 800495e:	688a      	ldr	r2, [r1, #8]
 8004960:	445c      	add	r4, fp
 8004962:	2800      	cmp	r0, #0
 8004964:	d0c8      	beq.n	80048f8 <ai_platform_inputs_get+0xe0>
 8004966:	2100      	movs	r1, #0
 8004968:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800496c:	6831      	ldr	r1, [r6, #0]
 800496e:	6041      	str	r1, [r0, #4]
 8004970:	b111      	cbz	r1, 8004978 <ai_platform_inputs_get+0x160>
 8004972:	8849      	ldrh	r1, [r1, #2]
 8004974:	2900      	cmp	r1, #0
 8004976:	d1bb      	bne.n	80048f0 <ai_platform_inputs_get+0xd8>
 8004978:	69b1      	ldr	r1, [r6, #24]
 800497a:	2000      	movs	r0, #0
 800497c:	e7bc      	b.n	80048f8 <ai_platform_inputs_get+0xe0>
 800497e:	e7fe      	b.n	800497e <ai_platform_inputs_get+0x166>
 8004980:	2218      	movs	r2, #24
 8004982:	2111      	movs	r1, #17
 8004984:	f107 0010 	add.w	r0, r7, #16
 8004988:	f000 fdc4 	bl	8005514 <core_set_error>
 800498c:	2200      	movs	r2, #0
 800498e:	4610      	mov	r0, r2
 8004990:	9b02      	ldr	r3, [sp, #8]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d08e      	beq.n	80048b4 <ai_platform_inputs_get+0x9c>
 8004996:	801a      	strh	r2, [r3, #0]
 8004998:	b005      	add	sp, #20
 800499a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800499e:	9f03      	ldr	r7, [sp, #12]
 80049a0:	2a00      	cmp	r2, #0
 80049a2:	d0ed      	beq.n	8004980 <ai_platform_inputs_get+0x168>
 80049a4:	f8da 3008 	ldr.w	r3, [sl, #8]
 80049a8:	6858      	ldr	r0, [r3, #4]
 80049aa:	e7f1      	b.n	8004990 <ai_platform_inputs_get+0x178>
 80049ac:	a1c00100 	.word	0xa1c00100
 80049b0:	e0042000 	.word	0xe0042000
 80049b4:	58024000 	.word	0x58024000
 80049b8:	f407a5c2 	.word	0xf407a5c2
 80049bc:	b5e8b5cd 	.word	0xb5e8b5cd
 80049c0:	40023000 	.word	0x40023000

080049c4 <ai_platform_outputs_get>:
 80049c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049c8:	b085      	sub	sp, #20
 80049ca:	9102      	str	r1, [sp, #8]
 80049cc:	b1f0      	cbz	r0, 8004a0c <ai_platform_outputs_get+0x48>
 80049ce:	4b5f      	ldr	r3, [pc, #380]	; (8004b4c <ai_platform_outputs_get+0x188>)
 80049d0:	6802      	ldr	r2, [r0, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	4607      	mov	r7, r0
 80049d6:	d119      	bne.n	8004a0c <ai_platform_outputs_get+0x48>
 80049d8:	f7ff fddc 	bl	8004594 <_ai_platform_acquire_crc>
 80049dc:	4b5c      	ldr	r3, [pc, #368]	; (8004b50 <ai_platform_outputs_get+0x18c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049e8:	d03d      	beq.n	8004a66 <ai_platform_outputs_get+0xa2>
 80049ea:	4a5a      	ldr	r2, [pc, #360]	; (8004b54 <ai_platform_outputs_get+0x190>)
 80049ec:	2301      	movs	r3, #1
 80049ee:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80049f2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1fb      	bne.n	80049f2 <ai_platform_outputs_get+0x2e>
 80049fa:	4b57      	ldr	r3, [pc, #348]	; (8004b58 <ai_platform_outputs_get+0x194>)
 80049fc:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004a00:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004a04:	4b55      	ldr	r3, [pc, #340]	; (8004b5c <ai_platform_outputs_get+0x198>)
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d039      	beq.n	8004a7e <ai_platform_outputs_get+0xba>
 8004a0a:	e7fe      	b.n	8004a0a <ai_platform_outputs_get+0x46>
 8004a0c:	f7ff fdc2 	bl	8004594 <_ai_platform_acquire_crc>
 8004a10:	4b4f      	ldr	r3, [pc, #316]	; (8004b50 <ai_platform_outputs_get+0x18c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a1c:	d010      	beq.n	8004a40 <ai_platform_outputs_get+0x7c>
 8004a1e:	4a4d      	ldr	r2, [pc, #308]	; (8004b54 <ai_platform_outputs_get+0x190>)
 8004a20:	2301      	movs	r3, #1
 8004a22:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004a26:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1fb      	bne.n	8004a26 <ai_platform_outputs_get+0x62>
 8004a2e:	4b4a      	ldr	r3, [pc, #296]	; (8004b58 <ai_platform_outputs_get+0x194>)
 8004a30:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004a34:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004a38:	4b48      	ldr	r3, [pc, #288]	; (8004b5c <ai_platform_outputs_get+0x198>)
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d00d      	beq.n	8004a5a <ai_platform_outputs_get+0x96>
 8004a3e:	e7fe      	b.n	8004a3e <ai_platform_outputs_get+0x7a>
 8004a40:	4a47      	ldr	r2, [pc, #284]	; (8004b60 <ai_platform_outputs_get+0x19c>)
 8004a42:	2301      	movs	r3, #1
 8004a44:	6093      	str	r3, [r2, #8]
 8004a46:	6893      	ldr	r3, [r2, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1fc      	bne.n	8004a46 <ai_platform_outputs_get+0x82>
 8004a4c:	4b42      	ldr	r3, [pc, #264]	; (8004b58 <ai_platform_outputs_get+0x194>)
 8004a4e:	6013      	str	r3, [r2, #0]
 8004a50:	6812      	ldr	r2, [r2, #0]
 8004a52:	4b42      	ldr	r3, [pc, #264]	; (8004b5c <ai_platform_outputs_get+0x198>)
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d000      	beq.n	8004a5a <ai_platform_outputs_get+0x96>
 8004a58:	e7fe      	b.n	8004a58 <ai_platform_outputs_get+0x94>
 8004a5a:	f7ff fd9d 	bl	8004598 <_ai_platform_release_crc>
 8004a5e:	2000      	movs	r0, #0
 8004a60:	b005      	add	sp, #20
 8004a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a66:	4a3e      	ldr	r2, [pc, #248]	; (8004b60 <ai_platform_outputs_get+0x19c>)
 8004a68:	2301      	movs	r3, #1
 8004a6a:	6093      	str	r3, [r2, #8]
 8004a6c:	6893      	ldr	r3, [r2, #8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1fc      	bne.n	8004a6c <ai_platform_outputs_get+0xa8>
 8004a72:	4b39      	ldr	r3, [pc, #228]	; (8004b58 <ai_platform_outputs_get+0x194>)
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	6812      	ldr	r2, [r2, #0]
 8004a78:	4b38      	ldr	r3, [pc, #224]	; (8004b5c <ai_platform_outputs_get+0x198>)
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d150      	bne.n	8004b20 <ai_platform_outputs_get+0x15c>
 8004a7e:	f7ff fd8b 	bl	8004598 <_ai_platform_release_crc>
 8004a82:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d958      	bls.n	8004b3a <ai_platform_outputs_get+0x176>
 8004a88:	f04f 0b00 	mov.w	fp, #0
 8004a8c:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8004a90:	9703      	str	r7, [sp, #12]
 8004a92:	465d      	mov	r5, fp
 8004a94:	e016      	b.n	8004ac4 <ai_platform_outputs_get+0x100>
 8004a96:	9901      	ldr	r1, [sp, #4]
 8004a98:	2301      	movs	r3, #1
 8004a9a:	507b      	str	r3, [r7, r1]
 8004a9c:	69b1      	ldr	r1, [r6, #24]
 8004a9e:	6849      	ldr	r1, [r1, #4]
 8004aa0:	6121      	str	r1, [r4, #16]
 8004aa2:	f04f 0301 	mov.w	r3, #1
 8004aa6:	7523      	strb	r3, [r4, #20]
 8004aa8:	e9c4 c200 	strd	ip, r2, [r4]
 8004aac:	6962      	ldr	r2, [r4, #20]
 8004aae:	60a0      	str	r0, [r4, #8]
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	f369 221f 	bfi	r2, r9, #8, #24
 8004ab6:	f8c4 8018 	str.w	r8, [r4, #24]
 8004aba:	60e3      	str	r3, [r4, #12]
 8004abc:	3501      	adds	r5, #1
 8004abe:	f10b 0b1c 	add.w	fp, fp, #28
 8004ac2:	6162      	str	r2, [r4, #20]
 8004ac4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004ac8:	42ab      	cmp	r3, r5
 8004aca:	b2aa      	uxth	r2, r5
 8004acc:	d929      	bls.n	8004b22 <ai_platform_outputs_get+0x15e>
 8004ace:	f8da 3010 	ldr.w	r3, [sl, #16]
 8004ad2:	00e9      	lsls	r1, r5, #3
 8004ad4:	9101      	str	r1, [sp, #4]
 8004ad6:	b323      	cbz	r3, 8004b22 <ai_platform_outputs_get+0x15e>
 8004ad8:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8004adc:	b30e      	cbz	r6, 8004b22 <ai_platform_outputs_get+0x15e>
 8004ade:	f8da 3014 	ldr.w	r3, [sl, #20]
 8004ae2:	69b2      	ldr	r2, [r6, #24]
 8004ae4:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8004ae8:	6810      	ldr	r0, [r2, #0]
 8004aea:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8004aee:	68b3      	ldr	r3, [r6, #8]
 8004af0:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8004af4:	f002 f858 	bl	8006ba8 <ai_array_to_buffer_fmt>
 8004af8:	69b1      	ldr	r1, [r6, #24]
 8004afa:	4684      	mov	ip, r0
 8004afc:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8004b00:	688a      	ldr	r2, [r1, #8]
 8004b02:	445c      	add	r4, fp
 8004b04:	2800      	cmp	r0, #0
 8004b06:	d0ca      	beq.n	8004a9e <ai_platform_outputs_get+0xda>
 8004b08:	2100      	movs	r1, #0
 8004b0a:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8004b0e:	6831      	ldr	r1, [r6, #0]
 8004b10:	6041      	str	r1, [r0, #4]
 8004b12:	b111      	cbz	r1, 8004b1a <ai_platform_outputs_get+0x156>
 8004b14:	8849      	ldrh	r1, [r1, #2]
 8004b16:	2900      	cmp	r1, #0
 8004b18:	d1bd      	bne.n	8004a96 <ai_platform_outputs_get+0xd2>
 8004b1a:	69b1      	ldr	r1, [r6, #24]
 8004b1c:	2000      	movs	r0, #0
 8004b1e:	e7be      	b.n	8004a9e <ai_platform_outputs_get+0xda>
 8004b20:	e7fe      	b.n	8004b20 <ai_platform_outputs_get+0x15c>
 8004b22:	9f03      	ldr	r7, [sp, #12]
 8004b24:	b14a      	cbz	r2, 8004b3a <ai_platform_outputs_get+0x176>
 8004b26:	f8da 3014 	ldr.w	r3, [sl, #20]
 8004b2a:	6858      	ldr	r0, [r3, #4]
 8004b2c:	9b02      	ldr	r3, [sp, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d096      	beq.n	8004a60 <ai_platform_outputs_get+0x9c>
 8004b32:	801a      	strh	r2, [r3, #0]
 8004b34:	b005      	add	sp, #20
 8004b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b3a:	2218      	movs	r2, #24
 8004b3c:	2111      	movs	r1, #17
 8004b3e:	f107 0010 	add.w	r0, r7, #16
 8004b42:	f000 fce7 	bl	8005514 <core_set_error>
 8004b46:	2200      	movs	r2, #0
 8004b48:	4610      	mov	r0, r2
 8004b4a:	e7ef      	b.n	8004b2c <ai_platform_outputs_get+0x168>
 8004b4c:	a1c00100 	.word	0xa1c00100
 8004b50:	e0042000 	.word	0xe0042000
 8004b54:	58024000 	.word	0x58024000
 8004b58:	f407a5c2 	.word	0xf407a5c2
 8004b5c:	b5e8b5cd 	.word	0xb5e8b5cd
 8004b60:	40023000 	.word	0x40023000

08004b64 <ai_platform_network_create>:
 8004b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	4606      	mov	r6, r0
 8004b6c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8004b70:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 8004b74:	4615      	mov	r5, r2
 8004b76:	461f      	mov	r7, r3
 8004b78:	f7ff fd0c 	bl	8004594 <_ai_platform_acquire_crc>
 8004b7c:	b188      	cbz	r0, 8004ba2 <ai_platform_network_create+0x3e>
 8004b7e:	4a5d      	ldr	r2, [pc, #372]	; (8004cf4 <ai_platform_network_create+0x190>)
 8004b80:	6812      	ldr	r2, [r2, #0]
 8004b82:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004b86:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	d00e      	beq.n	8004bac <ai_platform_network_create+0x48>
 8004b8e:	4a5a      	ldr	r2, [pc, #360]	; (8004cf8 <ai_platform_network_create+0x194>)
 8004b90:	2118      	movs	r1, #24
 8004b92:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8004b96:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8004b9a:	2918      	cmp	r1, #24
 8004b9c:	d018      	beq.n	8004bd0 <ai_platform_network_create+0x6c>
 8004b9e:	f7ff fcfb 	bl	8004598 <_ai_platform_release_crc>
 8004ba2:	f244 1033 	movw	r0, #16691	; 0x4133
 8004ba6:	b003      	add	sp, #12
 8004ba8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004bac:	4a53      	ldr	r2, [pc, #332]	; (8004cfc <ai_platform_network_create+0x198>)
 8004bae:	2101      	movs	r1, #1
 8004bb0:	6091      	str	r1, [r2, #8]
 8004bb2:	2114      	movs	r1, #20
 8004bb4:	e001      	b.n	8004bba <ai_platform_network_create+0x56>
 8004bb6:	3901      	subs	r1, #1
 8004bb8:	d002      	beq.n	8004bc0 <ai_platform_network_create+0x5c>
 8004bba:	6894      	ldr	r4, [r2, #8]
 8004bbc:	2c00      	cmp	r4, #0
 8004bbe:	d1fa      	bne.n	8004bb6 <ai_platform_network_create+0x52>
 8004bc0:	4a4e      	ldr	r2, [pc, #312]	; (8004cfc <ai_platform_network_create+0x198>)
 8004bc2:	6891      	ldr	r1, [r2, #8]
 8004bc4:	b911      	cbnz	r1, 8004bcc <ai_platform_network_create+0x68>
 8004bc6:	6812      	ldr	r2, [r2, #0]
 8004bc8:	3201      	adds	r2, #1
 8004bca:	d008      	beq.n	8004bde <ai_platform_network_create+0x7a>
 8004bcc:	4618      	mov	r0, r3
 8004bce:	e7e6      	b.n	8004b9e <ai_platform_network_create+0x3a>
 8004bd0:	2101      	movs	r1, #1
 8004bd2:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8004bd6:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8004bda:	2900      	cmp	r1, #0
 8004bdc:	d1fb      	bne.n	8004bd6 <ai_platform_network_create+0x72>
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff fcda 	bl	8004598 <_ai_platform_release_crc>
 8004be4:	f7ff fcd6 	bl	8004594 <_ai_platform_acquire_crc>
 8004be8:	4b42      	ldr	r3, [pc, #264]	; (8004cf4 <ai_platform_network_create+0x190>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bf4:	d010      	beq.n	8004c18 <ai_platform_network_create+0xb4>
 8004bf6:	4b40      	ldr	r3, [pc, #256]	; (8004cf8 <ai_platform_network_create+0x194>)
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8004bfe:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 8004c02:	2900      	cmp	r1, #0
 8004c04:	d1fb      	bne.n	8004bfe <ai_platform_network_create+0x9a>
 8004c06:	4a3e      	ldr	r2, [pc, #248]	; (8004d00 <ai_platform_network_create+0x19c>)
 8004c08:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8004c0c:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8004c10:	4b3c      	ldr	r3, [pc, #240]	; (8004d04 <ai_platform_network_create+0x1a0>)
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d00c      	beq.n	8004c30 <ai_platform_network_create+0xcc>
 8004c16:	e7fe      	b.n	8004c16 <ai_platform_network_create+0xb2>
 8004c18:	4a38      	ldr	r2, [pc, #224]	; (8004cfc <ai_platform_network_create+0x198>)
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	6093      	str	r3, [r2, #8]
 8004c1e:	6893      	ldr	r3, [r2, #8]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1fc      	bne.n	8004c1e <ai_platform_network_create+0xba>
 8004c24:	4b36      	ldr	r3, [pc, #216]	; (8004d00 <ai_platform_network_create+0x19c>)
 8004c26:	6013      	str	r3, [r2, #0]
 8004c28:	6812      	ldr	r2, [r2, #0]
 8004c2a:	4b36      	ldr	r3, [pc, #216]	; (8004d04 <ai_platform_network_create+0x1a0>)
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d122      	bne.n	8004c76 <ai_platform_network_create+0x112>
 8004c30:	f7ff fcb2 	bl	8004598 <_ai_platform_release_crc>
 8004c34:	b38e      	cbz	r6, 8004c9a <ai_platform_network_create+0x136>
 8004c36:	4b34      	ldr	r3, [pc, #208]	; (8004d08 <ai_platform_network_create+0x1a4>)
 8004c38:	602b      	str	r3, [r5, #0]
 8004c3a:	6035      	str	r5, [r6, #0]
 8004c3c:	f000 fc62 	bl	8005504 <core_init>
 8004c40:	b1d0      	cbz	r0, 8004c78 <ai_platform_network_create+0x114>
 8004c42:	f7ff fca7 	bl	8004594 <_ai_platform_acquire_crc>
 8004c46:	4b2b      	ldr	r3, [pc, #172]	; (8004cf4 <ai_platform_network_create+0x190>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c52:	d025      	beq.n	8004ca0 <ai_platform_network_create+0x13c>
 8004c54:	4a28      	ldr	r2, [pc, #160]	; (8004cf8 <ai_platform_network_create+0x194>)
 8004c56:	2301      	movs	r3, #1
 8004c58:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004c5c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1fb      	bne.n	8004c5c <ai_platform_network_create+0xf8>
 8004c64:	4b26      	ldr	r3, [pc, #152]	; (8004d00 <ai_platform_network_create+0x19c>)
 8004c66:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004c6a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004c6e:	4b25      	ldr	r3, [pc, #148]	; (8004d04 <ai_platform_network_create+0x1a0>)
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d022      	beq.n	8004cba <ai_platform_network_create+0x156>
 8004c74:	e7fe      	b.n	8004c74 <ai_platform_network_create+0x110>
 8004c76:	e7fe      	b.n	8004c76 <ai_platform_network_create+0x112>
 8004c78:	2430      	movs	r4, #48	; 0x30
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	6033      	str	r3, [r6, #0]
 8004c7e:	2610      	movs	r6, #16
 8004c80:	464a      	mov	r2, r9
 8004c82:	4641      	mov	r1, r8
 8004c84:	4638      	mov	r0, r7
 8004c86:	f002 f835 	bl	8006cf4 <ai_version_get>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	f364 0007 	bfi	r0, r4, #0, #8
 8004c92:	64ab      	str	r3, [r5, #72]	; 0x48
 8004c94:	f366 201f 	bfi	r0, r6, #8, #24
 8004c98:	e785      	b.n	8004ba6 <ai_platform_network_create+0x42>
 8004c9a:	f241 0010 	movw	r0, #4112	; 0x1010
 8004c9e:	e782      	b.n	8004ba6 <ai_platform_network_create+0x42>
 8004ca0:	4a16      	ldr	r2, [pc, #88]	; (8004cfc <ai_platform_network_create+0x198>)
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	6093      	str	r3, [r2, #8]
 8004ca6:	6893      	ldr	r3, [r2, #8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1fc      	bne.n	8004ca6 <ai_platform_network_create+0x142>
 8004cac:	4b14      	ldr	r3, [pc, #80]	; (8004d00 <ai_platform_network_create+0x19c>)
 8004cae:	6013      	str	r3, [r2, #0]
 8004cb0:	6812      	ldr	r2, [r2, #0]
 8004cb2:	4b14      	ldr	r3, [pc, #80]	; (8004d04 <ai_platform_network_create+0x1a0>)
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d000      	beq.n	8004cba <ai_platform_network_create+0x156>
 8004cb8:	e7fe      	b.n	8004cb8 <ai_platform_network_create+0x154>
 8004cba:	f7ff fc6d 	bl	8004598 <_ai_platform_release_crc>
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	4641      	mov	r1, r8
 8004cc2:	4638      	mov	r0, r7
 8004cc4:	f002 f816 	bl	8006cf4 <ai_version_get>
 8004cc8:	2200      	movs	r2, #0
 8004cca:	4604      	mov	r4, r0
 8004ccc:	2105      	movs	r1, #5
 8004cce:	2001      	movs	r0, #1
 8004cd0:	f002 f810 	bl	8006cf4 <ai_version_get>
 8004cd4:	4284      	cmp	r4, r0
 8004cd6:	d001      	beq.n	8004cdc <ai_platform_network_create+0x178>
 8004cd8:	2401      	movs	r4, #1
 8004cda:	e7ce      	b.n	8004c7a <ai_platform_network_create+0x116>
 8004cdc:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <ai_platform_network_create+0x1a8>)
 8004cde:	9301      	str	r3, [sp, #4]
 8004ce0:	a801      	add	r0, sp, #4
 8004ce2:	f000 fc23 	bl	800552c <ai_check_custom_types>
 8004ce6:	b110      	cbz	r0, 8004cee <ai_platform_network_create+0x18a>
 8004ce8:	2600      	movs	r6, #0
 8004cea:	4634      	mov	r4, r6
 8004cec:	e7c8      	b.n	8004c80 <ai_platform_network_create+0x11c>
 8004cee:	2402      	movs	r4, #2
 8004cf0:	e7c3      	b.n	8004c7a <ai_platform_network_create+0x116>
 8004cf2:	bf00      	nop
 8004cf4:	e0042000 	.word	0xe0042000
 8004cf8:	58024000 	.word	0x58024000
 8004cfc:	40023000 	.word	0x40023000
 8004d00:	f407a5c2 	.word	0xf407a5c2
 8004d04:	b5e8b5cd 	.word	0xb5e8b5cd
 8004d08:	a1c00100 	.word	0xa1c00100
 8004d0c:	84048403 	.word	0x84048403

08004d10 <ai_platform_network_init>:
 8004d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d14:	b1f8      	cbz	r0, 8004d56 <ai_platform_network_init+0x46>
 8004d16:	4b6e      	ldr	r3, [pc, #440]	; (8004ed0 <ai_platform_network_init+0x1c0>)
 8004d18:	6802      	ldr	r2, [r0, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	4604      	mov	r4, r0
 8004d1e:	d11a      	bne.n	8004d56 <ai_platform_network_init+0x46>
 8004d20:	460e      	mov	r6, r1
 8004d22:	f7ff fc37 	bl	8004594 <_ai_platform_acquire_crc>
 8004d26:	4b6b      	ldr	r3, [pc, #428]	; (8004ed4 <ai_platform_network_init+0x1c4>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d32:	d03d      	beq.n	8004db0 <ai_platform_network_init+0xa0>
 8004d34:	4a68      	ldr	r2, [pc, #416]	; (8004ed8 <ai_platform_network_init+0x1c8>)
 8004d36:	2301      	movs	r3, #1
 8004d38:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004d3c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1fb      	bne.n	8004d3c <ai_platform_network_init+0x2c>
 8004d44:	4b65      	ldr	r3, [pc, #404]	; (8004edc <ai_platform_network_init+0x1cc>)
 8004d46:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004d4a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004d4e:	4b64      	ldr	r3, [pc, #400]	; (8004ee0 <ai_platform_network_init+0x1d0>)
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d039      	beq.n	8004dc8 <ai_platform_network_init+0xb8>
 8004d54:	e7fe      	b.n	8004d54 <ai_platform_network_init+0x44>
 8004d56:	f7ff fc1d 	bl	8004594 <_ai_platform_acquire_crc>
 8004d5a:	4b5e      	ldr	r3, [pc, #376]	; (8004ed4 <ai_platform_network_init+0x1c4>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d66:	d010      	beq.n	8004d8a <ai_platform_network_init+0x7a>
 8004d68:	4a5b      	ldr	r2, [pc, #364]	; (8004ed8 <ai_platform_network_init+0x1c8>)
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004d70:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1fb      	bne.n	8004d70 <ai_platform_network_init+0x60>
 8004d78:	4b58      	ldr	r3, [pc, #352]	; (8004edc <ai_platform_network_init+0x1cc>)
 8004d7a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004d7e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004d82:	4b57      	ldr	r3, [pc, #348]	; (8004ee0 <ai_platform_network_init+0x1d0>)
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d00d      	beq.n	8004da4 <ai_platform_network_init+0x94>
 8004d88:	e7fe      	b.n	8004d88 <ai_platform_network_init+0x78>
 8004d8a:	4a56      	ldr	r2, [pc, #344]	; (8004ee4 <ai_platform_network_init+0x1d4>)
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	6093      	str	r3, [r2, #8]
 8004d90:	6893      	ldr	r3, [r2, #8]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1fc      	bne.n	8004d90 <ai_platform_network_init+0x80>
 8004d96:	4b51      	ldr	r3, [pc, #324]	; (8004edc <ai_platform_network_init+0x1cc>)
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	6812      	ldr	r2, [r2, #0]
 8004d9c:	4b50      	ldr	r3, [pc, #320]	; (8004ee0 <ai_platform_network_init+0x1d0>)
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d000      	beq.n	8004da4 <ai_platform_network_init+0x94>
 8004da2:	e7fe      	b.n	8004da2 <ai_platform_network_init+0x92>
 8004da4:	f7ff fbf8 	bl	8004598 <_ai_platform_release_crc>
 8004da8:	2600      	movs	r6, #0
 8004daa:	4630      	mov	r0, r6
 8004dac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004db0:	4a4c      	ldr	r2, [pc, #304]	; (8004ee4 <ai_platform_network_init+0x1d4>)
 8004db2:	2301      	movs	r3, #1
 8004db4:	6093      	str	r3, [r2, #8]
 8004db6:	6893      	ldr	r3, [r2, #8]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1fc      	bne.n	8004db6 <ai_platform_network_init+0xa6>
 8004dbc:	4b47      	ldr	r3, [pc, #284]	; (8004edc <ai_platform_network_init+0x1cc>)
 8004dbe:	6013      	str	r3, [r2, #0]
 8004dc0:	6812      	ldr	r2, [r2, #0]
 8004dc2:	4b47      	ldr	r3, [pc, #284]	; (8004ee0 <ai_platform_network_init+0x1d0>)
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d11c      	bne.n	8004e02 <ai_platform_network_init+0xf2>
 8004dc8:	f7ff fbe6 	bl	8004598 <_ai_platform_release_crc>
 8004dcc:	2e00      	cmp	r6, #0
 8004dce:	d06f      	beq.n	8004eb0 <ai_platform_network_init+0x1a0>
 8004dd0:	4b45      	ldr	r3, [pc, #276]	; (8004ee8 <ai_platform_network_init+0x1d8>)
 8004dd2:	6832      	ldr	r2, [r6, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d115      	bne.n	8004e04 <ai_platform_network_init+0xf4>
 8004dd8:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8004ddc:	6933      	ldr	r3, [r6, #16]
 8004dde:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 8004de2:	89f7      	ldrh	r7, [r6, #14]
 8004de4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004de6:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8004dea:	2303      	movs	r3, #3
 8004dec:	84e7      	strh	r7, [r4, #38]	; 0x26
 8004dee:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 8004df2:	60e3      	str	r3, [r4, #12]
 8004df4:	4620      	mov	r0, r4
 8004df6:	4626      	mov	r6, r4
 8004df8:	f000 fbc2 	bl	8005580 <ai_layers_init_all>
 8004dfc:	4630      	mov	r0, r6
 8004dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e02:	e7fe      	b.n	8004e02 <ai_platform_network_init+0xf2>
 8004e04:	2101      	movs	r1, #1
 8004e06:	4630      	mov	r0, r6
 8004e08:	4635      	mov	r5, r6
 8004e0a:	6876      	ldr	r6, [r6, #4]
 8004e0c:	f7ff fb74 	bl	80044f8 <ai_buffer_get_size>
 8004e10:	f105 081c 	add.w	r8, r5, #28
 8004e14:	4681      	mov	r9, r0
 8004e16:	2101      	movs	r1, #1
 8004e18:	4640      	mov	r0, r8
 8004e1a:	6a2f      	ldr	r7, [r5, #32]
 8004e1c:	f7ff fb6c 	bl	80044f8 <ai_buffer_get_size>
 8004e20:	f1b9 0f00 	cmp.w	r9, #0
 8004e24:	d025      	beq.n	8004e72 <ai_platform_network_init+0x162>
 8004e26:	2201      	movs	r2, #1
 8004e28:	4696      	mov	lr, r2
 8004e2a:	bb30      	cbnz	r0, 8004e7a <ai_platform_network_init+0x16a>
 8004e2c:	4680      	mov	r8, r0
 8004e2e:	4607      	mov	r7, r0
 8004e30:	b376      	cbz	r6, 8004e90 <ai_platform_network_init+0x180>
 8004e32:	8be3      	ldrh	r3, [r4, #30]
 8004e34:	4573      	cmp	r3, lr
 8004e36:	d323      	bcc.n	8004e80 <ai_platform_network_init+0x170>
 8004e38:	b142      	cbz	r2, 8004e4c <ai_platform_network_init+0x13c>
 8004e3a:	46ac      	mov	ip, r5
 8004e3c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004e40:	6a25      	ldr	r5, [r4, #32]
 8004e42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e44:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8004e48:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004e4c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004e4e:	f8a4 e01e 	strh.w	lr, [r4, #30]
 8004e52:	2600      	movs	r6, #0
 8004e54:	42bb      	cmp	r3, r7
 8004e56:	83a6      	strh	r6, [r4, #28]
 8004e58:	d323      	bcc.n	8004ea2 <ai_platform_network_init+0x192>
 8004e5a:	b37f      	cbz	r7, 8004ebc <ai_platform_network_init+0x1ac>
 8004e5c:	46c4      	mov	ip, r8
 8004e5e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004e62:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004e64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e66:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8004e6a:	46b6      	mov	lr, r6
 8004e6c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8004e70:	e7bb      	b.n	8004dea <ai_platform_network_init+0xda>
 8004e72:	464a      	mov	r2, r9
 8004e74:	46ce      	mov	lr, r9
 8004e76:	464d      	mov	r5, r9
 8004e78:	e7d7      	b.n	8004e2a <ai_platform_network_init+0x11a>
 8004e7a:	b30f      	cbz	r7, 8004ec0 <ai_platform_network_init+0x1b0>
 8004e7c:	2701      	movs	r7, #1
 8004e7e:	e7d7      	b.n	8004e30 <ai_platform_network_init+0x120>
 8004e80:	2212      	movs	r2, #18
 8004e82:	2116      	movs	r1, #22
 8004e84:	f104 0010 	add.w	r0, r4, #16
 8004e88:	f000 fb44 	bl	8005514 <core_set_error>
 8004e8c:	2600      	movs	r6, #0
 8004e8e:	e78c      	b.n	8004daa <ai_platform_network_init+0x9a>
 8004e90:	f1b9 0f00 	cmp.w	r9, #0
 8004e94:	d0cd      	beq.n	8004e32 <ai_platform_network_init+0x122>
 8004e96:	2110      	movs	r1, #16
 8004e98:	2212      	movs	r2, #18
 8004e9a:	1860      	adds	r0, r4, r1
 8004e9c:	f000 fb3a 	bl	8005514 <core_set_error>
 8004ea0:	e783      	b.n	8004daa <ai_platform_network_init+0x9a>
 8004ea2:	2213      	movs	r2, #19
 8004ea4:	2116      	movs	r1, #22
 8004ea6:	f104 0010 	add.w	r0, r4, #16
 8004eaa:	f000 fb33 	bl	8005514 <core_set_error>
 8004eae:	e77c      	b.n	8004daa <ai_platform_network_init+0x9a>
 8004eb0:	2110      	movs	r1, #16
 8004eb2:	2211      	movs	r2, #17
 8004eb4:	1860      	adds	r0, r4, r1
 8004eb6:	f000 fb2d 	bl	8005514 <core_set_error>
 8004eba:	e776      	b.n	8004daa <ai_platform_network_init+0x9a>
 8004ebc:	46be      	mov	lr, r7
 8004ebe:	e794      	b.n	8004dea <ai_platform_network_init+0xda>
 8004ec0:	2110      	movs	r1, #16
 8004ec2:	2213      	movs	r2, #19
 8004ec4:	1860      	adds	r0, r4, r1
 8004ec6:	f000 fb25 	bl	8005514 <core_set_error>
 8004eca:	463e      	mov	r6, r7
 8004ecc:	e76d      	b.n	8004daa <ai_platform_network_init+0x9a>
 8004ece:	bf00      	nop
 8004ed0:	a1c00100 	.word	0xa1c00100
 8004ed4:	e0042000 	.word	0xe0042000
 8004ed8:	58024000 	.word	0x58024000
 8004edc:	f407a5c2 	.word	0xf407a5c2
 8004ee0:	b5e8b5cd 	.word	0xb5e8b5cd
 8004ee4:	40023000 	.word	0x40023000
 8004ee8:	a1facade 	.word	0xa1facade

08004eec <ai_platform_network_post_init>:
 8004eec:	b538      	push	{r3, r4, r5, lr}
 8004eee:	b1f0      	cbz	r0, 8004f2e <ai_platform_network_post_init+0x42>
 8004ef0:	4b3c      	ldr	r3, [pc, #240]	; (8004fe4 <ai_platform_network_post_init+0xf8>)
 8004ef2:	6802      	ldr	r2, [r0, #0]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	d119      	bne.n	8004f2e <ai_platform_network_post_init+0x42>
 8004efa:	f7ff fb4b 	bl	8004594 <_ai_platform_acquire_crc>
 8004efe:	4b3a      	ldr	r3, [pc, #232]	; (8004fe8 <ai_platform_network_post_init+0xfc>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f0a:	d03b      	beq.n	8004f84 <ai_platform_network_post_init+0x98>
 8004f0c:	4a37      	ldr	r2, [pc, #220]	; (8004fec <ai_platform_network_post_init+0x100>)
 8004f0e:	2301      	movs	r3, #1
 8004f10:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004f14:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1fb      	bne.n	8004f14 <ai_platform_network_post_init+0x28>
 8004f1c:	4b34      	ldr	r3, [pc, #208]	; (8004ff0 <ai_platform_network_post_init+0x104>)
 8004f1e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004f22:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004f26:	4b33      	ldr	r3, [pc, #204]	; (8004ff4 <ai_platform_network_post_init+0x108>)
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d037      	beq.n	8004f9c <ai_platform_network_post_init+0xb0>
 8004f2c:	e7fe      	b.n	8004f2c <ai_platform_network_post_init+0x40>
 8004f2e:	f7ff fb31 	bl	8004594 <_ai_platform_acquire_crc>
 8004f32:	4b2d      	ldr	r3, [pc, #180]	; (8004fe8 <ai_platform_network_post_init+0xfc>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f3e:	d010      	beq.n	8004f62 <ai_platform_network_post_init+0x76>
 8004f40:	4a2a      	ldr	r2, [pc, #168]	; (8004fec <ai_platform_network_post_init+0x100>)
 8004f42:	2301      	movs	r3, #1
 8004f44:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004f48:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1fb      	bne.n	8004f48 <ai_platform_network_post_init+0x5c>
 8004f50:	4b27      	ldr	r3, [pc, #156]	; (8004ff0 <ai_platform_network_post_init+0x104>)
 8004f52:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004f56:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004f5a:	4b26      	ldr	r3, [pc, #152]	; (8004ff4 <ai_platform_network_post_init+0x108>)
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d00d      	beq.n	8004f7c <ai_platform_network_post_init+0x90>
 8004f60:	e7fe      	b.n	8004f60 <ai_platform_network_post_init+0x74>
 8004f62:	4a25      	ldr	r2, [pc, #148]	; (8004ff8 <ai_platform_network_post_init+0x10c>)
 8004f64:	2301      	movs	r3, #1
 8004f66:	6093      	str	r3, [r2, #8]
 8004f68:	6893      	ldr	r3, [r2, #8]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1fc      	bne.n	8004f68 <ai_platform_network_post_init+0x7c>
 8004f6e:	4b20      	ldr	r3, [pc, #128]	; (8004ff0 <ai_platform_network_post_init+0x104>)
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	6812      	ldr	r2, [r2, #0]
 8004f74:	4b1f      	ldr	r3, [pc, #124]	; (8004ff4 <ai_platform_network_post_init+0x108>)
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d000      	beq.n	8004f7c <ai_platform_network_post_init+0x90>
 8004f7a:	e7fe      	b.n	8004f7a <ai_platform_network_post_init+0x8e>
 8004f7c:	f7ff fb0c 	bl	8004598 <_ai_platform_release_crc>
 8004f80:	2000      	movs	r0, #0
 8004f82:	bd38      	pop	{r3, r4, r5, pc}
 8004f84:	4a1c      	ldr	r2, [pc, #112]	; (8004ff8 <ai_platform_network_post_init+0x10c>)
 8004f86:	2301      	movs	r3, #1
 8004f88:	6093      	str	r3, [r2, #8]
 8004f8a:	6893      	ldr	r3, [r2, #8]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1fc      	bne.n	8004f8a <ai_platform_network_post_init+0x9e>
 8004f90:	4b17      	ldr	r3, [pc, #92]	; (8004ff0 <ai_platform_network_post_init+0x104>)
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	6812      	ldr	r2, [r2, #0]
 8004f96:	4b17      	ldr	r3, [pc, #92]	; (8004ff4 <ai_platform_network_post_init+0x108>)
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d11a      	bne.n	8004fd2 <ai_platform_network_post_init+0xe6>
 8004f9c:	f7ff fafc 	bl	8004598 <_ai_platform_release_crc>
 8004fa0:	68e3      	ldr	r3, [r4, #12]
 8004fa2:	f013 0502 	ands.w	r5, r3, #2
 8004fa6:	d015      	beq.n	8004fd4 <ai_platform_network_post_init+0xe8>
 8004fa8:	4620      	mov	r0, r4
 8004faa:	f000 faf7 	bl	800559c <ai_layers_post_init_all>
 8004fae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004fb0:	b16b      	cbz	r3, 8004fce <ai_platform_network_post_init+0xe2>
 8004fb2:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8004fb4:	e007      	b.n	8004fc6 <ai_platform_network_post_init+0xda>
 8004fb6:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8004fba:	4798      	blx	r3
 8004fbc:	692b      	ldr	r3, [r5, #16]
 8004fbe:	42ab      	cmp	r3, r5
 8004fc0:	d005      	beq.n	8004fce <ai_platform_network_post_init+0xe2>
 8004fc2:	b123      	cbz	r3, 8004fce <ai_platform_network_post_init+0xe2>
 8004fc4:	461d      	mov	r5, r3
 8004fc6:	4629      	mov	r1, r5
 8004fc8:	2000      	movs	r0, #0
 8004fca:	2d00      	cmp	r5, #0
 8004fcc:	d1f3      	bne.n	8004fb6 <ai_platform_network_post_init+0xca>
 8004fce:	2001      	movs	r0, #1
 8004fd0:	bd38      	pop	{r3, r4, r5, pc}
 8004fd2:	e7fe      	b.n	8004fd2 <ai_platform_network_post_init+0xe6>
 8004fd4:	2210      	movs	r2, #16
 8004fd6:	2111      	movs	r1, #17
 8004fd8:	18a0      	adds	r0, r4, r2
 8004fda:	f000 fa9b 	bl	8005514 <core_set_error>
 8004fde:	4628      	mov	r0, r5
 8004fe0:	bd38      	pop	{r3, r4, r5, pc}
 8004fe2:	bf00      	nop
 8004fe4:	a1c00100 	.word	0xa1c00100
 8004fe8:	e0042000 	.word	0xe0042000
 8004fec:	58024000 	.word	0x58024000
 8004ff0:	f407a5c2 	.word	0xf407a5c2
 8004ff4:	b5e8b5cd 	.word	0xb5e8b5cd
 8004ff8:	40023000 	.word	0x40023000

08004ffc <ai_platform_network_process>:
 8004ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005000:	460e      	mov	r6, r1
 8005002:	b085      	sub	sp, #20
 8005004:	4693      	mov	fp, r2
 8005006:	4605      	mov	r5, r0
 8005008:	b120      	cbz	r0, 8005014 <ai_platform_network_process+0x18>
 800500a:	4bb8      	ldr	r3, [pc, #736]	; (80052ec <ai_platform_network_process+0x2f0>)
 800500c:	6802      	ldr	r2, [r0, #0]
 800500e:	429a      	cmp	r2, r3
 8005010:	bf18      	it	ne
 8005012:	2500      	movne	r5, #0
 8005014:	f7ff fabe 	bl	8004594 <_ai_platform_acquire_crc>
 8005018:	4bb5      	ldr	r3, [pc, #724]	; (80052f0 <ai_platform_network_process+0x2f4>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005024:	d010      	beq.n	8005048 <ai_platform_network_process+0x4c>
 8005026:	4ab3      	ldr	r2, [pc, #716]	; (80052f4 <ai_platform_network_process+0x2f8>)
 8005028:	2301      	movs	r3, #1
 800502a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800502e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1fb      	bne.n	800502e <ai_platform_network_process+0x32>
 8005036:	4bb0      	ldr	r3, [pc, #704]	; (80052f8 <ai_platform_network_process+0x2fc>)
 8005038:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800503c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005040:	4bae      	ldr	r3, [pc, #696]	; (80052fc <ai_platform_network_process+0x300>)
 8005042:	429a      	cmp	r2, r3
 8005044:	d00d      	beq.n	8005062 <ai_platform_network_process+0x66>
 8005046:	e7fe      	b.n	8005046 <ai_platform_network_process+0x4a>
 8005048:	4aad      	ldr	r2, [pc, #692]	; (8005300 <ai_platform_network_process+0x304>)
 800504a:	2301      	movs	r3, #1
 800504c:	6093      	str	r3, [r2, #8]
 800504e:	6893      	ldr	r3, [r2, #8]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1fc      	bne.n	800504e <ai_platform_network_process+0x52>
 8005054:	4ba8      	ldr	r3, [pc, #672]	; (80052f8 <ai_platform_network_process+0x2fc>)
 8005056:	6013      	str	r3, [r2, #0]
 8005058:	6812      	ldr	r2, [r2, #0]
 800505a:	4ba8      	ldr	r3, [pc, #672]	; (80052fc <ai_platform_network_process+0x300>)
 800505c:	429a      	cmp	r2, r3
 800505e:	f040 812c 	bne.w	80052ba <ai_platform_network_process+0x2be>
 8005062:	f7ff fa99 	bl	8004598 <_ai_platform_release_crc>
 8005066:	2d00      	cmp	r5, #0
 8005068:	f000 8154 	beq.w	8005314 <ai_platform_network_process+0x318>
 800506c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 800506e:	2b00      	cmp	r3, #0
 8005070:	f000 8124 	beq.w	80052bc <ai_platform_network_process+0x2c0>
 8005074:	68eb      	ldr	r3, [r5, #12]
 8005076:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	2700      	movs	r7, #0
 8005080:	2b03      	cmp	r3, #3
 8005082:	616f      	str	r7, [r5, #20]
 8005084:	f040 813e 	bne.w	8005304 <ai_platform_network_process+0x308>
 8005088:	2e00      	cmp	r6, #0
 800508a:	f000 811d 	beq.w	80052c8 <ai_platform_network_process+0x2cc>
 800508e:	f1ba 0f00 	cmp.w	sl, #0
 8005092:	f000 8119 	beq.w	80052c8 <ai_platform_network_process+0x2cc>
 8005096:	f8ba 3000 	ldrh.w	r3, [sl]
 800509a:	2b00      	cmp	r3, #0
 800509c:	f000 8114 	beq.w	80052c8 <ai_platform_network_process+0x2cc>
 80050a0:	69b3      	ldr	r3, [r6, #24]
 80050a2:	f8cd b00c 	str.w	fp, [sp, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	e9cd 3501 	strd	r3, r5, [sp, #4]
 80050ac:	f8da 3004 	ldr.w	r3, [sl, #4]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d072      	beq.n	800519a <ai_platform_network_process+0x19e>
 80050b4:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 80050b8:	2c00      	cmp	r4, #0
 80050ba:	d06e      	beq.n	800519a <ai_platform_network_process+0x19e>
 80050bc:	f8da 3008 	ldr.w	r3, [sl, #8]
 80050c0:	f8d3 9000 	ldr.w	r9, [r3]
 80050c4:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 80050c8:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80050cc:	f000 81de 	beq.w	800548c <ai_platform_network_process+0x490>
 80050d0:	69a3      	ldr	r3, [r4, #24]
 80050d2:	2101      	movs	r1, #1
 80050d4:	4630      	mov	r0, r6
 80050d6:	685d      	ldr	r5, [r3, #4]
 80050d8:	f7ff fa0e 	bl	80044f8 <ai_buffer_get_size>
 80050dc:	4285      	cmp	r5, r0
 80050de:	f0c0 811b 	bcc.w	8005318 <ai_platform_network_process+0x31c>
 80050e2:	68e0      	ldr	r0, [r4, #12]
 80050e4:	69b1      	ldr	r1, [r6, #24]
 80050e6:	68c2      	ldr	r2, [r0, #12]
 80050e8:	68cb      	ldr	r3, [r1, #12]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	f040 8114 	bne.w	8005318 <ai_platform_network_process+0x31c>
 80050f0:	6882      	ldr	r2, [r0, #8]
 80050f2:	688b      	ldr	r3, [r1, #8]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	f040 810f 	bne.w	8005318 <ai_platform_network_process+0x31c>
 80050fa:	6842      	ldr	r2, [r0, #4]
 80050fc:	684b      	ldr	r3, [r1, #4]
 80050fe:	429a      	cmp	r2, r3
 8005100:	f040 810a 	bne.w	8005318 <ai_platform_network_process+0x31c>
 8005104:	69a3      	ldr	r3, [r4, #24]
 8005106:	e9d3 0100 	ldrd	r0, r1, [r3]
 800510a:	f001 fde1 	bl	8006cd0 <ai_array_get_data_byte_size>
 800510e:	4605      	mov	r5, r0
 8005110:	4620      	mov	r0, r4
 8005112:	f001 fdf5 	bl	8006d00 <get_tensor_byte_size>
 8005116:	4285      	cmp	r5, r0
 8005118:	f0c0 80fe 	bcc.w	8005318 <ai_platform_network_process+0x31c>
 800511c:	69a3      	ldr	r3, [r4, #24]
 800511e:	6818      	ldr	r0, [r3, #0]
 8005120:	f001 fd42 	bl	8006ba8 <ai_array_to_buffer_fmt>
 8005124:	6833      	ldr	r3, [r6, #0]
 8005126:	4058      	eors	r0, r3
 8005128:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800512c:	f040 81b9 	bne.w	80054a2 <ai_platform_network_process+0x4a6>
 8005130:	6873      	ldr	r3, [r6, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	f000 81ac 	beq.w	8005490 <ai_platform_network_process+0x494>
 8005138:	69b3      	ldr	r3, [r6, #24]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 819c 	beq.w	800547a <ai_platform_network_process+0x47e>
 8005142:	9a01      	ldr	r2, [sp, #4]
 8005144:	429a      	cmp	r2, r3
 8005146:	bf38      	it	cc
 8005148:	461a      	movcc	r2, r3
 800514a:	4620      	mov	r0, r4
 800514c:	9201      	str	r2, [sp, #4]
 800514e:	f001 fdd7 	bl	8006d00 <get_tensor_byte_size>
 8005152:	f8c8 0008 	str.w	r0, [r8, #8]
 8005156:	69b3      	ldr	r3, [r6, #24]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	fb00 f303 	mul.w	r3, r0, r3
 800515e:	f8c8 300c 	str.w	r3, [r8, #12]
 8005162:	6871      	ldr	r1, [r6, #4]
 8005164:	f8c8 1004 	str.w	r1, [r8, #4]
 8005168:	440b      	add	r3, r1
 800516a:	f849 300b 	str.w	r3, [r9, fp]
 800516e:	69a0      	ldr	r0, [r4, #24]
 8005170:	6803      	ldr	r3, [r0, #0]
 8005172:	009a      	lsls	r2, r3, #2
 8005174:	f107 0701 	add.w	r7, r7, #1
 8005178:	f106 061c 	add.w	r6, r6, #28
 800517c:	f100 80af 	bmi.w	80052de <ai_platform_network_process+0x2e2>
 8005180:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8005184:	1a9b      	subs	r3, r3, r2
 8005186:	4419      	add	r1, r3
 8005188:	6081      	str	r1, [r0, #8]
 800518a:	69a3      	ldr	r3, [r4, #24]
 800518c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8005190:	60da      	str	r2, [r3, #12]
 8005192:	f8ba 3000 	ldrh.w	r3, [sl]
 8005196:	42bb      	cmp	r3, r7
 8005198:	d888      	bhi.n	80050ac <ai_platform_network_process+0xb0>
 800519a:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 800519e:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 80051a0:	f1bb 0f00 	cmp.w	fp, #0
 80051a4:	f000 8186 	beq.w	80054b4 <ai_platform_network_process+0x4b8>
 80051a8:	2a01      	cmp	r2, #1
 80051aa:	f240 815e 	bls.w	800546a <ai_platform_network_process+0x46e>
 80051ae:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 80051b2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 8157 	beq.w	800546a <ai_platform_network_process+0x46e>
 80051bc:	465e      	mov	r6, fp
 80051be:	2700      	movs	r7, #0
 80051c0:	462c      	mov	r4, r5
 80051c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f000 80b4 	beq.w	8005334 <ai_platform_network_process+0x338>
 80051cc:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 80051d0:	2d00      	cmp	r5, #0
 80051d2:	f000 80af 	beq.w	8005334 <ai_platform_network_process+0x338>
 80051d6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80051da:	f8d3 8000 	ldr.w	r8, [r3]
 80051de:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 80051e2:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 80051e6:	f000 8171 	beq.w	80054cc <ai_platform_network_process+0x4d0>
 80051ea:	69ab      	ldr	r3, [r5, #24]
 80051ec:	2101      	movs	r1, #1
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	9302      	str	r3, [sp, #8]
 80051f2:	4630      	mov	r0, r6
 80051f4:	f7ff f980 	bl	80044f8 <ai_buffer_get_size>
 80051f8:	9b02      	ldr	r3, [sp, #8]
 80051fa:	4283      	cmp	r3, r0
 80051fc:	f0c0 8134 	bcc.w	8005468 <ai_platform_network_process+0x46c>
 8005200:	68e8      	ldr	r0, [r5, #12]
 8005202:	69b1      	ldr	r1, [r6, #24]
 8005204:	68c2      	ldr	r2, [r0, #12]
 8005206:	68cb      	ldr	r3, [r1, #12]
 8005208:	429a      	cmp	r2, r3
 800520a:	f040 812d 	bne.w	8005468 <ai_platform_network_process+0x46c>
 800520e:	6882      	ldr	r2, [r0, #8]
 8005210:	688b      	ldr	r3, [r1, #8]
 8005212:	429a      	cmp	r2, r3
 8005214:	f040 8128 	bne.w	8005468 <ai_platform_network_process+0x46c>
 8005218:	6842      	ldr	r2, [r0, #4]
 800521a:	684b      	ldr	r3, [r1, #4]
 800521c:	429a      	cmp	r2, r3
 800521e:	f040 8123 	bne.w	8005468 <ai_platform_network_process+0x46c>
 8005222:	69ab      	ldr	r3, [r5, #24]
 8005224:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005228:	f001 fd52 	bl	8006cd0 <ai_array_get_data_byte_size>
 800522c:	9002      	str	r0, [sp, #8]
 800522e:	4628      	mov	r0, r5
 8005230:	f001 fd66 	bl	8006d00 <get_tensor_byte_size>
 8005234:	9b02      	ldr	r3, [sp, #8]
 8005236:	4283      	cmp	r3, r0
 8005238:	f0c0 8116 	bcc.w	8005468 <ai_platform_network_process+0x46c>
 800523c:	69ab      	ldr	r3, [r5, #24]
 800523e:	6818      	ldr	r0, [r3, #0]
 8005240:	f001 fcb2 	bl	8006ba8 <ai_array_to_buffer_fmt>
 8005244:	6833      	ldr	r3, [r6, #0]
 8005246:	4058      	eors	r0, r3
 8005248:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800524c:	f040 8136 	bne.w	80054bc <ai_platform_network_process+0x4c0>
 8005250:	6873      	ldr	r3, [r6, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 814d 	beq.w	80054f2 <ai_platform_network_process+0x4f6>
 8005258:	69b3      	ldr	r3, [r6, #24]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 813f 	beq.w	80054e0 <ai_platform_network_process+0x4e4>
 8005262:	9a01      	ldr	r2, [sp, #4]
 8005264:	429a      	cmp	r2, r3
 8005266:	bf38      	it	cc
 8005268:	461a      	movcc	r2, r3
 800526a:	4628      	mov	r0, r5
 800526c:	9201      	str	r2, [sp, #4]
 800526e:	f001 fd47 	bl	8006d00 <get_tensor_byte_size>
 8005272:	f8ca 0008 	str.w	r0, [sl, #8]
 8005276:	69b3      	ldr	r3, [r6, #24]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	fb00 f303 	mul.w	r3, r0, r3
 800527e:	f8ca 300c 	str.w	r3, [sl, #12]
 8005282:	6871      	ldr	r1, [r6, #4]
 8005284:	f8ca 1004 	str.w	r1, [sl, #4]
 8005288:	440b      	add	r3, r1
 800528a:	f848 300b 	str.w	r3, [r8, fp]
 800528e:	69a8      	ldr	r0, [r5, #24]
 8005290:	6803      	ldr	r3, [r0, #0]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	f107 0701 	add.w	r7, r7, #1
 8005298:	f106 061c 	add.w	r6, r6, #28
 800529c:	d445      	bmi.n	800532a <ai_platform_network_process+0x32e>
 800529e:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80052a2:	1a9b      	subs	r3, r3, r2
 80052a4:	4419      	add	r1, r3
 80052a6:	6081      	str	r1, [r0, #8]
 80052a8:	69ab      	ldr	r3, [r5, #24]
 80052aa:	f8da 2004 	ldr.w	r2, [sl, #4]
 80052ae:	60da      	str	r2, [r3, #12]
 80052b0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80052b4:	429f      	cmp	r7, r3
 80052b6:	d384      	bcc.n	80051c2 <ai_platform_network_process+0x1c6>
 80052b8:	e03c      	b.n	8005334 <ai_platform_network_process+0x338>
 80052ba:	e7fe      	b.n	80052ba <ai_platform_network_process+0x2be>
 80052bc:	68ea      	ldr	r2, [r5, #12]
 80052be:	616b      	str	r3, [r5, #20]
 80052c0:	f002 0203 	and.w	r2, r2, #3
 80052c4:	2a03      	cmp	r2, #3
 80052c6:	d11d      	bne.n	8005304 <ai_platform_network_process+0x308>
 80052c8:	2217      	movs	r2, #23
 80052ca:	2112      	movs	r1, #18
 80052cc:	f105 0010 	add.w	r0, r5, #16
 80052d0:	f000 f920 	bl	8005514 <core_set_error>
 80052d4:	2400      	movs	r4, #0
 80052d6:	4620      	mov	r0, r4
 80052d8:	b005      	add	sp, #20
 80052da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052de:	f8ba 3000 	ldrh.w	r3, [sl]
 80052e2:	429f      	cmp	r7, r3
 80052e4:	f4ff aee2 	bcc.w	80050ac <ai_platform_network_process+0xb0>
 80052e8:	e757      	b.n	800519a <ai_platform_network_process+0x19e>
 80052ea:	bf00      	nop
 80052ec:	a1c00100 	.word	0xa1c00100
 80052f0:	e0042000 	.word	0xe0042000
 80052f4:	58024000 	.word	0x58024000
 80052f8:	f407a5c2 	.word	0xf407a5c2
 80052fc:	b5e8b5cd 	.word	0xb5e8b5cd
 8005300:	40023000 	.word	0x40023000
 8005304:	2230      	movs	r2, #48	; 0x30
 8005306:	2111      	movs	r1, #17
 8005308:	f105 0010 	add.w	r0, r5, #16
 800530c:	f000 f902 	bl	8005514 <core_set_error>
 8005310:	2400      	movs	r4, #0
 8005312:	e7e0      	b.n	80052d6 <ai_platform_network_process+0x2da>
 8005314:	462c      	mov	r4, r5
 8005316:	e7de      	b.n	80052d6 <ai_platform_network_process+0x2da>
 8005318:	9d02      	ldr	r5, [sp, #8]
 800531a:	2218      	movs	r2, #24
 800531c:	2112      	movs	r1, #18
 800531e:	f105 0010 	add.w	r0, r5, #16
 8005322:	f000 f8f7 	bl	8005514 <core_set_error>
 8005326:	2400      	movs	r4, #0
 8005328:	e7d5      	b.n	80052d6 <ai_platform_network_process+0x2da>
 800532a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800532e:	429f      	cmp	r7, r3
 8005330:	f4ff af47 	bcc.w	80051c2 <ai_platform_network_process+0x1c6>
 8005334:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005338:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 800533a:	82a3      	strh	r3, [r4, #20]
 800533c:	4625      	mov	r5, r4
 800533e:	2a00      	cmp	r2, #0
 8005340:	f040 808c 	bne.w	800545c <ai_platform_network_process+0x460>
 8005344:	4616      	mov	r6, r2
 8005346:	4617      	mov	r7, r2
 8005348:	8aec      	ldrh	r4, [r5, #22]
 800534a:	429c      	cmp	r4, r3
 800534c:	bf38      	it	cc
 800534e:	46ab      	movcc	fp, r5
 8005350:	d2c1      	bcs.n	80052d6 <ai_platform_network_process+0x2da>
 8005352:	2e00      	cmp	r6, #0
 8005354:	d030      	beq.n	80053b8 <ai_platform_network_process+0x3bc>
 8005356:	f04f 0800 	mov.w	r8, #0
 800535a:	e014      	b.n	8005386 <ai_platform_network_process+0x38a>
 800535c:	6882      	ldr	r2, [r0, #8]
 800535e:	68c5      	ldr	r5, [r0, #12]
 8005360:	6863      	ldr	r3, [r4, #4]
 8005362:	1b52      	subs	r2, r2, r5
 8005364:	4413      	add	r3, r2
 8005366:	6083      	str	r3, [r0, #8]
 8005368:	698b      	ldr	r3, [r1, #24]
 800536a:	6862      	ldr	r2, [r4, #4]
 800536c:	60da      	str	r2, [r3, #12]
 800536e:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8005372:	f859 200a 	ldr.w	r2, [r9, sl]
 8005376:	440b      	add	r3, r1
 8005378:	4293      	cmp	r3, r2
 800537a:	bf24      	itt	cs
 800537c:	68e3      	ldrcs	r3, [r4, #12]
 800537e:	1ad3      	subcs	r3, r2, r3
 8005380:	6063      	str	r3, [r4, #4]
 8005382:	f108 0801 	add.w	r8, r8, #1
 8005386:	8833      	ldrh	r3, [r6, #0]
 8005388:	4543      	cmp	r3, r8
 800538a:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800538e:	d913      	bls.n	80053b8 <ai_platform_network_process+0x3bc>
 8005390:	6873      	ldr	r3, [r6, #4]
 8005392:	b18b      	cbz	r3, 80053b8 <ai_platform_network_process+0x3bc>
 8005394:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8005398:	b171      	cbz	r1, 80053b8 <ai_platform_network_process+0x3bc>
 800539a:	6988      	ldr	r0, [r1, #24]
 800539c:	68b2      	ldr	r2, [r6, #8]
 800539e:	6803      	ldr	r3, [r0, #0]
 80053a0:	f8d2 9000 	ldr.w	r9, [r2]
 80053a4:	009d      	lsls	r5, r3, #2
 80053a6:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 80053aa:	d5d7      	bpl.n	800535c <ai_platform_network_process+0x360>
 80053ac:	6881      	ldr	r1, [r0, #8]
 80053ae:	68a2      	ldr	r2, [r4, #8]
 80053b0:	6860      	ldr	r0, [r4, #4]
 80053b2:	f001 fb73 	bl	8006a9c <st_int8_copy>
 80053b6:	e7da      	b.n	800536e <ai_platform_network_process+0x372>
 80053b8:	4658      	mov	r0, fp
 80053ba:	f000 f903 	bl	80055c4 <ai_layers_forward_all>
 80053be:	2f00      	cmp	r7, #0
 80053c0:	d03d      	beq.n	800543e <ai_platform_network_process+0x442>
 80053c2:	2400      	movs	r4, #0
 80053c4:	e016      	b.n	80053f4 <ai_platform_network_process+0x3f8>
 80053c6:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80053ca:	f859 100a 	ldr.w	r1, [r9, sl]
 80053ce:	4413      	add	r3, r2
 80053d0:	428b      	cmp	r3, r1
 80053d2:	bf24      	itt	cs
 80053d4:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80053d8:	1acb      	subcs	r3, r1, r3
 80053da:	f8c8 3004 	str.w	r3, [r8, #4]
 80053de:	6981      	ldr	r1, [r0, #24]
 80053e0:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80053e4:	1b52      	subs	r2, r2, r5
 80053e6:	4413      	add	r3, r2
 80053e8:	608b      	str	r3, [r1, #8]
 80053ea:	6983      	ldr	r3, [r0, #24]
 80053ec:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80053f0:	60da      	str	r2, [r3, #12]
 80053f2:	3401      	adds	r4, #1
 80053f4:	883b      	ldrh	r3, [r7, #0]
 80053f6:	42a3      	cmp	r3, r4
 80053f8:	d921      	bls.n	800543e <ai_platform_network_process+0x442>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	b1fb      	cbz	r3, 800543e <ai_platform_network_process+0x442>
 80053fe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005402:	b1e0      	cbz	r0, 800543e <ai_platform_network_process+0x442>
 8005404:	68ba      	ldr	r2, [r7, #8]
 8005406:	6983      	ldr	r3, [r0, #24]
 8005408:	f8d2 9000 	ldr.w	r9, [r2]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	0092      	lsls	r2, r2, #2
 8005410:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8005414:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8005418:	d5d5      	bpl.n	80053c6 <ai_platform_network_process+0x3ca>
 800541a:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800541e:	6898      	ldr	r0, [r3, #8]
 8005420:	f001 fb3c 	bl	8006a9c <st_int8_copy>
 8005424:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8005428:	f859 200a 	ldr.w	r2, [r9, sl]
 800542c:	440b      	add	r3, r1
 800542e:	4293      	cmp	r3, r2
 8005430:	bf24      	itt	cs
 8005432:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8005436:	1ad3      	subcs	r3, r2, r3
 8005438:	f8c8 3004 	str.w	r3, [r8, #4]
 800543c:	e7d9      	b.n	80053f2 <ai_platform_network_process+0x3f6>
 800543e:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8005442:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8005446:	3401      	adds	r4, #1
 8005448:	b2a4      	uxth	r4, r4
 800544a:	42a3      	cmp	r3, r4
 800544c:	f8ab 4016 	strh.w	r4, [fp, #22]
 8005450:	f63f af7f 	bhi.w	8005352 <ai_platform_network_process+0x356>
 8005454:	4620      	mov	r0, r4
 8005456:	b005      	add	sp, #20
 8005458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800545c:	2a01      	cmp	r2, #1
 800545e:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8005460:	d03c      	beq.n	80054dc <ai_platform_network_process+0x4e0>
 8005462:	f106 070c 	add.w	r7, r6, #12
 8005466:	e76f      	b.n	8005348 <ai_platform_network_process+0x34c>
 8005468:	4625      	mov	r5, r4
 800546a:	2218      	movs	r2, #24
 800546c:	2113      	movs	r1, #19
 800546e:	f105 0010 	add.w	r0, r5, #16
 8005472:	f000 f84f 	bl	8005514 <core_set_error>
 8005476:	2400      	movs	r4, #0
 8005478:	e72d      	b.n	80052d6 <ai_platform_network_process+0x2da>
 800547a:	9d02      	ldr	r5, [sp, #8]
 800547c:	4604      	mov	r4, r0
 800547e:	2221      	movs	r2, #33	; 0x21
 8005480:	2112      	movs	r1, #18
 8005482:	f105 0010 	add.w	r0, r5, #16
 8005486:	f000 f845 	bl	8005514 <core_set_error>
 800548a:	e724      	b.n	80052d6 <ai_platform_network_process+0x2da>
 800548c:	9d02      	ldr	r5, [sp, #8]
 800548e:	e71b      	b.n	80052c8 <ai_platform_network_process+0x2cc>
 8005490:	9d02      	ldr	r5, [sp, #8]
 8005492:	4604      	mov	r4, r0
 8005494:	2217      	movs	r2, #23
 8005496:	2112      	movs	r1, #18
 8005498:	f105 0010 	add.w	r0, r5, #16
 800549c:	f000 f83a 	bl	8005514 <core_set_error>
 80054a0:	e719      	b.n	80052d6 <ai_platform_network_process+0x2da>
 80054a2:	9d02      	ldr	r5, [sp, #8]
 80054a4:	2219      	movs	r2, #25
 80054a6:	2112      	movs	r1, #18
 80054a8:	f105 0010 	add.w	r0, r5, #16
 80054ac:	f000 f832 	bl	8005514 <core_set_error>
 80054b0:	2400      	movs	r4, #0
 80054b2:	e710      	b.n	80052d6 <ai_platform_network_process+0x2da>
 80054b4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80054b8:	82ab      	strh	r3, [r5, #20]
 80054ba:	e740      	b.n	800533e <ai_platform_network_process+0x342>
 80054bc:	f104 0010 	add.w	r0, r4, #16
 80054c0:	2219      	movs	r2, #25
 80054c2:	2113      	movs	r1, #19
 80054c4:	f000 f826 	bl	8005514 <core_set_error>
 80054c8:	2400      	movs	r4, #0
 80054ca:	e704      	b.n	80052d6 <ai_platform_network_process+0x2da>
 80054cc:	f104 0010 	add.w	r0, r4, #16
 80054d0:	2217      	movs	r2, #23
 80054d2:	2113      	movs	r1, #19
 80054d4:	f000 f81e 	bl	8005514 <core_set_error>
 80054d8:	4654      	mov	r4, sl
 80054da:	e6fc      	b.n	80052d6 <ai_platform_network_process+0x2da>
 80054dc:	2700      	movs	r7, #0
 80054de:	e733      	b.n	8005348 <ai_platform_network_process+0x34c>
 80054e0:	4625      	mov	r5, r4
 80054e2:	2221      	movs	r2, #33	; 0x21
 80054e4:	4604      	mov	r4, r0
 80054e6:	2113      	movs	r1, #19
 80054e8:	f105 0010 	add.w	r0, r5, #16
 80054ec:	f000 f812 	bl	8005514 <core_set_error>
 80054f0:	e6f1      	b.n	80052d6 <ai_platform_network_process+0x2da>
 80054f2:	4625      	mov	r5, r4
 80054f4:	2217      	movs	r2, #23
 80054f6:	4604      	mov	r4, r0
 80054f8:	2113      	movs	r1, #19
 80054fa:	f105 0010 	add.w	r0, r5, #16
 80054fe:	f000 f809 	bl	8005514 <core_set_error>
 8005502:	e6e8      	b.n	80052d6 <ai_platform_network_process+0x2da>

08005504 <core_init>:
 8005504:	2001      	movs	r0, #1
 8005506:	4770      	bx	lr

08005508 <core_get_error>:
 8005508:	4603      	mov	r3, r0
 800550a:	2200      	movs	r2, #0
 800550c:	6800      	ldr	r0, [r0, #0]
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop

08005514 <core_set_error>:
 8005514:	4603      	mov	r3, r0
 8005516:	7800      	ldrb	r0, [r0, #0]
 8005518:	b108      	cbz	r0, 800551e <core_set_error+0xa>
 800551a:	2000      	movs	r0, #0
 800551c:	4770      	bx	lr
 800551e:	7019      	strb	r1, [r3, #0]
 8005520:	6819      	ldr	r1, [r3, #0]
 8005522:	f362 211f 	bfi	r1, r2, #8, #24
 8005526:	2001      	movs	r0, #1
 8005528:	6019      	str	r1, [r3, #0]
 800552a:	4770      	bx	lr

0800552c <ai_check_custom_types>:
 800552c:	b082      	sub	sp, #8
 800552e:	4b13      	ldr	r3, [pc, #76]	; (800557c <ai_check_custom_types+0x50>)
 8005530:	9301      	str	r3, [sp, #4]
 8005532:	b118      	cbz	r0, 800553c <ai_check_custom_types+0x10>
 8005534:	7803      	ldrb	r3, [r0, #0]
 8005536:	2b03      	cmp	r3, #3
 8005538:	d002      	beq.n	8005540 <ai_check_custom_types+0x14>
 800553a:	2000      	movs	r0, #0
 800553c:	b002      	add	sp, #8
 800553e:	4770      	bx	lr
 8005540:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005544:	4293      	cmp	r3, r2
 8005546:	d004      	beq.n	8005552 <ai_check_custom_types+0x26>
 8005548:	2001      	movs	r0, #1
 800554a:	f080 0001 	eor.w	r0, r0, #1
 800554e:	b002      	add	sp, #8
 8005550:	4770      	bx	lr
 8005552:	7842      	ldrb	r2, [r0, #1]
 8005554:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005558:	429a      	cmp	r2, r3
 800555a:	f100 0001 	add.w	r0, r0, #1
 800555e:	d1f3      	bne.n	8005548 <ai_check_custom_types+0x1c>
 8005560:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8005564:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005568:	429a      	cmp	r2, r3
 800556a:	d1ed      	bne.n	8005548 <ai_check_custom_types+0x1c>
 800556c:	7842      	ldrb	r2, [r0, #1]
 800556e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005572:	429a      	cmp	r2, r3
 8005574:	d1e8      	bne.n	8005548 <ai_check_custom_types+0x1c>
 8005576:	2000      	movs	r0, #0
 8005578:	e7e7      	b.n	800554a <ai_check_custom_types+0x1e>
 800557a:	bf00      	nop
 800557c:	84048403 	.word	0x84048403

08005580 <ai_layers_init_all>:
 8005580:	4601      	mov	r1, r0
 8005582:	2000      	movs	r0, #0
 8005584:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8005586:	b143      	cbz	r3, 800559a <ai_layers_init_all+0x1a>
 8005588:	691a      	ldr	r2, [r3, #16]
 800558a:	60d9      	str	r1, [r3, #12]
 800558c:	429a      	cmp	r2, r3
 800558e:	f100 0001 	add.w	r0, r0, #1
 8005592:	d002      	beq.n	800559a <ai_layers_init_all+0x1a>
 8005594:	b10a      	cbz	r2, 800559a <ai_layers_init_all+0x1a>
 8005596:	4613      	mov	r3, r2
 8005598:	e7f5      	b.n	8005586 <ai_layers_init_all+0x6>
 800559a:	4770      	bx	lr

0800559c <ai_layers_post_init_all>:
 800559c:	b538      	push	{r3, r4, r5, lr}
 800559e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80055a0:	2500      	movs	r5, #0
 80055a2:	b16c      	cbz	r4, 80055c0 <ai_layers_post_init_all+0x24>
 80055a4:	6863      	ldr	r3, [r4, #4]
 80055a6:	07db      	lsls	r3, r3, #31
 80055a8:	d504      	bpl.n	80055b4 <ai_layers_post_init_all+0x18>
 80055aa:	6a23      	ldr	r3, [r4, #32]
 80055ac:	4620      	mov	r0, r4
 80055ae:	b10b      	cbz	r3, 80055b4 <ai_layers_post_init_all+0x18>
 80055b0:	4798      	blx	r3
 80055b2:	3501      	adds	r5, #1
 80055b4:	6923      	ldr	r3, [r4, #16]
 80055b6:	42a3      	cmp	r3, r4
 80055b8:	d002      	beq.n	80055c0 <ai_layers_post_init_all+0x24>
 80055ba:	b10b      	cbz	r3, 80055c0 <ai_layers_post_init_all+0x24>
 80055bc:	461c      	mov	r4, r3
 80055be:	e7f0      	b.n	80055a2 <ai_layers_post_init_all+0x6>
 80055c0:	4628      	mov	r0, r5
 80055c2:	bd38      	pop	{r3, r4, r5, pc}

080055c4 <ai_layers_forward_all>:
 80055c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055c8:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 80055cc:	4604      	mov	r4, r0
 80055ce:	f1b8 0f00 	cmp.w	r8, #0
 80055d2:	d02b      	beq.n	800562c <ai_layers_forward_all+0x68>
 80055d4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80055d6:	6381      	str	r1, [r0, #56]	; 0x38
 80055d8:	b321      	cbz	r1, 8005624 <ai_layers_forward_all+0x60>
 80055da:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80055dc:	2001      	movs	r0, #1
 80055de:	47c0      	blx	r8
 80055e0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80055e2:	b1fe      	cbz	r6, 8005624 <ai_layers_forward_all+0x60>
 80055e4:	2700      	movs	r7, #0
 80055e6:	4631      	mov	r1, r6
 80055e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80055ea:	2002      	movs	r0, #2
 80055ec:	47c0      	blx	r8
 80055ee:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80055f0:	4628      	mov	r0, r5
 80055f2:	696b      	ldr	r3, [r5, #20]
 80055f4:	4798      	blx	r3
 80055f6:	692e      	ldr	r6, [r5, #16]
 80055f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80055fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80055fc:	42b5      	cmp	r5, r6
 80055fe:	f04f 0003 	mov.w	r0, #3
 8005602:	d007      	beq.n	8005614 <ai_layers_forward_all+0x50>
 8005604:	47c0      	blx	r8
 8005606:	3701      	adds	r7, #1
 8005608:	63a6      	str	r6, [r4, #56]	; 0x38
 800560a:	2e00      	cmp	r6, #0
 800560c:	d1eb      	bne.n	80055e6 <ai_layers_forward_all+0x22>
 800560e:	4638      	mov	r0, r7
 8005610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005614:	2003      	movs	r0, #3
 8005616:	47c0      	blx	r8
 8005618:	2300      	movs	r3, #0
 800561a:	3701      	adds	r7, #1
 800561c:	63a3      	str	r3, [r4, #56]	; 0x38
 800561e:	4638      	mov	r0, r7
 8005620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005624:	2700      	movs	r7, #0
 8005626:	4638      	mov	r0, r7
 8005628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800562c:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800562e:	6385      	str	r5, [r0, #56]	; 0x38
 8005630:	2d00      	cmp	r5, #0
 8005632:	d0f7      	beq.n	8005624 <ai_layers_forward_all+0x60>
 8005634:	4647      	mov	r7, r8
 8005636:	696b      	ldr	r3, [r5, #20]
 8005638:	4628      	mov	r0, r5
 800563a:	4798      	blx	r3
 800563c:	462b      	mov	r3, r5
 800563e:	692d      	ldr	r5, [r5, #16]
 8005640:	429d      	cmp	r5, r3
 8005642:	d004      	beq.n	800564e <ai_layers_forward_all+0x8a>
 8005644:	63a5      	str	r5, [r4, #56]	; 0x38
 8005646:	3701      	adds	r7, #1
 8005648:	2d00      	cmp	r5, #0
 800564a:	d1f4      	bne.n	8005636 <ai_layers_forward_all+0x72>
 800564c:	e7df      	b.n	800560e <ai_layers_forward_all+0x4a>
 800564e:	2300      	movs	r3, #0
 8005650:	63a3      	str	r3, [r4, #56]	; 0x38
 8005652:	3701      	adds	r7, #1
 8005654:	e7db      	b.n	800560e <ai_layers_forward_all+0x4a>
 8005656:	bf00      	nop

08005658 <ai_dict_decompress_f32>:
 8005658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800565c:	9d08      	ldr	r5, [sp, #32]
 800565e:	2b04      	cmp	r3, #4
 8005660:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8005664:	d00e      	beq.n	8005684 <ai_dict_decompress_f32+0x2c>
 8005666:	2b08      	cmp	r3, #8
 8005668:	d10a      	bne.n	8005680 <ai_dict_decompress_f32+0x28>
 800566a:	42a8      	cmp	r0, r5
 800566c:	d208      	bcs.n	8005680 <ai_dict_decompress_f32+0x28>
 800566e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005672:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f840 3b04 	str.w	r3, [r0], #4
 800567c:	4285      	cmp	r5, r0
 800567e:	d8f6      	bhi.n	800566e <ai_dict_decompress_f32+0x16>
 8005680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005684:	9b07      	ldr	r3, [sp, #28]
 8005686:	085e      	lsrs	r6, r3, #1
 8005688:	f003 0701 	and.w	r7, r3, #1
 800568c:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8005690:	f106 38ff 	add.w	r8, r6, #4294967295
 8005694:	42a8      	cmp	r0, r5
 8005696:	d2f3      	bcs.n	8005680 <ai_dict_decompress_f32+0x28>
 8005698:	b33e      	cbz	r6, 80056ea <ai_dict_decompress_f32+0x92>
 800569a:	f100 0e08 	add.w	lr, r0, #8
 800569e:	f101 3cff 	add.w	ip, r1, #4294967295
 80056a2:	eb01 0408 	add.w	r4, r1, r8
 80056a6:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 80056aa:	091b      	lsrs	r3, r3, #4
 80056ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80056b0:	f10e 0e08 	add.w	lr, lr, #8
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f84e 3c10 	str.w	r3, [lr, #-16]
 80056ba:	f89c 3000 	ldrb.w	r3, [ip]
 80056be:	f003 030f 	and.w	r3, r3, #15
 80056c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80056c6:	4564      	cmp	r4, ip
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f84e 3c0c 	str.w	r3, [lr, #-12]
 80056ce:	d1ea      	bne.n	80056a6 <ai_dict_decompress_f32+0x4e>
 80056d0:	4431      	add	r1, r6
 80056d2:	4448      	add	r0, r9
 80056d4:	2f00      	cmp	r7, #0
 80056d6:	d0dd      	beq.n	8005694 <ai_dict_decompress_f32+0x3c>
 80056d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056dc:	091b      	lsrs	r3, r3, #4
 80056de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f840 3b04 	str.w	r3, [r0], #4
 80056e8:	e7d4      	b.n	8005694 <ai_dict_decompress_f32+0x3c>
 80056ea:	2f00      	cmp	r7, #0
 80056ec:	d1f4      	bne.n	80056d8 <ai_dict_decompress_f32+0x80>
 80056ee:	42a8      	cmp	r0, r5
 80056f0:	d3fd      	bcc.n	80056ee <ai_dict_decompress_f32+0x96>
 80056f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80056f6:	bf00      	nop

080056f8 <forward_conv2d_if32of32wf32>:
 80056f8:	6982      	ldr	r2, [r0, #24]
 80056fa:	8813      	ldrh	r3, [r2, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 8092 	beq.w	8005826 <forward_conv2d_if32of32wf32+0x12e>
 8005702:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8005706:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800570a:	b102      	cbz	r2, 800570e <forward_conv2d_if32of32wf32+0x16>
 800570c:	6812      	ldr	r2, [r2, #0]
 800570e:	2b01      	cmp	r3, #1
 8005710:	f000 80b2 	beq.w	8005878 <forward_conv2d_if32of32wf32+0x180>
 8005714:	f8dc 1010 	ldr.w	r1, [ip, #16]
 8005718:	b101      	cbz	r1, 800571c <forward_conv2d_if32of32wf32+0x24>
 800571a:	6809      	ldr	r1, [r1, #0]
 800571c:	2b02      	cmp	r3, #2
 800571e:	f000 8084 	beq.w	800582a <forward_conv2d_if32of32wf32+0x132>
 8005722:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005726:	f8dc 601c 	ldr.w	r6, [ip, #28]
 800572a:	b0a1      	sub	sp, #132	; 0x84
 800572c:	2e00      	cmp	r6, #0
 800572e:	f000 809c 	beq.w	800586a <forward_conv2d_if32of32wf32+0x172>
 8005732:	f8bc 5018 	ldrh.w	r5, [ip, #24]
 8005736:	6834      	ldr	r4, [r6, #0]
 8005738:	2d01      	cmp	r5, #1
 800573a:	f240 8098 	bls.w	800586e <forward_conv2d_if32of32wf32+0x176>
 800573e:	6876      	ldr	r6, [r6, #4]
 8005740:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8005744:	f8d1 900c 	ldr.w	r9, [r1, #12]
 8005748:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800574c:	9713      	str	r7, [sp, #76]	; 0x4c
 800574e:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8005752:	9714      	str	r7, [sp, #80]	; 0x50
 8005754:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8005758:	9715      	str	r7, [sp, #84]	; 0x54
 800575a:	f8d9 7008 	ldr.w	r7, [r9, #8]
 800575e:	9716      	str	r7, [sp, #88]	; 0x58
 8005760:	f8d8 700c 	ldr.w	r7, [r8, #12]
 8005764:	6992      	ldr	r2, [r2, #24]
 8005766:	9717      	str	r7, [sp, #92]	; 0x5c
 8005768:	f8d8 7008 	ldr.w	r7, [r8, #8]
 800576c:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 8005770:	9718      	str	r7, [sp, #96]	; 0x60
 8005772:	8d07      	ldrh	r7, [r0, #40]	; 0x28
 8005774:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8005778:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800577c:	69a2      	ldr	r2, [r4, #24]
 800577e:	9719      	str	r7, [sp, #100]	; 0x64
 8005780:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
 8005784:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
 8005786:	69c0      	ldr	r0, [r0, #28]
 8005788:	901f      	str	r0, [sp, #124]	; 0x7c
 800578a:	f8be 0000 	ldrh.w	r0, [lr]
 800578e:	901b      	str	r0, [sp, #108]	; 0x6c
 8005790:	f8be 0004 	ldrh.w	r0, [lr, #4]
 8005794:	901c      	str	r0, [sp, #112]	; 0x70
 8005796:	b2a8      	uxth	r0, r5
 8005798:	971a      	str	r7, [sp, #104]	; 0x68
 800579a:	e9da 7801 	ldrd	r7, r8, [sl, #4]
 800579e:	901d      	str	r0, [sp, #116]	; 0x74
 80057a0:	b2a0      	uxth	r0, r4
 80057a2:	f8d2 9008 	ldr.w	r9, [r2, #8]
 80057a6:	901e      	str	r0, [sp, #120]	; 0x78
 80057a8:	b10e      	cbz	r6, 80057ae <forward_conv2d_if32of32wf32+0xb6>
 80057aa:	69b0      	ldr	r0, [r6, #24]
 80057ac:	6886      	ldr	r6, [r0, #8]
 80057ae:	6989      	ldr	r1, [r1, #24]
 80057b0:	b2a4      	uxth	r4, r4
 80057b2:	f108 30ff 	add.w	r0, r8, #4294967295
 80057b6:	f8d1 a008 	ldr.w	sl, [r1, #8]
 80057ba:	6811      	ldr	r1, [r2, #0]
 80057bc:	b2ad      	uxth	r5, r5
 80057be:	3c01      	subs	r4, #1
 80057c0:	3d01      	subs	r5, #1
 80057c2:	fb00 8404 	mla	r4, r0, r4, r8
 80057c6:	1e78      	subs	r0, r7, #1
 80057c8:	fb00 7505 	mla	r5, r0, r5, r7
 80057cc:	f3c1 4043 	ubfx	r0, r1, #17, #4
 80057d0:	2804      	cmp	r0, #4
 80057d2:	d02d      	beq.n	8005830 <forward_conv2d_if32of32wf32+0x138>
 80057d4:	2808      	cmp	r0, #8
 80057d6:	d02b      	beq.n	8005830 <forward_conv2d_if32of32wf32+0x138>
 80057d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80057da:	940c      	str	r4, [sp, #48]	; 0x30
 80057dc:	e9cd 530d 	strd	r5, r3, [sp, #52]	; 0x34
 80057e0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80057e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80057e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80057e6:	930a      	str	r3, [sp, #40]	; 0x28
 80057e8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80057ea:	9309      	str	r3, [sp, #36]	; 0x24
 80057ec:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80057ee:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80057f0:	9706      	str	r7, [sp, #24]
 80057f2:	e9cd 8307 	strd	r8, r3, [sp, #28]
 80057f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80057f8:	9305      	str	r3, [sp, #20]
 80057fa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80057fc:	9304      	str	r3, [sp, #16]
 80057fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005800:	9303      	str	r3, [sp, #12]
 8005802:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005804:	9302      	str	r3, [sp, #8]
 8005806:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005808:	9301      	str	r3, [sp, #4]
 800580a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005810:	9310      	str	r3, [sp, #64]	; 0x40
 8005812:	464a      	mov	r2, r9
 8005814:	4633      	mov	r3, r6
 8005816:	4651      	mov	r1, sl
 8005818:	4658      	mov	r0, fp
 800581a:	940f      	str	r4, [sp, #60]	; 0x3c
 800581c:	f000 feb8 	bl	8006590 <forward_lite_conv2d_if32of32wf32>
 8005820:	b021      	add	sp, #132	; 0x84
 8005822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	deff      	udf	#255	; 0xff
 800582a:	2300      	movs	r3, #0
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	deff      	udf	#255	; 0xff
 8005830:	68d2      	ldr	r2, [r2, #12]
 8005832:	2a00      	cmp	r2, #0
 8005834:	d0d0      	beq.n	80057d8 <forward_conv2d_if32of32wf32+0xe0>
 8005836:	2b03      	cmp	r3, #3
 8005838:	d021      	beq.n	800587e <forward_conv2d_if32of32wf32+0x186>
 800583a:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
 800583e:	b1c3      	cbz	r3, 8005872 <forward_conv2d_if32of32wf32+0x17a>
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	b1b3      	cbz	r3, 8005872 <forward_conv2d_if32of32wf32+0x17a>
 8005844:	699b      	ldr	r3, [r3, #24]
 8005846:	e9d3 3001 	ldrd	r3, r0, [r3, #4]
 800584a:	9301      	str	r3, [sp, #4]
 800584c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	f3c1 13c6 	ubfx	r3, r1, #7, #7
 8005854:	f3c1 5141 	ubfx	r1, r1, #21, #2
 8005858:	410b      	asrs	r3, r1
 800585a:	b29b      	uxth	r3, r3
 800585c:	4649      	mov	r1, r9
 800585e:	2800      	cmp	r0, #0
 8005860:	bf18      	it	ne
 8005862:	4681      	movne	r9, r0
 8005864:	f7ff fef8 	bl	8005658 <ai_dict_decompress_f32>
 8005868:	e7b6      	b.n	80057d8 <forward_conv2d_if32of32wf32+0xe0>
 800586a:	4634      	mov	r4, r6
 800586c:	e768      	b.n	8005740 <forward_conv2d_if32of32wf32+0x48>
 800586e:	2600      	movs	r6, #0
 8005870:	e766      	b.n	8005740 <forward_conv2d_if32of32wf32+0x48>
 8005872:	2300      	movs	r3, #0
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	deff      	udf	#255	; 0xff
 8005878:	2300      	movs	r3, #0
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	deff      	udf	#255	; 0xff
 800587e:	2300      	movs	r3, #0
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	deff      	udf	#255	; 0xff

08005884 <forward_dense>:
 8005884:	6983      	ldr	r3, [r0, #24]
 8005886:	881a      	ldrh	r2, [r3, #0]
 8005888:	2a00      	cmp	r2, #0
 800588a:	f000 8181 	beq.w	8005b90 <forward_dense+0x30c>
 800588e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005892:	ed2d 8b02 	vpush	{d8}
 8005896:	f8d3 c004 	ldr.w	ip, [r3, #4]
 800589a:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800589e:	b095      	sub	sp, #84	; 0x54
 80058a0:	b105      	cbz	r5, 80058a4 <forward_dense+0x20>
 80058a2:	682d      	ldr	r5, [r5, #0]
 80058a4:	2a01      	cmp	r2, #1
 80058a6:	f000 828f 	beq.w	8005dc8 <forward_dense+0x544>
 80058aa:	f8dc 6010 	ldr.w	r6, [ip, #16]
 80058ae:	b106      	cbz	r6, 80058b2 <forward_dense+0x2e>
 80058b0:	6836      	ldr	r6, [r6, #0]
 80058b2:	2a02      	cmp	r2, #2
 80058b4:	f000 816e 	beq.w	8005b94 <forward_dense+0x310>
 80058b8:	f8dc 301c 	ldr.w	r3, [ip, #28]
 80058bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f000 8274 	beq.w	8005dac <forward_dense+0x528>
 80058c4:	4619      	mov	r1, r3
 80058c6:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 80058ca:	6809      	ldr	r1, [r1, #0]
 80058cc:	910d      	str	r1, [sp, #52]	; 0x34
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	f240 826e 	bls.w	8005db0 <forward_dense+0x52c>
 80058d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80058da:	460b      	mov	r3, r1
 80058dc:	68e8      	ldr	r0, [r5, #12]
 80058de:	68f7      	ldr	r7, [r6, #12]
 80058e0:	6840      	ldr	r0, [r0, #4]
 80058e2:	6999      	ldr	r1, [r3, #24]
 80058e4:	9013      	str	r0, [sp, #76]	; 0x4c
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	680b      	ldr	r3, [r1, #0]
 80058ea:	9012      	str	r0, [sp, #72]	; 0x48
 80058ec:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 80058f0:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 80058f4:	fb00 f404 	mul.w	r4, r0, r4
 80058f8:	f3c3 5041 	ubfx	r0, r3, #21, #2
 80058fc:	fa4e f000 	asr.w	r0, lr, r0
 8005900:	2a03      	cmp	r2, #3
 8005902:	9010      	str	r0, [sp, #64]	; 0x40
 8005904:	f000 825d 	beq.w	8005dc2 <forward_dense+0x53e>
 8005908:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 800590c:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8005910:	2a00      	cmp	r2, #0
 8005912:	f000 8246 	beq.w	8005da2 <forward_dense+0x51e>
 8005916:	6812      	ldr	r2, [r2, #0]
 8005918:	2a00      	cmp	r2, #0
 800591a:	f000 8242 	beq.w	8005da2 <forward_dense+0x51e>
 800591e:	2b04      	cmp	r3, #4
 8005920:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8005924:	f000 822c 	beq.w	8005d80 <forward_dense+0x4fc>
 8005928:	2b08      	cmp	r3, #8
 800592a:	f000 8229 	beq.w	8005d80 <forward_dense+0x4fc>
 800592e:	f04f 0b00 	mov.w	fp, #0
 8005932:	69b2      	ldr	r2, [r6, #24]
 8005934:	69ab      	ldr	r3, [r5, #24]
 8005936:	6891      	ldr	r1, [r2, #8]
 8005938:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	6952      	ldr	r2, [r2, #20]
 800593e:	9106      	str	r1, [sp, #24]
 8005940:	fb07 f404 	mul.w	r4, r7, r4
 8005944:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8005948:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800594a:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800594e:	4281      	cmp	r1, r0
 8005950:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8005954:	900e      	str	r0, [sp, #56]	; 0x38
 8005956:	940c      	str	r4, [sp, #48]	; 0x30
 8005958:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 800595c:	f080 8113 	bcs.w	8005b86 <forward_dense+0x302>
 8005960:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005962:	ed9f 8a93 	vldr	s16, [pc, #588]	; 8005bb0 <forward_dense+0x32c>
 8005966:	f021 0201 	bic.w	r2, r1, #1
 800596a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800596e:	9204      	str	r2, [sp, #16]
 8005970:	f001 0201 	and.w	r2, r1, #1
 8005974:	08c8      	lsrs	r0, r1, #3
 8005976:	9208      	str	r2, [sp, #32]
 8005978:	008a      	lsls	r2, r1, #2
 800597a:	f001 0a07 	and.w	sl, r1, #7
 800597e:	920f      	str	r2, [sp, #60]	; 0x3c
 8005980:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8005984:	3320      	adds	r3, #32
 8005986:	465c      	mov	r4, fp
 8005988:	9007      	str	r0, [sp, #28]
 800598a:	46cb      	mov	fp, r9
 800598c:	9205      	str	r2, [sp, #20]
 800598e:	9302      	str	r3, [sp, #8]
 8005990:	46c1      	mov	r9, r8
 8005992:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8005996:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	689a      	ldr	r2, [r3, #8]
 800599c:	9b02      	ldr	r3, [sp, #8]
 800599e:	3b20      	subs	r3, #32
 80059a0:	930a      	str	r3, [sp, #40]	; 0x28
 80059a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059a4:	b10b      	cbz	r3, 80059aa <forward_dense+0x126>
 80059a6:	699b      	ldr	r3, [r3, #24]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	2c00      	cmp	r4, #0
 80059ac:	f000 81da 	beq.w	8005d64 <forward_dense+0x4e0>
 80059b0:	9910      	ldr	r1, [sp, #64]	; 0x40
 80059b2:	2904      	cmp	r1, #4
 80059b4:	9906      	ldr	r1, [sp, #24]
 80059b6:	f000 80fd 	beq.w	8005bb4 <forward_dense+0x330>
 80059ba:	4549      	cmp	r1, r9
 80059bc:	f080 80d2 	bcs.w	8005b64 <forward_dense+0x2e0>
 80059c0:	460f      	mov	r7, r1
 80059c2:	9907      	ldr	r1, [sp, #28]
 80059c4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80059c8:	f8dd a014 	ldr.w	sl, [sp, #20]
 80059cc:	1c4e      	adds	r6, r1, #1
 80059ce:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80059d2:	4694      	mov	ip, r2
 80059d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80059d6:	468e      	mov	lr, r1
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 80de 	beq.w	8005b9a <forward_dense+0x316>
 80059de:	ecf3 2a01 	vldmia	r3!, {s5}
 80059e2:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8005bb0 <forward_dense+0x32c>
 80059e6:	f1be 0f00 	cmp.w	lr, #0
 80059ea:	f000 80de 	beq.w	8005baa <forward_dense+0x326>
 80059ee:	f10c 0108 	add.w	r1, ip, #8
 80059f2:	4640      	mov	r0, r8
 80059f4:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 80059f8:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 80059fc:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8005a00:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8005a04:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 8005a08:	ed10 5a04 	vldr	s10, [r0, #-16]
 8005a0c:	ed50 5a03 	vldr	s11, [r0, #-12]
 8005a10:	ed10 6a02 	vldr	s12, [r0, #-8]
 8005a14:	ed50 6a01 	vldr	s13, [r0, #-4]
 8005a18:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005a1c:	edd5 7a00 	vldr	s15, [r5]
 8005a20:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8005a24:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005a28:	ee67 7a83 	vmul.f32	s15, s15, s6
 8005a2c:	ed95 3a00 	vldr	s6, [r5]
 8005a30:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8005a34:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005a38:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005a3c:	3108      	adds	r1, #8
 8005a3e:	edd5 3a00 	vldr	s7, [r5]
 8005a42:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8005a46:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005a4a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005a4e:	3020      	adds	r0, #32
 8005a50:	ed95 4a00 	vldr	s8, [r5]
 8005a54:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8005a58:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005a5c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005a60:	edd5 4a00 	vldr	s9, [r5]
 8005a64:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8005a68:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005a6c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005a70:	ed95 5a00 	vldr	s10, [r5]
 8005a74:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8005a78:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005a7c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005a80:	edd5 5a00 	vldr	s11, [r5]
 8005a84:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8005a88:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005a8c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005a90:	428e      	cmp	r6, r1
 8005a92:	ed95 6a00 	vldr	s12, [r5]
 8005a96:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005a9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a9e:	d1a9      	bne.n	80059f4 <forward_dense+0x170>
 8005aa0:	f1a6 0108 	sub.w	r1, r6, #8
 8005aa4:	4650      	mov	r0, sl
 8005aa6:	2a00      	cmp	r2, #0
 8005aa8:	d04a      	beq.n	8005b40 <forward_dense+0x2bc>
 8005aaa:	780d      	ldrb	r5, [r1, #0]
 8005aac:	edd0 6a00 	vldr	s13, [r0]
 8005ab0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005ab4:	edd5 7a00 	vldr	s15, [r5]
 8005ab8:	2a01      	cmp	r2, #1
 8005aba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005abe:	d03f      	beq.n	8005b40 <forward_dense+0x2bc>
 8005ac0:	784d      	ldrb	r5, [r1, #1]
 8005ac2:	edd0 6a01 	vldr	s13, [r0, #4]
 8005ac6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005aca:	edd5 7a00 	vldr	s15, [r5]
 8005ace:	2a02      	cmp	r2, #2
 8005ad0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005ad4:	d034      	beq.n	8005b40 <forward_dense+0x2bc>
 8005ad6:	788d      	ldrb	r5, [r1, #2]
 8005ad8:	edd0 6a02 	vldr	s13, [r0, #8]
 8005adc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005ae0:	edd5 7a00 	vldr	s15, [r5]
 8005ae4:	2a03      	cmp	r2, #3
 8005ae6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005aea:	d029      	beq.n	8005b40 <forward_dense+0x2bc>
 8005aec:	78cd      	ldrb	r5, [r1, #3]
 8005aee:	edd0 6a03 	vldr	s13, [r0, #12]
 8005af2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005af6:	edd5 7a00 	vldr	s15, [r5]
 8005afa:	2a04      	cmp	r2, #4
 8005afc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005b00:	d01e      	beq.n	8005b40 <forward_dense+0x2bc>
 8005b02:	790d      	ldrb	r5, [r1, #4]
 8005b04:	edd0 6a04 	vldr	s13, [r0, #16]
 8005b08:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005b0c:	edd5 7a00 	vldr	s15, [r5]
 8005b10:	2a05      	cmp	r2, #5
 8005b12:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005b16:	d013      	beq.n	8005b40 <forward_dense+0x2bc>
 8005b18:	794d      	ldrb	r5, [r1, #5]
 8005b1a:	edd0 6a05 	vldr	s13, [r0, #20]
 8005b1e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005b22:	edd5 7a00 	vldr	s15, [r5]
 8005b26:	2a06      	cmp	r2, #6
 8005b28:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005b2c:	d008      	beq.n	8005b40 <forward_dense+0x2bc>
 8005b2e:	7989      	ldrb	r1, [r1, #6]
 8005b30:	edd0 7a06 	vldr	s15, [r0, #24]
 8005b34:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005b38:	edd1 6a00 	vldr	s13, [r1]
 8005b3c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005b40:	44dc      	add	ip, fp
 8005b42:	445e      	add	r6, fp
 8005b44:	ee32 7a87 	vadd.f32	s14, s5, s14
 8005b48:	eca7 7a01 	vstmia	r7!, {s14}
 8005b4c:	454f      	cmp	r7, r9
 8005b4e:	f4ff af43 	bcc.w	80059d8 <forward_dense+0x154>
 8005b52:	9a06      	ldr	r2, [sp, #24]
 8005b54:	eba9 0302 	sub.w	r3, r9, r2
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	f023 0303 	bic.w	r3, r3, #3
 8005b5e:	3304      	adds	r3, #4
 8005b60:	18d3      	adds	r3, r2, r3
 8005b62:	9306      	str	r3, [sp, #24]
 8005b64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b66:	9a05      	ldr	r2, [sp, #20]
 8005b68:	4499      	add	r9, r3
 8005b6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b6c:	441a      	add	r2, r3
 8005b6e:	9205      	str	r2, [sp, #20]
 8005b70:	9a02      	ldr	r2, [sp, #8]
 8005b72:	441a      	add	r2, r3
 8005b74:	9202      	str	r2, [sp, #8]
 8005b76:	9a04      	ldr	r2, [sp, #16]
 8005b78:	441a      	add	r2, r3
 8005b7a:	9204      	str	r2, [sp, #16]
 8005b7c:	9b06      	ldr	r3, [sp, #24]
 8005b7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b80:	4293      	cmp	r3, r2
 8005b82:	f4ff af08 	bcc.w	8005996 <forward_dense+0x112>
 8005b86:	b015      	add	sp, #84	; 0x54
 8005b88:	ecbd 8b02 	vpop	{d8}
 8005b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b90:	6853      	ldr	r3, [r2, #4]
 8005b92:	deff      	udf	#255	; 0xff
 8005b94:	2300      	movs	r3, #0
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	deff      	udf	#255	; 0xff
 8005b9a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005bb0 <forward_dense+0x32c>
 8005b9e:	eef0 2a48 	vmov.f32	s5, s16
 8005ba2:	f1be 0f00 	cmp.w	lr, #0
 8005ba6:	f47f af22 	bne.w	80059ee <forward_dense+0x16a>
 8005baa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005bac:	4661      	mov	r1, ip
 8005bae:	e77a      	b.n	8005aa6 <forward_dense+0x222>
 8005bb0:	00000000 	.word	0x00000000
 8005bb4:	4549      	cmp	r1, r9
 8005bb6:	d2d5      	bcs.n	8005b64 <forward_dense+0x2e0>
 8005bb8:	9807      	ldr	r0, [sp, #28]
 8005bba:	9103      	str	r1, [sp, #12]
 8005bbc:	9904      	ldr	r1, [sp, #16]
 8005bbe:	f100 0c01 	add.w	ip, r0, #1
 8005bc2:	3901      	subs	r1, #1
 8005bc4:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8005bc8:	9109      	str	r1, [sp, #36]	; 0x24
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	f000 80b2 	beq.w	8005d34 <forward_dense+0x4b0>
 8005bd0:	9907      	ldr	r1, [sp, #28]
 8005bd2:	ecf3 2a01 	vldmia	r3!, {s5}
 8005bd6:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 8005bb0 <forward_dense+0x32c>
 8005bda:	2900      	cmp	r1, #0
 8005bdc:	f000 80b2 	beq.w	8005d44 <forward_dense+0x4c0>
 8005be0:	9902      	ldr	r1, [sp, #8]
 8005be2:	1d10      	adds	r0, r2, #4
 8005be4:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8005be8:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8005bec:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8005bf0:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8005bf4:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8005bf8:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8005bfc:	ed11 5a04 	vldr	s10, [r1, #-16]
 8005c00:	ed51 5a03 	vldr	s11, [r1, #-12]
 8005c04:	ed11 6a02 	vldr	s12, [r1, #-8]
 8005c08:	ed51 6a01 	vldr	s13, [r1, #-4]
 8005c0c:	f006 070f 	and.w	r7, r6, #15
 8005c10:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8005c14:	edd7 7a00 	vldr	s15, [r7]
 8005c18:	0936      	lsrs	r6, r6, #4
 8005c1a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005c1e:	ed96 3a00 	vldr	s6, [r6]
 8005c22:	ee67 7a82 	vmul.f32	s15, s15, s4
 8005c26:	092e      	lsrs	r6, r5, #4
 8005c28:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005c2c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005c30:	f005 050f 	and.w	r5, r5, #15
 8005c34:	edd6 3a00 	vldr	s7, [r6]
 8005c38:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 8005c3c:	eee3 7a84 	vfma.f32	s15, s7, s8
 8005c40:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005c44:	0937      	lsrs	r7, r6, #4
 8005c46:	ed95 4a00 	vldr	s8, [r5]
 8005c4a:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8005c4e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005c52:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8005c56:	f006 060f 	and.w	r6, r6, #15
 8005c5a:	edd7 4a00 	vldr	s9, [r7]
 8005c5e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8005c62:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005c66:	3004      	adds	r0, #4
 8005c68:	ed96 5a00 	vldr	s10, [r6]
 8005c6c:	092e      	lsrs	r6, r5, #4
 8005c6e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005c72:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005c76:	f005 050f 	and.w	r5, r5, #15
 8005c7a:	edd6 5a00 	vldr	s11, [r6]
 8005c7e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005c82:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005c86:	4584      	cmp	ip, r0
 8005c88:	ed95 6a00 	vldr	s12, [r5]
 8005c8c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005c90:	f101 0120 	add.w	r1, r1, #32
 8005c94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c98:	d1a4      	bne.n	8005be4 <forward_dense+0x360>
 8005c9a:	f8dd e014 	ldr.w	lr, [sp, #20]
 8005c9e:	f1ac 0804 	sub.w	r8, ip, #4
 8005ca2:	9904      	ldr	r1, [sp, #16]
 8005ca4:	458e      	cmp	lr, r1
 8005ca6:	d22a      	bcs.n	8005cfe <forward_dense+0x47a>
 8005ca8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005caa:	eba1 070e 	sub.w	r7, r1, lr
 8005cae:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 8005cb2:	f10e 0008 	add.w	r0, lr, #8
 8005cb6:	f108 36ff 	add.w	r6, r8, #4294967295
 8005cba:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8005cbe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005cc2:	ed50 5a01 	vldr	s11, [r0, #-4]
 8005cc6:	ed50 6a02 	vldr	s13, [r0, #-8]
 8005cca:	f001 050f 	and.w	r5, r1, #15
 8005cce:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8005cd2:	edd5 7a00 	vldr	s15, [r5]
 8005cd6:	0909      	lsrs	r1, r1, #4
 8005cd8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005cdc:	ed91 6a00 	vldr	s12, [r1]
 8005ce0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005ce4:	42b7      	cmp	r7, r6
 8005ce6:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005cea:	f100 0008 	add.w	r0, r0, #8
 8005cee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005cf2:	d1e4      	bne.n	8005cbe <forward_dense+0x43a>
 8005cf4:	f10a 0a01 	add.w	sl, sl, #1
 8005cf8:	44d0      	add	r8, sl
 8005cfa:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 8005cfe:	9908      	ldr	r1, [sp, #32]
 8005d00:	b321      	cbz	r1, 8005d4c <forward_dense+0x4c8>
 8005d02:	f898 1000 	ldrb.w	r1, [r8]
 8005d06:	edde 7a00 	vldr	s15, [lr]
 8005d0a:	0909      	lsrs	r1, r1, #4
 8005d0c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005d10:	edd1 6a00 	vldr	s13, [r1]
 8005d14:	9903      	ldr	r1, [sp, #12]
 8005d16:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005d1a:	445a      	add	r2, fp
 8005d1c:	44dc      	add	ip, fp
 8005d1e:	ee72 2a87 	vadd.f32	s5, s5, s14
 8005d22:	ece1 2a01 	vstmia	r1!, {s5}
 8005d26:	4589      	cmp	r9, r1
 8005d28:	9103      	str	r1, [sp, #12]
 8005d2a:	f67f af12 	bls.w	8005b52 <forward_dense+0x2ce>
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	f47f af4e 	bne.w	8005bd0 <forward_dense+0x34c>
 8005d34:	9907      	ldr	r1, [sp, #28]
 8005d36:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 8005bb0 <forward_dense+0x32c>
 8005d3a:	eef0 2a48 	vmov.f32	s5, s16
 8005d3e:	2900      	cmp	r1, #0
 8005d40:	f47f af4e 	bne.w	8005be0 <forward_dense+0x35c>
 8005d44:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8005d48:	4690      	mov	r8, r2
 8005d4a:	e7aa      	b.n	8005ca2 <forward_dense+0x41e>
 8005d4c:	9903      	ldr	r1, [sp, #12]
 8005d4e:	ee32 7a87 	vadd.f32	s14, s5, s14
 8005d52:	445a      	add	r2, fp
 8005d54:	eca1 7a01 	vstmia	r1!, {s14}
 8005d58:	4549      	cmp	r1, r9
 8005d5a:	9103      	str	r1, [sp, #12]
 8005d5c:	44dc      	add	ip, fp
 8005d5e:	f4ff af34 	bcc.w	8005bca <forward_dense+0x346>
 8005d62:	e6f6      	b.n	8005b52 <forward_dense+0x2ce>
 8005d64:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005d66:	9d06      	ldr	r5, [sp, #24]
 8005d68:	9101      	str	r1, [sp, #4]
 8005d6a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005d6c:	9100      	str	r1, [sp, #0]
 8005d6e:	4628      	mov	r0, r5
 8005d70:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005d72:	f000 fd6f 	bl	8006854 <forward_lite_dense_if32of32wf32>
 8005d76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d78:	462b      	mov	r3, r5
 8005d7a:	4413      	add	r3, r2
 8005d7c:	9306      	str	r3, [sp, #24]
 8005d7e:	e6f1      	b.n	8005b64 <forward_dense+0x2e0>
 8005d80:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8005d84:	f1b9 0f00 	cmp.w	r9, #0
 8005d88:	d016      	beq.n	8005db8 <forward_dense+0x534>
 8005d8a:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005d8e:	f000 ff77 	bl	8006c80 <ai_array_get_byte_size>
 8005d92:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8005d96:	4602      	mov	r2, r0
 8005d98:	4659      	mov	r1, fp
 8005d9a:	4640      	mov	r0, r8
 8005d9c:	f000 fe7e 	bl	8006a9c <st_int8_copy>
 8005da0:	e5c7      	b.n	8005932 <forward_dense+0xae>
 8005da2:	2b04      	cmp	r3, #4
 8005da4:	d00a      	beq.n	8005dbc <forward_dense+0x538>
 8005da6:	f04f 0900 	mov.w	r9, #0
 8005daa:	e5bd      	b.n	8005928 <forward_dense+0xa4>
 8005dac:	930d      	str	r3, [sp, #52]	; 0x34
 8005dae:	e595      	b.n	80058dc <forward_dense+0x58>
 8005db0:	2300      	movs	r3, #0
 8005db2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005db4:	460b      	mov	r3, r1
 8005db6:	e591      	b.n	80058dc <forward_dense+0x58>
 8005db8:	46c3      	mov	fp, r8
 8005dba:	e5ba      	b.n	8005932 <forward_dense+0xae>
 8005dbc:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 8005dc0:	e5b7      	b.n	8005932 <forward_dense+0xae>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	deff      	udf	#255	; 0xff
 8005dc8:	2300      	movs	r3, #0
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	deff      	udf	#255	; 0xff
 8005dce:	bf00      	nop

08005dd0 <forward_relu>:
 8005dd0:	6982      	ldr	r2, [r0, #24]
 8005dd2:	8813      	ldrh	r3, [r2, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d05b      	beq.n	8005e90 <forward_relu+0xc0>
 8005dd8:	6851      	ldr	r1, [r2, #4]
 8005dda:	684a      	ldr	r2, [r1, #4]
 8005ddc:	b102      	cbz	r2, 8005de0 <forward_relu+0x10>
 8005dde:	6812      	ldr	r2, [r2, #0]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	f000 8123 	beq.w	800602c <forward_relu+0x25c>
 8005de6:	b470      	push	{r4, r5, r6}
 8005de8:	6909      	ldr	r1, [r1, #16]
 8005dea:	b101      	cbz	r1, 8005dee <forward_relu+0x1e>
 8005dec:	6809      	ldr	r1, [r1, #0]
 8005dee:	69c6      	ldr	r6, [r0, #28]
 8005df0:	2e00      	cmp	r6, #0
 8005df2:	f000 8097 	beq.w	8005f24 <forward_relu+0x154>
 8005df6:	6873      	ldr	r3, [r6, #4]
 8005df8:	6988      	ldr	r0, [r1, #24]
 8005dfa:	6991      	ldr	r1, [r2, #24]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	f000 80c1 	beq.w	8005f84 <forward_relu+0x1b4>
 8005e02:	6893      	ldr	r3, [r2, #8]
 8005e04:	6880      	ldr	r0, [r0, #8]
 8005e06:	688c      	ldr	r4, [r1, #8]
 8005e08:	0a1b      	lsrs	r3, r3, #8
 8005e0a:	f000 80f2 	beq.w	8005ff2 <forward_relu+0x222>
 8005e0e:	68d5      	ldr	r5, [r2, #12]
 8005e10:	2201      	movs	r2, #1
 8005e12:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005e16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005e1a:	42ab      	cmp	r3, r5
 8005e1c:	fb01 f202 	mul.w	r2, r1, r2
 8005e20:	d1f9      	bne.n	8005e16 <forward_relu+0x46>
 8005e22:	68b3      	ldr	r3, [r6, #8]
 8005e24:	ed93 7a02 	vldr	s14, [r3, #8]
 8005e28:	edd3 6a00 	vldr	s13, [r3]
 8005e2c:	ed93 6a01 	vldr	s12, [r3, #4]
 8005e30:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005e34:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005e38:	3a01      	subs	r2, #1
 8005e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005e42:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8005e46:	d425      	bmi.n	8005e94 <forward_relu+0xc4>
 8005e48:	429c      	cmp	r4, r3
 8005e4a:	d81f      	bhi.n	8005e8c <forward_relu+0xbc>
 8005e4c:	1d1a      	adds	r2, r3, #4
 8005e4e:	1d01      	adds	r1, r0, #4
 8005e50:	e00d      	b.n	8005e6e <forward_relu+0x9e>
 8005e52:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e5a:	db03      	blt.n	8005e64 <forward_relu+0x94>
 8005e5c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005e60:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005e64:	3b08      	subs	r3, #8
 8005e66:	429c      	cmp	r4, r3
 8005e68:	ed61 7a01 	vstmdb	r1!, {s15}
 8005e6c:	d80e      	bhi.n	8005e8c <forward_relu+0xbc>
 8005e6e:	4613      	mov	r3, r2
 8005e70:	ed72 7a01 	vldmdb	r2!, {s15}
 8005e74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e7c:	d9e9      	bls.n	8005e52 <forward_relu+0x82>
 8005e7e:	3b08      	subs	r3, #8
 8005e80:	eef0 7a47 	vmov.f32	s15, s14
 8005e84:	429c      	cmp	r4, r3
 8005e86:	ed61 7a01 	vstmdb	r1!, {s15}
 8005e8a:	d9f0      	bls.n	8005e6e <forward_relu+0x9e>
 8005e8c:	bc70      	pop	{r4, r5, r6}
 8005e8e:	4770      	bx	lr
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	deff      	udf	#255	; 0xff
 8005e94:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e9c:	d11f      	bne.n	8005ede <forward_relu+0x10e>
 8005e9e:	429c      	cmp	r4, r3
 8005ea0:	d8f4      	bhi.n	8005e8c <forward_relu+0xbc>
 8005ea2:	1b1c      	subs	r4, r3, r4
 8005ea4:	f024 0403 	bic.w	r4, r4, #3
 8005ea8:	1d1a      	adds	r2, r3, #4
 8005eaa:	2500      	movs	r5, #0
 8005eac:	1b1b      	subs	r3, r3, r4
 8005eae:	1d01      	adds	r1, r0, #4
 8005eb0:	ed72 7a01 	vldmdb	r2!, {s15}
 8005eb4:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ebc:	dc0a      	bgt.n	8005ed4 <forward_relu+0x104>
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	f841 5d04 	str.w	r5, [r1, #-4]!
 8005ec4:	d0e2      	beq.n	8005e8c <forward_relu+0xbc>
 8005ec6:	ed72 7a01 	vldmdb	r2!, {s15}
 8005eca:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ed2:	ddf4      	ble.n	8005ebe <forward_relu+0xee>
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	ed61 7a01 	vstmdb	r1!, {s15}
 8005eda:	d1e9      	bne.n	8005eb0 <forward_relu+0xe0>
 8005edc:	e7d6      	b.n	8005e8c <forward_relu+0xbc>
 8005ede:	429c      	cmp	r4, r3
 8005ee0:	d8d4      	bhi.n	8005e8c <forward_relu+0xbc>
 8005ee2:	1b1c      	subs	r4, r3, r4
 8005ee4:	f024 0403 	bic.w	r4, r4, #3
 8005ee8:	1d1a      	adds	r2, r3, #4
 8005eea:	1d01      	adds	r1, r0, #4
 8005eec:	1b1b      	subs	r3, r3, r4
 8005eee:	ed72 7a01 	vldmdb	r2!, {s15}
 8005ef2:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005efa:	db0e      	blt.n	8005f1a <forward_relu+0x14a>
 8005efc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005f00:	4293      	cmp	r3, r2
 8005f02:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005f06:	ed61 7a01 	vstmdb	r1!, {s15}
 8005f0a:	d0bf      	beq.n	8005e8c <forward_relu+0xbc>
 8005f0c:	ed72 7a01 	vldmdb	r2!, {s15}
 8005f10:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f18:	daf0      	bge.n	8005efc <forward_relu+0x12c>
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	ed61 7a01 	vstmdb	r1!, {s15}
 8005f20:	d1e5      	bne.n	8005eee <forward_relu+0x11e>
 8005f22:	e7b3      	b.n	8005e8c <forward_relu+0xbc>
 8005f24:	6893      	ldr	r3, [r2, #8]
 8005f26:	6989      	ldr	r1, [r1, #24]
 8005f28:	6990      	ldr	r0, [r2, #24]
 8005f2a:	6889      	ldr	r1, [r1, #8]
 8005f2c:	6884      	ldr	r4, [r0, #8]
 8005f2e:	0a1b      	lsrs	r3, r3, #8
 8005f30:	d075      	beq.n	800601e <forward_relu+0x24e>
 8005f32:	68d5      	ldr	r5, [r2, #12]
 8005f34:	2201      	movs	r2, #1
 8005f36:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005f3a:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8005f3e:	429d      	cmp	r5, r3
 8005f40:	fb00 f202 	mul.w	r2, r0, r2
 8005f44:	d1f9      	bne.n	8005f3a <forward_relu+0x16a>
 8005f46:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8005f4a:	3b01      	subs	r3, #1
 8005f4c:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005f50:	4294      	cmp	r4, r2
 8005f52:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8005f56:	d899      	bhi.n	8005e8c <forward_relu+0xbc>
 8005f58:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006034 <forward_relu+0x264>
 8005f5c:	3204      	adds	r2, #4
 8005f5e:	3104      	adds	r1, #4
 8005f60:	4613      	mov	r3, r2
 8005f62:	ed72 7a01 	vldmdb	r2!, {s15}
 8005f66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f6e:	f1a3 0308 	sub.w	r3, r3, #8
 8005f72:	bfb8      	it	lt
 8005f74:	eef0 7a47 	vmovlt.f32	s15, s14
 8005f78:	429c      	cmp	r4, r3
 8005f7a:	ed61 7a01 	vstmdb	r1!, {s15}
 8005f7e:	d9ef      	bls.n	8005f60 <forward_relu+0x190>
 8005f80:	bc70      	pop	{r4, r5, r6}
 8005f82:	4770      	bx	lr
 8005f84:	688c      	ldr	r4, [r1, #8]
 8005f86:	6891      	ldr	r1, [r2, #8]
 8005f88:	6880      	ldr	r0, [r0, #8]
 8005f8a:	0a09      	lsrs	r1, r1, #8
 8005f8c:	d049      	beq.n	8006022 <forward_relu+0x252>
 8005f8e:	68d5      	ldr	r5, [r2, #12]
 8005f90:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8005f94:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005f98:	42aa      	cmp	r2, r5
 8005f9a:	fb01 f303 	mul.w	r3, r1, r3
 8005f9e:	d1f9      	bne.n	8005f94 <forward_relu+0x1c4>
 8005fa0:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8005fa4:	3a01      	subs	r2, #1
 8005fa6:	68b1      	ldr	r1, [r6, #8]
 8005fa8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005fac:	429c      	cmp	r4, r3
 8005fae:	ed91 7a00 	vldr	s14, [r1]
 8005fb2:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8005fb6:	f63f af69 	bhi.w	8005e8c <forward_relu+0xbc>
 8005fba:	2500      	movs	r5, #0
 8005fbc:	3304      	adds	r3, #4
 8005fbe:	1d02      	adds	r2, r0, #4
 8005fc0:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005fc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fcc:	f1a3 0104 	sub.w	r1, r3, #4
 8005fd0:	f1a3 0308 	sub.w	r3, r3, #8
 8005fd4:	d406      	bmi.n	8005fe4 <forward_relu+0x214>
 8005fd6:	429c      	cmp	r4, r3
 8005fd8:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005fdc:	f63f af56 	bhi.w	8005e8c <forward_relu+0xbc>
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	e7ed      	b.n	8005fc0 <forward_relu+0x1f0>
 8005fe4:	429c      	cmp	r4, r3
 8005fe6:	ed62 7a01 	vstmdb	r2!, {s15}
 8005fea:	f63f af4f 	bhi.w	8005e8c <forward_relu+0xbc>
 8005fee:	460b      	mov	r3, r1
 8005ff0:	e7e6      	b.n	8005fc0 <forward_relu+0x1f0>
 8005ff2:	68b3      	ldr	r3, [r6, #8]
 8005ff4:	ed93 7a02 	vldr	s14, [r3, #8]
 8005ff8:	edd3 6a00 	vldr	s13, [r3]
 8005ffc:	ed93 6a01 	vldr	s12, [r3, #4]
 8006000:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8006004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006008:	d401      	bmi.n	800600e <forward_relu+0x23e>
 800600a:	4623      	mov	r3, r4
 800600c:	e71e      	b.n	8005e4c <forward_relu+0x7c>
 800600e:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8006012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006016:	4623      	mov	r3, r4
 8006018:	f47f af63 	bne.w	8005ee2 <forward_relu+0x112>
 800601c:	e741      	b.n	8005ea2 <forward_relu+0xd2>
 800601e:	4622      	mov	r2, r4
 8006020:	e79a      	b.n	8005f58 <forward_relu+0x188>
 8006022:	68b2      	ldr	r2, [r6, #8]
 8006024:	4623      	mov	r3, r4
 8006026:	ed92 7a00 	vldr	s14, [r2]
 800602a:	e7c6      	b.n	8005fba <forward_relu+0x1ea>
 800602c:	2300      	movs	r3, #0
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	deff      	udf	#255	; 0xff
 8006032:	bf00      	nop
 8006034:	00000000 	.word	0x00000000

08006038 <forward_sm>:
 8006038:	6982      	ldr	r2, [r0, #24]
 800603a:	8813      	ldrh	r3, [r2, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d07c      	beq.n	800613a <forward_sm+0x102>
 8006040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006044:	ed2d 8b04 	vpush	{d8-d9}
 8006048:	6852      	ldr	r2, [r2, #4]
 800604a:	6854      	ldr	r4, [r2, #4]
 800604c:	b085      	sub	sp, #20
 800604e:	b104      	cbz	r4, 8006052 <forward_sm+0x1a>
 8006050:	6824      	ldr	r4, [r4, #0]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d076      	beq.n	8006144 <forward_sm+0x10c>
 8006056:	6913      	ldr	r3, [r2, #16]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d076      	beq.n	800614a <forward_sm+0x112>
 800605c:	681e      	ldr	r6, [r3, #0]
 800605e:	68a3      	ldr	r3, [r4, #8]
 8006060:	68e0      	ldr	r0, [r4, #12]
 8006062:	68f2      	ldr	r2, [r6, #12]
 8006064:	6845      	ldr	r5, [r0, #4]
 8006066:	6857      	ldr	r7, [r2, #4]
 8006068:	0a1b      	lsrs	r3, r3, #8
 800606a:	d068      	beq.n	800613e <forward_sm+0x106>
 800606c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006070:	2201      	movs	r2, #1
 8006072:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006076:	4298      	cmp	r0, r3
 8006078:	fb01 f202 	mul.w	r2, r1, r2
 800607c:	d1f9      	bne.n	8006072 <forward_sm+0x3a>
 800607e:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8006082:	69a2      	ldr	r2, [r4, #24]
 8006084:	69b3      	ldr	r3, [r6, #24]
 8006086:	6892      	ldr	r2, [r2, #8]
 8006088:	f8d3 8008 	ldr.w	r8, [r3, #8]
 800608c:	eb02 0309 	add.w	r3, r2, r9
 8006090:	429a      	cmp	r2, r3
 8006092:	9301      	str	r3, [sp, #4]
 8006094:	d24c      	bcs.n	8006130 <forward_sm+0xf8>
 8006096:	00bb      	lsls	r3, r7, #2
 8006098:	9303      	str	r3, [sp, #12]
 800609a:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 800609e:	00ab      	lsls	r3, r5, #2
 80060a0:	2d01      	cmp	r5, #1
 80060a2:	ed92 8a00 	vldr	s16, [r2]
 80060a6:	9302      	str	r3, [sp, #8]
 80060a8:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80060ac:	463e      	mov	r6, r7
 80060ae:	d93c      	bls.n	800612a <forward_sm+0xf2>
 80060b0:	1d13      	adds	r3, r2, #4
 80060b2:	ecf3 7a01 	vldmia	r3!, {s15}
 80060b6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80060ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060be:	bfb8      	it	lt
 80060c0:	eeb0 8a67 	vmovlt.f32	s16, s15
 80060c4:	429e      	cmp	r6, r3
 80060c6:	d1f4      	bne.n	80060b2 <forward_sm+0x7a>
 80060c8:	eddf 8a21 	vldr	s17, [pc, #132]	; 8006150 <forward_sm+0x118>
 80060cc:	4692      	mov	sl, r2
 80060ce:	46c3      	mov	fp, r8
 80060d0:	46c1      	mov	r9, r8
 80060d2:	2400      	movs	r4, #0
 80060d4:	ecba 0a01 	vldmia	sl!, {s0}
 80060d8:	ee30 0a48 	vsub.f32	s0, s0, s16
 80060dc:	f001 fd60 	bl	8007ba0 <expf>
 80060e0:	3401      	adds	r4, #1
 80060e2:	42a5      	cmp	r5, r4
 80060e4:	ee78 8a80 	vadd.f32	s17, s17, s0
 80060e8:	eca9 0a01 	vstmia	r9!, {s0}
 80060ec:	d8f2      	bhi.n	80060d4 <forward_sm+0x9c>
 80060ee:	eef5 8a40 	vcmp.f32	s17, #0.0
 80060f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060f6:	d00b      	beq.n	8006110 <forward_sm+0xd8>
 80060f8:	ee89 7a28 	vdiv.f32	s14, s18, s17
 80060fc:	2300      	movs	r3, #0
 80060fe:	3301      	adds	r3, #1
 8006100:	429d      	cmp	r5, r3
 8006102:	eddb 7a00 	vldr	s15, [fp]
 8006106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800610a:	eceb 7a01 	vstmia	fp!, {s15}
 800610e:	d8f6      	bhi.n	80060fe <forward_sm+0xc6>
 8006110:	9b03      	ldr	r3, [sp, #12]
 8006112:	9901      	ldr	r1, [sp, #4]
 8006114:	4498      	add	r8, r3
 8006116:	9b02      	ldr	r3, [sp, #8]
 8006118:	42b9      	cmp	r1, r7
 800611a:	463a      	mov	r2, r7
 800611c:	441e      	add	r6, r3
 800611e:	d907      	bls.n	8006130 <forward_sm+0xf8>
 8006120:	2d01      	cmp	r5, #1
 8006122:	ed92 8a00 	vldr	s16, [r2]
 8006126:	441f      	add	r7, r3
 8006128:	d8c2      	bhi.n	80060b0 <forward_sm+0x78>
 800612a:	2d00      	cmp	r5, #0
 800612c:	d0f0      	beq.n	8006110 <forward_sm+0xd8>
 800612e:	e7cb      	b.n	80060c8 <forward_sm+0x90>
 8006130:	b005      	add	sp, #20
 8006132:	ecbd 8b04 	vpop	{d8-d9}
 8006136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	deff      	udf	#255	; 0xff
 800613e:	f04f 0904 	mov.w	r9, #4
 8006142:	e79e      	b.n	8006082 <forward_sm+0x4a>
 8006144:	2300      	movs	r3, #0
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	deff      	udf	#255	; 0xff
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	deff      	udf	#255	; 0xff
 800614e:	bf00      	nop
 8006150:	00000000 	.word	0x00000000

08006154 <forward_ap>:
 8006154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006158:	6983      	ldr	r3, [r0, #24]
 800615a:	b09b      	sub	sp, #108	; 0x6c
 800615c:	881a      	ldrh	r2, [r3, #0]
 800615e:	900f      	str	r0, [sp, #60]	; 0x3c
 8006160:	2a00      	cmp	r2, #0
 8006162:	f000 80f8 	beq.w	8006356 <forward_ap+0x202>
 8006166:	6859      	ldr	r1, [r3, #4]
 8006168:	684b      	ldr	r3, [r1, #4]
 800616a:	b103      	cbz	r3, 800616e <forward_ap+0x1a>
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2a01      	cmp	r2, #1
 8006170:	f000 80f9 	beq.w	8006366 <forward_ap+0x212>
 8006174:	690a      	ldr	r2, [r1, #16]
 8006176:	2a00      	cmp	r2, #0
 8006178:	f000 80f8 	beq.w	800636c <forward_ap+0x218>
 800617c:	6811      	ldr	r1, [r2, #0]
 800617e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8006180:	68ca      	ldr	r2, [r1, #12]
 8006182:	6989      	ldr	r1, [r1, #24]
 8006184:	68d4      	ldr	r4, [r2, #12]
 8006186:	6895      	ldr	r5, [r2, #8]
 8006188:	688a      	ldr	r2, [r1, #8]
 800618a:	68d9      	ldr	r1, [r3, #12]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	9205      	str	r2, [sp, #20]
 8006190:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	9315      	str	r3, [sp, #84]	; 0x54
 8006196:	e9d1 7c02 	ldrd	r7, ip, [r1, #8]
 800619a:	e9d2 3600 	ldrd	r3, r6, [r2]
 800619e:	6a02      	ldr	r2, [r0, #32]
 80061a0:	970a      	str	r7, [sp, #40]	; 0x28
 80061a2:	920b      	str	r2, [sp, #44]	; 0x2c
 80061a4:	684f      	ldr	r7, [r1, #4]
 80061a6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80061a8:	69c1      	ldr	r1, [r0, #28]
 80061aa:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80061ac:	9013      	str	r0, [sp, #76]	; 0x4c
 80061ae:	4258      	negs	r0, r3
 80061b0:	9410      	str	r4, [sp, #64]	; 0x40
 80061b2:	9509      	str	r5, [sp, #36]	; 0x24
 80061b4:	9614      	str	r6, [sp, #80]	; 0x50
 80061b6:	9111      	str	r1, [sp, #68]	; 0x44
 80061b8:	9212      	str	r2, [sp, #72]	; 0x48
 80061ba:	9003      	str	r0, [sp, #12]
 80061bc:	2c00      	cmp	r4, #0
 80061be:	f000 80c7 	beq.w	8006350 <forward_ap+0x1fc>
 80061c2:	eb0c 0003 	add.w	r0, ip, r3
 80061c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80061ca:	9004      	str	r0, [sp, #16]
 80061cc:	fb07 f303 	mul.w	r3, r7, r3
 80061d0:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80061d4:	fb02 f301 	mul.w	r3, r2, r1
 80061d8:	ea4f 0a87 	mov.w	sl, r7, lsl #2
 80061dc:	9316      	str	r3, [sp, #88]	; 0x58
 80061de:	4273      	negs	r3, r6
 80061e0:	9317      	str	r3, [sp, #92]	; 0x5c
 80061e2:	fb05 f30a 	mul.w	r3, r5, sl
 80061e6:	9319      	str	r3, [sp, #100]	; 0x64
 80061e8:	2300      	movs	r3, #0
 80061ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061ee:	930c      	str	r3, [sp, #48]	; 0x30
 80061f0:	463d      	mov	r5, r7
 80061f2:	9b03      	ldr	r3, [sp, #12]
 80061f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061f6:	9804      	ldr	r0, [sp, #16]
 80061f8:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 80061fc:	4281      	cmp	r1, r0
 80061fe:	bf94      	ite	ls
 8006200:	185b      	addls	r3, r3, r1
 8006202:	181b      	addhi	r3, r3, r0
 8006204:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006206:	920e      	str	r2, [sp, #56]	; 0x38
 8006208:	9301      	str	r3, [sp, #4]
 800620a:	2900      	cmp	r1, #0
 800620c:	f000 8092 	beq.w	8006334 <forward_ap+0x1e0>
 8006210:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	fb00 f102 	mul.w	r1, r0, r2
 8006218:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800621a:	9318      	str	r3, [sp, #96]	; 0x60
 800621c:	9b05      	ldr	r3, [sp, #20]
 800621e:	9108      	str	r1, [sp, #32]
 8006220:	1882      	adds	r2, r0, r2
 8006222:	eb03 010a 	add.w	r1, r3, sl
 8006226:	9207      	str	r2, [sp, #28]
 8006228:	4698      	mov	r8, r3
 800622a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800622c:	2300      	movs	r3, #0
 800622e:	930d      	str	r3, [sp, #52]	; 0x34
 8006230:	2a00      	cmp	r2, #0
 8006232:	bfac      	ite	ge
 8006234:	9b08      	ldrge	r3, [sp, #32]
 8006236:	9c08      	ldrlt	r4, [sp, #32]
 8006238:	9206      	str	r2, [sp, #24]
 800623a:	bfa8      	it	ge
 800623c:	189c      	addge	r4, r3, r2
 800623e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006240:	9806      	ldr	r0, [sp, #24]
 8006242:	9e07      	ldr	r6, [sp, #28]
 8006244:	fb04 340a 	mla	r4, r4, sl, r3
 8006248:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800624a:	bfb8      	it	lt
 800624c:	2200      	movlt	r2, #0
 800624e:	42b3      	cmp	r3, r6
 8006250:	bf94      	ite	ls
 8006252:	18c0      	addls	r0, r0, r3
 8006254:	1980      	addhi	r0, r0, r6
 8006256:	eba2 0e00 	sub.w	lr, r2, r0
 800625a:	1a82      	subs	r2, r0, r2
 800625c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800625e:	9200      	str	r2, [sp, #0]
 8006260:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006262:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006266:	fb02 fe0e 	mul.w	lr, r2, lr
 800626a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800626c:	2b00      	cmp	r3, #0
 800626e:	bf08      	it	eq
 8006270:	4672      	moveq	r2, lr
 8006272:	9202      	str	r2, [sp, #8]
 8006274:	9b01      	ldr	r3, [sp, #4]
 8006276:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006278:	4293      	cmp	r3, r2
 800627a:	dd49      	ble.n	8006310 <forward_ap+0x1bc>
 800627c:	9b00      	ldr	r3, [sp, #0]
 800627e:	4694      	mov	ip, r2
 8006280:	fb0a 4003 	mla	r0, sl, r3, r4
 8006284:	2201      	movs	r2, #1
 8006286:	2700      	movs	r7, #0
 8006288:	9b00      	ldr	r3, [sp, #0]
 800628a:	441f      	add	r7, r3
 800628c:	45be      	cmp	lr, r7
 800628e:	d064      	beq.n	800635a <forward_ap+0x206>
 8006290:	42a0      	cmp	r0, r4
 8006292:	bf88      	it	hi
 8006294:	2600      	movhi	r6, #0
 8006296:	d932      	bls.n	80062fe <forward_ap+0x1aa>
 8006298:	4623      	mov	r3, r4
 800629a:	eb0a 0b04 	add.w	fp, sl, r4
 800629e:	b145      	cbz	r5, 80062b2 <forward_ap+0x15e>
 80062a0:	2a00      	cmp	r2, #0
 80062a2:	d05e      	beq.n	8006362 <forward_ap+0x20e>
 80062a4:	4642      	mov	r2, r8
 80062a6:	ecf3 7a01 	vldmia	r3!, {s15}
 80062aa:	459b      	cmp	fp, r3
 80062ac:	ece2 7a01 	vstmia	r2!, {s15}
 80062b0:	d1f9      	bne.n	80062a6 <forward_ap+0x152>
 80062b2:	46a3      	mov	fp, r4
 80062b4:	44d3      	add	fp, sl
 80062b6:	4558      	cmp	r0, fp
 80062b8:	d910      	bls.n	80062dc <forward_ap+0x188>
 80062ba:	2d00      	cmp	r5, #0
 80062bc:	d0fa      	beq.n	80062b4 <forward_ap+0x160>
 80062be:	4643      	mov	r3, r8
 80062c0:	465a      	mov	r2, fp
 80062c2:	ed93 7a00 	vldr	s14, [r3]
 80062c6:	ecf2 7a01 	vldmia	r2!, {s15}
 80062ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062ce:	ece3 7a01 	vstmia	r3!, {s15}
 80062d2:	428b      	cmp	r3, r1
 80062d4:	d1f5      	bne.n	80062c2 <forward_ap+0x16e>
 80062d6:	44d3      	add	fp, sl
 80062d8:	4558      	cmp	r0, fp
 80062da:	d8ee      	bhi.n	80062ba <forward_ap+0x166>
 80062dc:	b17e      	cbz	r6, 80062fe <forward_ap+0x1aa>
 80062de:	ee07 6a90 	vmov	s15, r6
 80062e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ea:	b145      	cbz	r5, 80062fe <forward_ap+0x1aa>
 80062ec:	4643      	mov	r3, r8
 80062ee:	edd3 7a00 	vldr	s15, [r3]
 80062f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f6:	ece3 7a01 	vstmia	r3!, {s15}
 80062fa:	4299      	cmp	r1, r3
 80062fc:	d1f7      	bne.n	80062ee <forward_ap+0x19a>
 80062fe:	9b01      	ldr	r3, [sp, #4]
 8006300:	f10c 0c01 	add.w	ip, ip, #1
 8006304:	4563      	cmp	r3, ip
 8006306:	444c      	add	r4, r9
 8006308:	4448      	add	r0, r9
 800630a:	f04f 0200 	mov.w	r2, #0
 800630e:	d1bb      	bne.n	8006288 <forward_ap+0x134>
 8006310:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006312:	9c07      	ldr	r4, [sp, #28]
 8006314:	9a06      	ldr	r2, [sp, #24]
 8006316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006318:	4402      	add	r2, r0
 800631a:	1a20      	subs	r0, r4, r0
 800631c:	9007      	str	r0, [sp, #28]
 800631e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006320:	3301      	adds	r3, #1
 8006322:	4298      	cmp	r0, r3
 8006324:	930d      	str	r3, [sp, #52]	; 0x34
 8006326:	44d0      	add	r8, sl
 8006328:	4451      	add	r1, sl
 800632a:	d181      	bne.n	8006230 <forward_ap+0xdc>
 800632c:	9b05      	ldr	r3, [sp, #20]
 800632e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006330:	4413      	add	r3, r2
 8006332:	9305      	str	r3, [sp, #20]
 8006334:	9a03      	ldr	r2, [sp, #12]
 8006336:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800633a:	440a      	add	r2, r1
 800633c:	9203      	str	r2, [sp, #12]
 800633e:	9a04      	ldr	r2, [sp, #16]
 8006340:	1a52      	subs	r2, r2, r1
 8006342:	9204      	str	r2, [sp, #16]
 8006344:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006346:	3301      	adds	r3, #1
 8006348:	429a      	cmp	r2, r3
 800634a:	930c      	str	r3, [sp, #48]	; 0x30
 800634c:	f47f af51 	bne.w	80061f2 <forward_ap+0x9e>
 8006350:	b01b      	add	sp, #108	; 0x6c
 8006352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006356:	6853      	ldr	r3, [r2, #4]
 8006358:	deff      	udf	#255	; 0xff
 800635a:	42a0      	cmp	r0, r4
 800635c:	9e02      	ldr	r6, [sp, #8]
 800635e:	d89b      	bhi.n	8006298 <forward_ap+0x144>
 8006360:	e7bc      	b.n	80062dc <forward_ap+0x188>
 8006362:	46a3      	mov	fp, r4
 8006364:	e7ab      	b.n	80062be <forward_ap+0x16a>
 8006366:	2300      	movs	r3, #0
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	deff      	udf	#255	; 0xff
 800636c:	68d3      	ldr	r3, [r2, #12]
 800636e:	deff      	udf	#255	; 0xff

08006370 <ai_conv2d_kernel_simple_opt_f32.constprop.0>:
 8006370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006374:	b08d      	sub	sp, #52	; 0x34
 8006376:	9003      	str	r0, [sp, #12]
 8006378:	9207      	str	r2, [sp, #28]
 800637a:	9308      	str	r3, [sp, #32]
 800637c:	461a      	mov	r2, r3
 800637e:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
 8006382:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8006384:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8006386:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 800638a:	910b      	str	r1, [sp, #44]	; 0x2c
 800638c:	fb00 f003 	mul.w	r0, r0, r3
 8006390:	9004      	str	r0, [sp, #16]
 8006392:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 8006396:	9009      	str	r0, [sp, #36]	; 0x24
 8006398:	2d00      	cmp	r5, #0
 800639a:	f000 80ef 	beq.w	800657c <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x20c>
 800639e:	fb00 f302 	mul.w	r3, r0, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	9306      	str	r3, [sp, #24]
 80063a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80063a8:	fb03 f302 	mul.w	r3, r3, r2
 80063ac:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80063b0:	9301      	str	r3, [sp, #4]
 80063b2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80063b4:	425b      	negs	r3, r3
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	2300      	movs	r3, #0
 80063ba:	00a4      	lsls	r4, r4, #2
 80063bc:	9302      	str	r3, [sp, #8]
 80063be:	0093      	lsls	r3, r2, #2
 80063c0:	9405      	str	r4, [sp, #20]
 80063c2:	930a      	str	r3, [sp, #40]	; 0x28
 80063c4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f2c0 80db 	blt.w	8006582 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x212>
 80063cc:	9e01      	ldr	r6, [sp, #4]
 80063ce:	9d04      	ldr	r5, [sp, #16]
 80063d0:	2000      	movs	r0, #0
 80063d2:	9b07      	ldr	r3, [sp, #28]
 80063d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80063d6:	9900      	ldr	r1, [sp, #0]
 80063d8:	fb05 3502 	mla	r5, r5, r2, r3
 80063dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063de:	440b      	add	r3, r1
 80063e0:	9919      	ldr	r1, [sp, #100]	; 0x64
 80063e2:	428b      	cmp	r3, r1
 80063e4:	bf94      	ite	ls
 80063e6:	ebc0 0003 	rsbls	r0, r0, r3
 80063ea:	ebc0 0001 	rsbhi	r0, r0, r1
 80063ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80063f0:	eba3 0a00 	sub.w	sl, r3, r0
 80063f4:	9b08      	ldr	r3, [sp, #32]
 80063f6:	f1bb 0f00 	cmp.w	fp, #0
 80063fa:	eba1 0900 	sub.w	r9, r1, r0
 80063fe:	eeb0 7a40 	vmov.f32	s14, s0
 8006402:	fb03 f000 	mul.w	r0, r3, r0
 8006406:	f340 80a1 	ble.w	800654c <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1dc>
 800640a:	f020 040f 	bic.w	r4, r0, #15
 800640e:	f104 38ff 	add.w	r8, r4, #4294967295
 8006412:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8006416:	f108 0801 	add.w	r8, r8, #1
 800641a:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 800641e:	fb02 fa0a 	mul.w	sl, r2, sl
 8006422:	fb02 f909 	mul.w	r9, r2, r9
 8006426:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800642a:	f04f 0c00 	mov.w	ip, #0
 800642e:	2c00      	cmp	r4, #0
 8006430:	bfd8      	it	le
 8006432:	2700      	movle	r7, #0
 8006434:	dd70      	ble.n	8006518 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1a8>
 8006436:	f106 0240 	add.w	r2, r6, #64	; 0x40
 800643a:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800643e:	2100      	movs	r1, #0
 8006440:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8006444:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8006448:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 800644c:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8006450:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8006454:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8006458:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 800645c:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8006460:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8006464:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8006468:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 800646c:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8006470:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8006474:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006478:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 800647c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006480:	3110      	adds	r1, #16
 8006482:	42a1      	cmp	r1, r4
 8006484:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8006488:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 800648c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8006490:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8006494:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8006498:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 800649c:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 80064a0:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80064a4:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 80064a8:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 80064ac:	eee5 7a25 	vfma.f32	s15, s10, s11
 80064b0:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 80064b4:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 80064b8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80064bc:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 80064c0:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 80064c4:	eee3 7a23 	vfma.f32	s15, s6, s7
 80064c8:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 80064cc:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 80064d0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80064d4:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 80064d8:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 80064dc:	eee5 7a25 	vfma.f32	s15, s10, s11
 80064e0:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 80064e4:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 80064e8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80064ec:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 80064f0:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 80064f4:	eee1 7a21 	vfma.f32	s15, s2, s3
 80064f8:	eee2 7a22 	vfma.f32	s15, s4, s5
 80064fc:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006500:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006504:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006508:	eee6 7a26 	vfma.f32	s15, s12, s13
 800650c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006510:	db96      	blt.n	8006440 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xd0>
 8006512:	4476      	add	r6, lr
 8006514:	4475      	add	r5, lr
 8006516:	4647      	mov	r7, r8
 8006518:	42b8      	cmp	r0, r7
 800651a:	dd10      	ble.n	800653e <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1ce>
 800651c:	463b      	mov	r3, r7
 800651e:	4631      	mov	r1, r6
 8006520:	462a      	mov	r2, r5
 8006522:	ecf2 6a01 	vldmia	r2!, {s13}
 8006526:	ecf1 7a01 	vldmia	r1!, {s15}
 800652a:	3301      	adds	r3, #1
 800652c:	4298      	cmp	r0, r3
 800652e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006532:	d1f6      	bne.n	8006522 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1b2>
 8006534:	1bc7      	subs	r7, r0, r7
 8006536:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 800653a:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 800653e:	f10c 0c01 	add.w	ip, ip, #1
 8006542:	45dc      	cmp	ip, fp
 8006544:	4456      	add	r6, sl
 8006546:	444d      	add	r5, r9
 8006548:	f47f af71 	bne.w	800642e <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xbe>
 800654c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800654e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006550:	9a03      	ldr	r2, [sp, #12]
 8006552:	9b02      	ldr	r3, [sp, #8]
 8006554:	ed82 7a00 	vstr	s14, [r2]
 8006558:	4401      	add	r1, r0
 800655a:	911c      	str	r1, [sp, #112]	; 0x70
 800655c:	9905      	ldr	r1, [sp, #20]
 800655e:	440a      	add	r2, r1
 8006560:	9203      	str	r2, [sp, #12]
 8006562:	9a00      	ldr	r2, [sp, #0]
 8006564:	9906      	ldr	r1, [sp, #24]
 8006566:	1a12      	subs	r2, r2, r0
 8006568:	9200      	str	r2, [sp, #0]
 800656a:	9a01      	ldr	r2, [sp, #4]
 800656c:	440a      	add	r2, r1
 800656e:	9201      	str	r2, [sp, #4]
 8006570:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006572:	3301      	adds	r3, #1
 8006574:	4293      	cmp	r3, r2
 8006576:	9302      	str	r3, [sp, #8]
 8006578:	f47f af24 	bne.w	80063c4 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x54>
 800657c:	b00d      	add	sp, #52	; 0x34
 800657e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006582:	9a00      	ldr	r2, [sp, #0]
 8006584:	9b04      	ldr	r3, [sp, #16]
 8006586:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006588:	4610      	mov	r0, r2
 800658a:	189d      	adds	r5, r3, r2
 800658c:	e721      	b.n	80063d2 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x62>
 800658e:	bf00      	nop

08006590 <forward_lite_conv2d_if32of32wf32>:
 8006590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006594:	ed2d 8b02 	vpush	{d8}
 8006598:	b09f      	sub	sp, #124	; 0x7c
 800659a:	af08      	add	r7, sp, #32
 800659c:	461c      	mov	r4, r3
 800659e:	62f9      	str	r1, [r7, #44]	; 0x2c
 80065a0:	63fc      	str	r4, [r7, #60]	; 0x3c
 80065a2:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 80065a6:	f8b7 40b0 	ldrh.w	r4, [r7, #176]	; 0xb0
 80065aa:	64fc      	str	r4, [r7, #76]	; 0x4c
 80065ac:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 80065b0:	f8b7 50b4 	ldrh.w	r5, [r7, #180]	; 0xb4
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	424e      	negs	r6, r1
 80065b8:	4686      	mov	lr, r0
 80065ba:	4694      	mov	ip, r2
 80065bc:	613a      	str	r2, [r7, #16]
 80065be:	e9d7 3a22 	ldrd	r3, sl, [r7, #136]	; 0x88
 80065c2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80065c6:	f8b7 00a8 	ldrh.w	r0, [r7, #168]	; 0xa8
 80065ca:	617d      	str	r5, [r7, #20]
 80065cc:	633e      	str	r6, [r7, #48]	; 0x30
 80065ce:	2c00      	cmp	r4, #0
 80065d0:	f000 8092 	beq.w	80066f8 <forward_lite_conv2d_if32of32wf32+0x168>
 80065d4:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 80065d8:	6379      	str	r1, [r7, #52]	; 0x34
 80065da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80065de:	eddf 0a9c 	vldr	s1, [pc, #624]	; 8006850 <forward_lite_conv2d_if32of32wf32+0x2c0>
 80065e2:	fb04 f202 	mul.w	r2, r4, r2
 80065e6:	fb03 f402 	mul.w	r4, r3, r2
 80065ea:	fb03 f201 	mul.w	r2, r3, r1
 80065ee:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80065f2:	63bc      	str	r4, [r7, #56]	; 0x38
 80065f4:	fb01 f10a 	mul.w	r1, r1, sl
 80065f8:	0089      	lsls	r1, r1, #2
 80065fa:	61b9      	str	r1, [r7, #24]
 80065fc:	fb05 f102 	mul.w	r1, r5, r2
 8006600:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006604:	fb06 f202 	mul.w	r2, r6, r2
 8006608:	0089      	lsls	r1, r1, #2
 800660a:	61f9      	str	r1, [r7, #28]
 800660c:	eb0e 0182 	add.w	r1, lr, r2, lsl #2
 8006610:	f10b 0207 	add.w	r2, fp, #7
 8006614:	62b9      	str	r1, [r7, #40]	; 0x28
 8006616:	f022 0107 	bic.w	r1, r2, #7
 800661a:	eb0c 0284 	add.w	r2, ip, r4, lsl #2
 800661e:	4240      	negs	r0, r0
 8006620:	60f9      	str	r1, [r7, #12]
 8006622:	60ba      	str	r2, [r7, #8]
 8006624:	f10c 4178 	add.w	r1, ip, #4160749568	; 0xf8000000
 8006628:	2200      	movs	r2, #0
 800662a:	4655      	mov	r5, sl
 800662c:	6538      	str	r0, [r7, #80]	; 0x50
 800662e:	6239      	str	r1, [r7, #32]
 8006630:	627a      	str	r2, [r7, #36]	; 0x24
 8006632:	46da      	mov	sl, fp
 8006634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006636:	2a00      	cmp	r2, #0
 8006638:	f2c0 80d7 	blt.w	80067ea <forward_lite_conv2d_if32of32wf32+0x25a>
 800663c:	2200      	movs	r2, #0
 800663e:	f8d7 b028 	ldr.w	fp, [r7, #40]	; 0x28
 8006642:	657a      	str	r2, [r7, #84]	; 0x54
 8006644:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006646:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800664a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800664e:	440a      	add	r2, r1
 8006650:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006652:	4282      	cmp	r2, r0
 8006654:	bf94      	ite	ls
 8006656:	ebc1 0102 	rsbls	r1, r1, r2
 800665a:	ebc1 0100 	rsbhi	r1, r1, r0
 800665e:	6a3a      	ldr	r2, [r7, #32]
 8006660:	6439      	str	r1, [r7, #64]	; 0x40
 8006662:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8006666:	d24d      	bcs.n	8006704 <forward_lite_conv2d_if32of32wf32+0x174>
 8006668:	b385      	cbz	r5, 80066cc <forward_lite_conv2d_if32of32wf32+0x13c>
 800666a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800666c:	2a00      	cmp	r2, #0
 800666e:	f000 80c1 	beq.w	80067f4 <forward_lite_conv2d_if32of32wf32+0x264>
 8006672:	4659      	mov	r1, fp
 8006674:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
 8006678:	693e      	ldr	r6, [r7, #16]
 800667a:	46d3      	mov	fp, sl
 800667c:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
 8006680:	4691      	mov	r9, r2
 8006682:	2400      	movs	r4, #0
 8006684:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006686:	ecb9 0a01 	vldmia	r9!, {s0}
 800668a:	9207      	str	r2, [sp, #28]
 800668c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800668e:	e9cd a205 	strd	sl, r2, [sp, #20]
 8006692:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006694:	9204      	str	r2, [sp, #16]
 8006696:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800669a:	9203      	str	r2, [sp, #12]
 800669c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80066a0:	9202      	str	r2, [sp, #8]
 80066a2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80066a6:	4640      	mov	r0, r8
 80066a8:	e9cd 5200 	strd	r5, r2, [sp]
 80066ac:	3401      	adds	r4, #1
 80066ae:	4632      	mov	r2, r6
 80066b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80066b4:	64b9      	str	r1, [r7, #72]	; 0x48
 80066b6:	f7ff fe5b 	bl	8006370 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 80066ba:	42a5      	cmp	r5, r4
 80066bc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80066be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066c2:	445e      	add	r6, fp
 80066c4:	f108 0804 	add.w	r8, r8, #4
 80066c8:	d1dc      	bne.n	8006684 <forward_lite_conv2d_if32of32wf32+0xf4>
 80066ca:	46da      	mov	sl, fp
 80066cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066ce:	69b8      	ldr	r0, [r7, #24]
 80066d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066d2:	4401      	add	r1, r0
 80066d4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80066d6:	6978      	ldr	r0, [r7, #20]
 80066d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066da:	4401      	add	r1, r0
 80066dc:	6339      	str	r1, [r7, #48]	; 0x30
 80066de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80066e0:	1a09      	subs	r1, r1, r0
 80066e2:	6379      	str	r1, [r7, #52]	; 0x34
 80066e4:	69f8      	ldr	r0, [r7, #28]
 80066e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066e8:	4401      	add	r1, r0
 80066ea:	62b9      	str	r1, [r7, #40]	; 0x28
 80066ec:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80066f0:	3201      	adds	r2, #1
 80066f2:	4291      	cmp	r1, r2
 80066f4:	627a      	str	r2, [r7, #36]	; 0x24
 80066f6:	d19d      	bne.n	8006634 <forward_lite_conv2d_if32of32wf32+0xa4>
 80066f8:	375c      	adds	r7, #92	; 0x5c
 80066fa:	46bd      	mov	sp, r7
 80066fc:	ecbd 8b02 	vpop	{d8}
 8006700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006704:	466a      	mov	r2, sp
 8006706:	ee08 2a10 	vmov	s16, r2
 800670a:	68fa      	ldr	r2, [r7, #12]
 800670c:	ebad 0d02 	sub.w	sp, sp, r2
 8006710:	aa08      	add	r2, sp, #32
 8006712:	2d00      	cmp	r5, #0
 8006714:	d03d      	beq.n	8006792 <forward_lite_conv2d_if32of32wf32+0x202>
 8006716:	6938      	ldr	r0, [r7, #16]
 8006718:	68bc      	ldr	r4, [r7, #8]
 800671a:	f8d7 902c 	ldr.w	r9, [r7, #44]	; 0x2c
 800671e:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 8006720:	4659      	mov	r1, fp
 8006722:	f04f 0800 	mov.w	r8, #0
 8006726:	46ab      	mov	fp, r5
 8006728:	4605      	mov	r5, r0
 800672a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800672c:	b138      	cbz	r0, 800673e <forward_lite_conv2d_if32of32wf32+0x1ae>
 800672e:	4628      	mov	r0, r5
 8006730:	4694      	mov	ip, r2
 8006732:	f850 eb04 	ldr.w	lr, [r0], #4
 8006736:	f84c eb04 	str.w	lr, [ip], #4
 800673a:	42a0      	cmp	r0, r4
 800673c:	d1f9      	bne.n	8006732 <forward_lite_conv2d_if32of32wf32+0x1a2>
 800673e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006740:	b358      	cbz	r0, 800679a <forward_lite_conv2d_if32of32wf32+0x20a>
 8006742:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006744:	ecb6 0a01 	vldmia	r6!, {s0}
 8006748:	9007      	str	r0, [sp, #28]
 800674a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800674c:	9006      	str	r0, [sp, #24]
 800674e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006750:	9005      	str	r0, [sp, #20]
 8006752:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8006754:	9004      	str	r0, [sp, #16]
 8006756:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800675a:	9003      	str	r0, [sp, #12]
 800675c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8006760:	9002      	str	r0, [sp, #8]
 8006762:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8006766:	f108 0801 	add.w	r8, r8, #1
 800676a:	e9cd b000 	strd	fp, r0, [sp]
 800676e:	e9c7 2111 	strd	r2, r1, [r7, #68]	; 0x44
 8006772:	4648      	mov	r0, r9
 8006774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006778:	f7ff fdfa 	bl	8006370 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 800677c:	45d8      	cmp	r8, fp
 800677e:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	; 0x44
 8006782:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006786:	4455      	add	r5, sl
 8006788:	4454      	add	r4, sl
 800678a:	f109 0904 	add.w	r9, r9, #4
 800678e:	d1cc      	bne.n	800672a <forward_lite_conv2d_if32of32wf32+0x19a>
 8006790:	465d      	mov	r5, fp
 8006792:	ee18 2a10 	vmov	r2, s16
 8006796:	4695      	mov	sp, r2
 8006798:	e798      	b.n	80066cc <forward_lite_conv2d_if32of32wf32+0x13c>
 800679a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800679c:	9007      	str	r0, [sp, #28]
 800679e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80067a0:	9006      	str	r0, [sp, #24]
 80067a2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80067a4:	9005      	str	r0, [sp, #20]
 80067a6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80067a8:	9004      	str	r0, [sp, #16]
 80067aa:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80067ae:	9003      	str	r0, [sp, #12]
 80067b0:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80067b4:	9002      	str	r0, [sp, #8]
 80067b6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80067ba:	eeb0 0a60 	vmov.f32	s0, s1
 80067be:	e9cd b000 	strd	fp, r0, [sp]
 80067c2:	f108 0801 	add.w	r8, r8, #1
 80067c6:	e9c7 2111 	strd	r2, r1, [r7, #68]	; 0x44
 80067ca:	4648      	mov	r0, r9
 80067cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80067d0:	f7ff fdce 	bl	8006370 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 80067d4:	45c3      	cmp	fp, r8
 80067d6:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	; 0x44
 80067da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067de:	4455      	add	r5, sl
 80067e0:	4454      	add	r4, sl
 80067e2:	f109 0904 	add.w	r9, r9, #4
 80067e6:	d1a0      	bne.n	800672a <forward_lite_conv2d_if32of32wf32+0x19a>
 80067e8:	e7d2      	b.n	8006790 <forward_lite_conv2d_if32of32wf32+0x200>
 80067ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067ec:	f8d7 b004 	ldr.w	fp, [r7, #4]
 80067f0:	657a      	str	r2, [r7, #84]	; 0x54
 80067f2:	e727      	b.n	8006644 <forward_lite_conv2d_if32of32wf32+0xb4>
 80067f4:	4659      	mov	r1, fp
 80067f6:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
 80067fa:	693e      	ldr	r6, [r7, #16]
 80067fc:	f8d7 9054 	ldr.w	r9, [r7, #84]	; 0x54
 8006800:	46d3      	mov	fp, sl
 8006802:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
 8006806:	4614      	mov	r4, r2
 8006808:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800680a:	9207      	str	r2, [sp, #28]
 800680c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800680e:	f8cd 9010 	str.w	r9, [sp, #16]
 8006812:	e9cd a205 	strd	sl, r2, [sp, #20]
 8006816:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800681a:	9203      	str	r2, [sp, #12]
 800681c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006820:	9202      	str	r2, [sp, #8]
 8006822:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8006826:	4640      	mov	r0, r8
 8006828:	e9cd 5200 	strd	r5, r2, [sp]
 800682c:	eeb0 0a60 	vmov.f32	s0, s1
 8006830:	4632      	mov	r2, r6
 8006832:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006836:	6579      	str	r1, [r7, #84]	; 0x54
 8006838:	3401      	adds	r4, #1
 800683a:	f7ff fd99 	bl	8006370 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 800683e:	42a5      	cmp	r5, r4
 8006840:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006842:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006846:	445e      	add	r6, fp
 8006848:	f108 0804 	add.w	r8, r8, #4
 800684c:	d1dc      	bne.n	8006808 <forward_lite_conv2d_if32of32wf32+0x278>
 800684e:	e73c      	b.n	80066ca <forward_lite_conv2d_if32of32wf32+0x13a>
 8006850:	00000000 	.word	0x00000000

08006854 <forward_lite_dense_if32of32wf32>:
 8006854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006858:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 800685c:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8006860:	4287      	cmp	r7, r0
 8006862:	f240 8106 	bls.w	8006a72 <forward_lite_dense_if32of32wf32+0x21e>
 8006866:	f1a6 0810 	sub.w	r8, r6, #16
 800686a:	ea4f 1818 	mov.w	r8, r8, lsr #4
 800686e:	f108 0801 	add.w	r8, r8, #1
 8006872:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8006876:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800687a:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800687e:	4605      	mov	r5, r0
 8006880:	f006 0a0f 	and.w	sl, r6, #15
 8006884:	2e0f      	cmp	r6, #15
 8006886:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8006a98 <forward_lite_dense_if32of32wf32+0x244>
 800688a:	f240 8101 	bls.w	8006a90 <forward_lite_dense_if32of32wf32+0x23c>
 800688e:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8006892:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8006896:	46b6      	mov	lr, r6
 8006898:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 800689c:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 80068a0:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 80068a4:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 80068a8:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 80068ac:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 80068b0:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 80068b4:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 80068b8:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 80068bc:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 80068c0:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 80068c4:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 80068c8:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 80068cc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80068d0:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 80068d4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80068d8:	f1ae 0e10 	sub.w	lr, lr, #16
 80068dc:	f1be 0f0f 	cmp.w	lr, #15
 80068e0:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 80068e4:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 80068e8:	eee5 7a86 	vfma.f32	s15, s11, s12
 80068ec:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80068f0:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80068f4:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 80068f8:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 80068fc:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8006900:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 8006904:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 8006908:	eee5 7a25 	vfma.f32	s15, s10, s11
 800690c:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 8006910:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 8006914:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006918:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 800691c:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8006920:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006924:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8006928:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 800692c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006930:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8006934:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8006938:	eee5 7a25 	vfma.f32	s15, s10, s11
 800693c:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8006940:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8006944:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006948:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 800694c:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8006950:	eee1 7a21 	vfma.f32	s15, s2, s3
 8006954:	eee2 7a22 	vfma.f32	s15, s4, s5
 8006958:	eee3 7a23 	vfma.f32	s15, s6, s7
 800695c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006960:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006964:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006968:	ee37 7a27 	vadd.f32	s14, s14, s15
 800696c:	d894      	bhi.n	8006898 <forward_lite_dense_if32of32wf32+0x44>
 800696e:	eb02 0e0b 	add.w	lr, r2, fp
 8006972:	4654      	mov	r4, sl
 8006974:	46c4      	mov	ip, r8
 8006976:	2c00      	cmp	r4, #0
 8006978:	d075      	beq.n	8006a66 <forward_lite_dense_if32of32wf32+0x212>
 800697a:	eddc 6a00 	vldr	s13, [ip]
 800697e:	edde 7a00 	vldr	s15, [lr]
 8006982:	2c01      	cmp	r4, #1
 8006984:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006988:	d06d      	beq.n	8006a66 <forward_lite_dense_if32of32wf32+0x212>
 800698a:	eddc 6a01 	vldr	s13, [ip, #4]
 800698e:	edde 7a01 	vldr	s15, [lr, #4]
 8006992:	2c02      	cmp	r4, #2
 8006994:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006998:	d065      	beq.n	8006a66 <forward_lite_dense_if32of32wf32+0x212>
 800699a:	eddc 6a02 	vldr	s13, [ip, #8]
 800699e:	edde 7a02 	vldr	s15, [lr, #8]
 80069a2:	2c03      	cmp	r4, #3
 80069a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80069a8:	d05d      	beq.n	8006a66 <forward_lite_dense_if32of32wf32+0x212>
 80069aa:	eddc 6a03 	vldr	s13, [ip, #12]
 80069ae:	edde 7a03 	vldr	s15, [lr, #12]
 80069b2:	2c04      	cmp	r4, #4
 80069b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80069b8:	d055      	beq.n	8006a66 <forward_lite_dense_if32of32wf32+0x212>
 80069ba:	eddc 6a04 	vldr	s13, [ip, #16]
 80069be:	edde 7a04 	vldr	s15, [lr, #16]
 80069c2:	2c05      	cmp	r4, #5
 80069c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80069c8:	d04d      	beq.n	8006a66 <forward_lite_dense_if32of32wf32+0x212>
 80069ca:	eddc 6a05 	vldr	s13, [ip, #20]
 80069ce:	edde 7a05 	vldr	s15, [lr, #20]
 80069d2:	2c06      	cmp	r4, #6
 80069d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80069d8:	d045      	beq.n	8006a66 <forward_lite_dense_if32of32wf32+0x212>
 80069da:	eddc 6a06 	vldr	s13, [ip, #24]
 80069de:	edde 7a06 	vldr	s15, [lr, #24]
 80069e2:	2c07      	cmp	r4, #7
 80069e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80069e8:	d03d      	beq.n	8006a66 <forward_lite_dense_if32of32wf32+0x212>
 80069ea:	eddc 6a07 	vldr	s13, [ip, #28]
 80069ee:	edde 7a07 	vldr	s15, [lr, #28]
 80069f2:	2c08      	cmp	r4, #8
 80069f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80069f8:	d035      	beq.n	8006a66 <forward_lite_dense_if32of32wf32+0x212>
 80069fa:	eddc 6a08 	vldr	s13, [ip, #32]
 80069fe:	edde 7a08 	vldr	s15, [lr, #32]
 8006a02:	2c09      	cmp	r4, #9
 8006a04:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006a08:	d02d      	beq.n	8006a66 <forward_lite_dense_if32of32wf32+0x212>
 8006a0a:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8006a0e:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 8006a12:	2c0a      	cmp	r4, #10
 8006a14:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006a18:	d025      	beq.n	8006a66 <forward_lite_dense_if32of32wf32+0x212>
 8006a1a:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8006a1e:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 8006a22:	2c0b      	cmp	r4, #11
 8006a24:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006a28:	d01d      	beq.n	8006a66 <forward_lite_dense_if32of32wf32+0x212>
 8006a2a:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8006a2e:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 8006a32:	2c0c      	cmp	r4, #12
 8006a34:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006a38:	d015      	beq.n	8006a66 <forward_lite_dense_if32of32wf32+0x212>
 8006a3a:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 8006a3e:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 8006a42:	3c0d      	subs	r4, #13
 8006a44:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006a48:	d00d      	beq.n	8006a66 <forward_lite_dense_if32of32wf32+0x212>
 8006a4a:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 8006a4e:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 8006a52:	2c01      	cmp	r4, #1
 8006a54:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006a58:	d005      	beq.n	8006a66 <forward_lite_dense_if32of32wf32+0x212>
 8006a5a:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 8006a5e:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 8006a62:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006a66:	444a      	add	r2, r9
 8006a68:	eca5 7a01 	vstmia	r5!, {s14}
 8006a6c:	42af      	cmp	r7, r5
 8006a6e:	f63f af09 	bhi.w	8006884 <forward_lite_dense_if32of32wf32+0x30>
 8006a72:	b15b      	cbz	r3, 8006a8c <forward_lite_dense_if32of32wf32+0x238>
 8006a74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a76:	b14a      	cbz	r2, 8006a8c <forward_lite_dense_if32of32wf32+0x238>
 8006a78:	edd0 7a00 	vldr	s15, [r0]
 8006a7c:	ecb3 7a01 	vldmia	r3!, {s14}
 8006a80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a84:	ece0 7a01 	vstmia	r0!, {s15}
 8006a88:	4287      	cmp	r7, r0
 8006a8a:	d1f5      	bne.n	8006a78 <forward_lite_dense_if32of32wf32+0x224>
 8006a8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a90:	4634      	mov	r4, r6
 8006a92:	4696      	mov	lr, r2
 8006a94:	468c      	mov	ip, r1
 8006a96:	e76e      	b.n	8006976 <forward_lite_dense_if32of32wf32+0x122>
 8006a98:	00000000 	.word	0x00000000

08006a9c <st_int8_copy>:
 8006a9c:	4288      	cmp	r0, r1
 8006a9e:	d057      	beq.n	8006b50 <st_int8_copy+0xb4>
 8006aa0:	2a00      	cmp	r2, #0
 8006aa2:	d055      	beq.n	8006b50 <st_int8_copy+0xb4>
 8006aa4:	4288      	cmp	r0, r1
 8006aa6:	d354      	bcc.n	8006b52 <st_int8_copy+0xb6>
 8006aa8:	078b      	lsls	r3, r1, #30
 8006aaa:	d102      	bne.n	8006ab2 <st_int8_copy+0x16>
 8006aac:	e009      	b.n	8006ac2 <st_int8_copy+0x26>
 8006aae:	2a00      	cmp	r2, #0
 8006ab0:	d05c      	beq.n	8006b6c <st_int8_copy+0xd0>
 8006ab2:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8006ab6:	f801 3b01 	strb.w	r3, [r1], #1
 8006aba:	078b      	lsls	r3, r1, #30
 8006abc:	f102 32ff 	add.w	r2, r2, #4294967295
 8006ac0:	d1f5      	bne.n	8006aae <st_int8_copy+0x12>
 8006ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ac6:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8006aca:	d069      	beq.n	8006ba0 <st_int8_copy+0x104>
 8006acc:	ea41 0300 	orr.w	r3, r1, r0
 8006ad0:	075b      	lsls	r3, r3, #29
 8006ad2:	d14c      	bne.n	8006b6e <st_int8_copy+0xd2>
 8006ad4:	f10e 33ff 	add.w	r3, lr, #4294967295
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d948      	bls.n	8006b6e <st_int8_copy+0xd2>
 8006adc:	f100 0310 	add.w	r3, r0, #16
 8006ae0:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8006ae4:	f101 0c10 	add.w	ip, r1, #16
 8006ae8:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8006aec:	ed13 6b04 	vldr	d6, [r3, #-16]
 8006af0:	ed13 7b02 	vldr	d7, [r3, #-8]
 8006af4:	3310      	adds	r3, #16
 8006af6:	4573      	cmp	r3, lr
 8006af8:	ed0c 6b04 	vstr	d6, [ip, #-16]
 8006afc:	ed0c 7b02 	vstr	d7, [ip, #-8]
 8006b00:	f10c 0c10 	add.w	ip, ip, #16
 8006b04:	d1f2      	bne.n	8006aec <st_int8_copy+0x50>
 8006b06:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8006b0a:	4421      	add	r1, r4
 8006b0c:	4420      	add	r0, r4
 8006b0e:	f002 0203 	and.w	r2, r2, #3
 8006b12:	b16b      	cbz	r3, 8006b30 <st_int8_copy+0x94>
 8006b14:	6804      	ldr	r4, [r0, #0]
 8006b16:	600c      	str	r4, [r1, #0]
 8006b18:	1e5c      	subs	r4, r3, #1
 8006b1a:	d005      	beq.n	8006b28 <st_int8_copy+0x8c>
 8006b1c:	6845      	ldr	r5, [r0, #4]
 8006b1e:	604d      	str	r5, [r1, #4]
 8006b20:	2c01      	cmp	r4, #1
 8006b22:	bf1c      	itt	ne
 8006b24:	6884      	ldrne	r4, [r0, #8]
 8006b26:	608c      	strne	r4, [r1, #8]
 8006b28:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8006b2c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8006b30:	b162      	cbz	r2, 8006b4c <st_int8_copy+0xb0>
 8006b32:	f990 3000 	ldrsb.w	r3, [r0]
 8006b36:	700b      	strb	r3, [r1, #0]
 8006b38:	3a01      	subs	r2, #1
 8006b3a:	d007      	beq.n	8006b4c <st_int8_copy+0xb0>
 8006b3c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8006b40:	704b      	strb	r3, [r1, #1]
 8006b42:	2a01      	cmp	r2, #1
 8006b44:	bf1c      	itt	ne
 8006b46:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 8006b4a:	708b      	strbne	r3, [r1, #2]
 8006b4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b50:	4770      	bx	lr
 8006b52:	1883      	adds	r3, r0, r2
 8006b54:	428b      	cmp	r3, r1
 8006b56:	d9a7      	bls.n	8006aa8 <st_int8_copy+0xc>
 8006b58:	4283      	cmp	r3, r0
 8006b5a:	440a      	add	r2, r1
 8006b5c:	d9f8      	bls.n	8006b50 <st_int8_copy+0xb4>
 8006b5e:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8006b62:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8006b66:	4283      	cmp	r3, r0
 8006b68:	d1f9      	bne.n	8006b5e <st_int8_copy+0xc2>
 8006b6a:	4770      	bx	lr
 8006b6c:	4770      	bx	lr
 8006b6e:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8006b72:	460b      	mov	r3, r1
 8006b74:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8006b78:	4684      	mov	ip, r0
 8006b7a:	f8dc 7000 	ldr.w	r7, [ip]
 8006b7e:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8006b82:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8006b86:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8006b8a:	f8c3 800c 	str.w	r8, [r3, #12]
 8006b8e:	601f      	str	r7, [r3, #0]
 8006b90:	605e      	str	r6, [r3, #4]
 8006b92:	609d      	str	r5, [r3, #8]
 8006b94:	3310      	adds	r3, #16
 8006b96:	459e      	cmp	lr, r3
 8006b98:	f10c 0c10 	add.w	ip, ip, #16
 8006b9c:	d1ed      	bne.n	8006b7a <st_int8_copy+0xde>
 8006b9e:	e7b2      	b.n	8006b06 <st_int8_copy+0x6a>
 8006ba0:	0893      	lsrs	r3, r2, #2
 8006ba2:	f002 0203 	and.w	r2, r2, #3
 8006ba6:	e7b4      	b.n	8006b12 <st_int8_copy+0x76>

08006ba8 <ai_array_to_buffer_fmt>:
 8006ba8:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d050      	beq.n	8006c52 <ai_array_to_buffer_fmt+0xaa>
 8006bb0:	4b2a      	ldr	r3, [pc, #168]	; (8006c5c <ai_array_to_buffer_fmt+0xb4>)
 8006bb2:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d00b      	beq.n	8006bd2 <ai_array_to_buffer_fmt+0x2a>
 8006bba:	dc1c      	bgt.n	8006bf6 <ai_array_to_buffer_fmt+0x4e>
 8006bbc:	4b28      	ldr	r3, [pc, #160]	; (8006c60 <ai_array_to_buffer_fmt+0xb8>)
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d007      	beq.n	8006bd2 <ai_array_to_buffer_fmt+0x2a>
 8006bc2:	dd0b      	ble.n	8006bdc <ai_array_to_buffer_fmt+0x34>
 8006bc4:	4b27      	ldr	r3, [pc, #156]	; (8006c64 <ai_array_to_buffer_fmt+0xbc>)
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d003      	beq.n	8006bd2 <ai_array_to_buffer_fmt+0x2a>
 8006bca:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d131      	bne.n	8006c36 <ai_array_to_buffer_fmt+0x8e>
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006bd8:	4318      	orrs	r0, r3
 8006bda:	4770      	bx	lr
 8006bdc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d0f6      	beq.n	8006bd2 <ai_array_to_buffer_fmt+0x2a>
 8006be4:	dd2c      	ble.n	8006c40 <ai_array_to_buffer_fmt+0x98>
 8006be6:	4b20      	ldr	r3, [pc, #128]	; (8006c68 <ai_array_to_buffer_fmt+0xc0>)
 8006be8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006bec:	429a      	cmp	r2, r3
 8006bee:	bf18      	it	ne
 8006bf0:	2340      	movne	r3, #64	; 0x40
 8006bf2:	4318      	orrs	r0, r3
 8006bf4:	4770      	bx	lr
 8006bf6:	4b1d      	ldr	r3, [pc, #116]	; (8006c6c <ai_array_to_buffer_fmt+0xc4>)
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d0ea      	beq.n	8006bd2 <ai_array_to_buffer_fmt+0x2a>
 8006bfc:	dd0e      	ble.n	8006c1c <ai_array_to_buffer_fmt+0x74>
 8006bfe:	4b1c      	ldr	r3, [pc, #112]	; (8006c70 <ai_array_to_buffer_fmt+0xc8>)
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d0e6      	beq.n	8006bd2 <ai_array_to_buffer_fmt+0x2a>
 8006c04:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d0e2      	beq.n	8006bd2 <ai_array_to_buffer_fmt+0x2a>
 8006c0c:	4b19      	ldr	r3, [pc, #100]	; (8006c74 <ai_array_to_buffer_fmt+0xcc>)
 8006c0e:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006c12:	429a      	cmp	r2, r3
 8006c14:	bf18      	it	ne
 8006c16:	2340      	movne	r3, #64	; 0x40
 8006c18:	4318      	orrs	r0, r3
 8006c1a:	4770      	bx	lr
 8006c1c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d0d6      	beq.n	8006bd2 <ai_array_to_buffer_fmt+0x2a>
 8006c24:	3307      	adds	r3, #7
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d0d3      	beq.n	8006bd2 <ai_array_to_buffer_fmt+0x2a>
 8006c2a:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	bf18      	it	ne
 8006c32:	2340      	movne	r3, #64	; 0x40
 8006c34:	e7ce      	b.n	8006bd4 <ai_array_to_buffer_fmt+0x2c>
 8006c36:	4b10      	ldr	r3, [pc, #64]	; (8006c78 <ai_array_to_buffer_fmt+0xd0>)
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	bf18      	it	ne
 8006c3c:	2340      	movne	r3, #64	; 0x40
 8006c3e:	e7c9      	b.n	8006bd4 <ai_array_to_buffer_fmt+0x2c>
 8006c40:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d0c4      	beq.n	8006bd2 <ai_array_to_buffer_fmt+0x2a>
 8006c48:	3380      	adds	r3, #128	; 0x80
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	bf18      	it	ne
 8006c4e:	2340      	movne	r3, #64	; 0x40
 8006c50:	e7c0      	b.n	8006bd4 <ai_array_to_buffer_fmt+0x2c>
 8006c52:	4b0a      	ldr	r3, [pc, #40]	; (8006c7c <ai_array_to_buffer_fmt+0xd4>)
 8006c54:	4003      	ands	r3, r0
 8006c56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c5a:	e7bb      	b.n	8006bd4 <ai_array_to_buffer_fmt+0x2c>
 8006c5c:	00840040 	.word	0x00840040
 8006c60:	00040840 	.word	0x00040840
 8006c64:	00041040 	.word	0x00041040
 8006c68:	00040447 	.word	0x00040447
 8006c6c:	00840840 	.word	0x00840840
 8006c70:	00841040 	.word	0x00841040
 8006c74:	0084084f 	.word	0x0084084f
 8006c78:	0004084f 	.word	0x0004084f
 8006c7c:	00803fff 	.word	0x00803fff

08006c80 <ai_array_get_byte_size>:
 8006c80:	b319      	cbz	r1, 8006cca <ai_array_get_byte_size+0x4a>
 8006c82:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8006c86:	fb03 f101 	mul.w	r1, r3, r1
 8006c8a:	3107      	adds	r1, #7
 8006c8c:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8006c90:	f021 0307 	bic.w	r3, r1, #7
 8006c94:	2a04      	cmp	r2, #4
 8006c96:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8006c9a:	fa23 f101 	lsr.w	r1, r3, r1
 8006c9e:	ea4f 10e0 	mov.w	r0, r0, asr #7
 8006ca2:	d00b      	beq.n	8006cbc <ai_array_get_byte_size+0x3c>
 8006ca4:	2a08      	cmp	r2, #8
 8006ca6:	d002      	beq.n	8006cae <ai_array_get_byte_size+0x2e>
 8006ca8:	3107      	adds	r1, #7
 8006caa:	08c8      	lsrs	r0, r1, #3
 8006cac:	4770      	bx	lr
 8006cae:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8006cb2:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8006cb6:	3107      	adds	r1, #7
 8006cb8:	08c8      	lsrs	r0, r1, #3
 8006cba:	4770      	bx	lr
 8006cbc:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8006cc0:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8006cc4:	3107      	adds	r1, #7
 8006cc6:	08c8      	lsrs	r0, r1, #3
 8006cc8:	4770      	bx	lr
 8006cca:	4608      	mov	r0, r1
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop

08006cd0 <ai_array_get_data_byte_size>:
 8006cd0:	b169      	cbz	r1, 8006cee <ai_array_get_data_byte_size+0x1e>
 8006cd2:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 8006cd6:	fb02 f101 	mul.w	r1, r2, r1
 8006cda:	1dcb      	adds	r3, r1, #7
 8006cdc:	f023 0307 	bic.w	r3, r3, #7
 8006ce0:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8006ce4:	fa23 f000 	lsr.w	r0, r3, r0
 8006ce8:	3007      	adds	r0, #7
 8006cea:	08c0      	lsrs	r0, r0, #3
 8006cec:	4770      	bx	lr
 8006cee:	4608      	mov	r0, r1
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop

08006cf4 <ai_version_get>:
 8006cf4:	0212      	lsls	r2, r2, #8
 8006cf6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006cfa:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8006cfe:	4770      	bx	lr

08006d00 <get_tensor_byte_size>:
 8006d00:	b410      	push	{r4}
 8006d02:	6983      	ldr	r3, [r0, #24]
 8006d04:	68c4      	ldr	r4, [r0, #12]
 8006d06:	6941      	ldr	r1, [r0, #20]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68e0      	ldr	r0, [r4, #12]
 8006d0c:	4a07      	ldr	r2, [pc, #28]	; (8006d2c <get_tensor_byte_size+0x2c>)
 8006d0e:	68c9      	ldr	r1, [r1, #12]
 8006d10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d14:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006d18:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006d1c:	fb01 f000 	mul.w	r0, r1, r0
 8006d20:	4293      	cmp	r3, r2
 8006d22:	bf04      	itt	eq
 8006d24:	3007      	addeq	r0, #7
 8006d26:	08c0      	lsreq	r0, r0, #3
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	000400c0 	.word	0x000400c0

08006d30 <sbrk_aligned>:
 8006d30:	b570      	push	{r4, r5, r6, lr}
 8006d32:	4e0e      	ldr	r6, [pc, #56]	; (8006d6c <sbrk_aligned+0x3c>)
 8006d34:	460c      	mov	r4, r1
 8006d36:	6831      	ldr	r1, [r6, #0]
 8006d38:	4605      	mov	r5, r0
 8006d3a:	b911      	cbnz	r1, 8006d42 <sbrk_aligned+0x12>
 8006d3c:	f000 f9f8 	bl	8007130 <_sbrk_r>
 8006d40:	6030      	str	r0, [r6, #0]
 8006d42:	4621      	mov	r1, r4
 8006d44:	4628      	mov	r0, r5
 8006d46:	f000 f9f3 	bl	8007130 <_sbrk_r>
 8006d4a:	1c43      	adds	r3, r0, #1
 8006d4c:	d00a      	beq.n	8006d64 <sbrk_aligned+0x34>
 8006d4e:	1cc4      	adds	r4, r0, #3
 8006d50:	f024 0403 	bic.w	r4, r4, #3
 8006d54:	42a0      	cmp	r0, r4
 8006d56:	d007      	beq.n	8006d68 <sbrk_aligned+0x38>
 8006d58:	1a21      	subs	r1, r4, r0
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	f000 f9e8 	bl	8007130 <_sbrk_r>
 8006d60:	3001      	adds	r0, #1
 8006d62:	d101      	bne.n	8006d68 <sbrk_aligned+0x38>
 8006d64:	f04f 34ff 	mov.w	r4, #4294967295
 8006d68:	4620      	mov	r0, r4
 8006d6a:	bd70      	pop	{r4, r5, r6, pc}
 8006d6c:	20014bf8 	.word	0x20014bf8

08006d70 <_malloc_r>:
 8006d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d74:	1ccd      	adds	r5, r1, #3
 8006d76:	f025 0503 	bic.w	r5, r5, #3
 8006d7a:	3508      	adds	r5, #8
 8006d7c:	2d0c      	cmp	r5, #12
 8006d7e:	bf38      	it	cc
 8006d80:	250c      	movcc	r5, #12
 8006d82:	2d00      	cmp	r5, #0
 8006d84:	4607      	mov	r7, r0
 8006d86:	db01      	blt.n	8006d8c <_malloc_r+0x1c>
 8006d88:	42a9      	cmp	r1, r5
 8006d8a:	d905      	bls.n	8006d98 <_malloc_r+0x28>
 8006d8c:	230c      	movs	r3, #12
 8006d8e:	603b      	str	r3, [r7, #0]
 8006d90:	2600      	movs	r6, #0
 8006d92:	4630      	mov	r0, r6
 8006d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d98:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006e6c <_malloc_r+0xfc>
 8006d9c:	f000 f868 	bl	8006e70 <__malloc_lock>
 8006da0:	f8d8 3000 	ldr.w	r3, [r8]
 8006da4:	461c      	mov	r4, r3
 8006da6:	bb5c      	cbnz	r4, 8006e00 <_malloc_r+0x90>
 8006da8:	4629      	mov	r1, r5
 8006daa:	4638      	mov	r0, r7
 8006dac:	f7ff ffc0 	bl	8006d30 <sbrk_aligned>
 8006db0:	1c43      	adds	r3, r0, #1
 8006db2:	4604      	mov	r4, r0
 8006db4:	d155      	bne.n	8006e62 <_malloc_r+0xf2>
 8006db6:	f8d8 4000 	ldr.w	r4, [r8]
 8006dba:	4626      	mov	r6, r4
 8006dbc:	2e00      	cmp	r6, #0
 8006dbe:	d145      	bne.n	8006e4c <_malloc_r+0xdc>
 8006dc0:	2c00      	cmp	r4, #0
 8006dc2:	d048      	beq.n	8006e56 <_malloc_r+0xe6>
 8006dc4:	6823      	ldr	r3, [r4, #0]
 8006dc6:	4631      	mov	r1, r6
 8006dc8:	4638      	mov	r0, r7
 8006dca:	eb04 0903 	add.w	r9, r4, r3
 8006dce:	f000 f9af 	bl	8007130 <_sbrk_r>
 8006dd2:	4581      	cmp	r9, r0
 8006dd4:	d13f      	bne.n	8006e56 <_malloc_r+0xe6>
 8006dd6:	6821      	ldr	r1, [r4, #0]
 8006dd8:	1a6d      	subs	r5, r5, r1
 8006dda:	4629      	mov	r1, r5
 8006ddc:	4638      	mov	r0, r7
 8006dde:	f7ff ffa7 	bl	8006d30 <sbrk_aligned>
 8006de2:	3001      	adds	r0, #1
 8006de4:	d037      	beq.n	8006e56 <_malloc_r+0xe6>
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	442b      	add	r3, r5
 8006dea:	6023      	str	r3, [r4, #0]
 8006dec:	f8d8 3000 	ldr.w	r3, [r8]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d038      	beq.n	8006e66 <_malloc_r+0xf6>
 8006df4:	685a      	ldr	r2, [r3, #4]
 8006df6:	42a2      	cmp	r2, r4
 8006df8:	d12b      	bne.n	8006e52 <_malloc_r+0xe2>
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	605a      	str	r2, [r3, #4]
 8006dfe:	e00f      	b.n	8006e20 <_malloc_r+0xb0>
 8006e00:	6822      	ldr	r2, [r4, #0]
 8006e02:	1b52      	subs	r2, r2, r5
 8006e04:	d41f      	bmi.n	8006e46 <_malloc_r+0xd6>
 8006e06:	2a0b      	cmp	r2, #11
 8006e08:	d917      	bls.n	8006e3a <_malloc_r+0xca>
 8006e0a:	1961      	adds	r1, r4, r5
 8006e0c:	42a3      	cmp	r3, r4
 8006e0e:	6025      	str	r5, [r4, #0]
 8006e10:	bf18      	it	ne
 8006e12:	6059      	strne	r1, [r3, #4]
 8006e14:	6863      	ldr	r3, [r4, #4]
 8006e16:	bf08      	it	eq
 8006e18:	f8c8 1000 	streq.w	r1, [r8]
 8006e1c:	5162      	str	r2, [r4, r5]
 8006e1e:	604b      	str	r3, [r1, #4]
 8006e20:	4638      	mov	r0, r7
 8006e22:	f104 060b 	add.w	r6, r4, #11
 8006e26:	f000 f829 	bl	8006e7c <__malloc_unlock>
 8006e2a:	f026 0607 	bic.w	r6, r6, #7
 8006e2e:	1d23      	adds	r3, r4, #4
 8006e30:	1af2      	subs	r2, r6, r3
 8006e32:	d0ae      	beq.n	8006d92 <_malloc_r+0x22>
 8006e34:	1b9b      	subs	r3, r3, r6
 8006e36:	50a3      	str	r3, [r4, r2]
 8006e38:	e7ab      	b.n	8006d92 <_malloc_r+0x22>
 8006e3a:	42a3      	cmp	r3, r4
 8006e3c:	6862      	ldr	r2, [r4, #4]
 8006e3e:	d1dd      	bne.n	8006dfc <_malloc_r+0x8c>
 8006e40:	f8c8 2000 	str.w	r2, [r8]
 8006e44:	e7ec      	b.n	8006e20 <_malloc_r+0xb0>
 8006e46:	4623      	mov	r3, r4
 8006e48:	6864      	ldr	r4, [r4, #4]
 8006e4a:	e7ac      	b.n	8006da6 <_malloc_r+0x36>
 8006e4c:	4634      	mov	r4, r6
 8006e4e:	6876      	ldr	r6, [r6, #4]
 8006e50:	e7b4      	b.n	8006dbc <_malloc_r+0x4c>
 8006e52:	4613      	mov	r3, r2
 8006e54:	e7cc      	b.n	8006df0 <_malloc_r+0x80>
 8006e56:	230c      	movs	r3, #12
 8006e58:	603b      	str	r3, [r7, #0]
 8006e5a:	4638      	mov	r0, r7
 8006e5c:	f000 f80e 	bl	8006e7c <__malloc_unlock>
 8006e60:	e797      	b.n	8006d92 <_malloc_r+0x22>
 8006e62:	6025      	str	r5, [r4, #0]
 8006e64:	e7dc      	b.n	8006e20 <_malloc_r+0xb0>
 8006e66:	605b      	str	r3, [r3, #4]
 8006e68:	deff      	udf	#255	; 0xff
 8006e6a:	bf00      	nop
 8006e6c:	20014bf4 	.word	0x20014bf4

08006e70 <__malloc_lock>:
 8006e70:	4801      	ldr	r0, [pc, #4]	; (8006e78 <__malloc_lock+0x8>)
 8006e72:	f000 b9aa 	b.w	80071ca <__retarget_lock_acquire_recursive>
 8006e76:	bf00      	nop
 8006e78:	20014d3c 	.word	0x20014d3c

08006e7c <__malloc_unlock>:
 8006e7c:	4801      	ldr	r0, [pc, #4]	; (8006e84 <__malloc_unlock+0x8>)
 8006e7e:	f000 b9a5 	b.w	80071cc <__retarget_lock_release_recursive>
 8006e82:	bf00      	nop
 8006e84:	20014d3c 	.word	0x20014d3c

08006e88 <std>:
 8006e88:	2300      	movs	r3, #0
 8006e8a:	b510      	push	{r4, lr}
 8006e8c:	4604      	mov	r4, r0
 8006e8e:	e9c0 3300 	strd	r3, r3, [r0]
 8006e92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e96:	6083      	str	r3, [r0, #8]
 8006e98:	8181      	strh	r1, [r0, #12]
 8006e9a:	6643      	str	r3, [r0, #100]	; 0x64
 8006e9c:	81c2      	strh	r2, [r0, #14]
 8006e9e:	6183      	str	r3, [r0, #24]
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	2208      	movs	r2, #8
 8006ea4:	305c      	adds	r0, #92	; 0x5c
 8006ea6:	f000 f906 	bl	80070b6 <memset>
 8006eaa:	4b0d      	ldr	r3, [pc, #52]	; (8006ee0 <std+0x58>)
 8006eac:	6263      	str	r3, [r4, #36]	; 0x24
 8006eae:	4b0d      	ldr	r3, [pc, #52]	; (8006ee4 <std+0x5c>)
 8006eb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006eb2:	4b0d      	ldr	r3, [pc, #52]	; (8006ee8 <std+0x60>)
 8006eb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006eb6:	4b0d      	ldr	r3, [pc, #52]	; (8006eec <std+0x64>)
 8006eb8:	6323      	str	r3, [r4, #48]	; 0x30
 8006eba:	4b0d      	ldr	r3, [pc, #52]	; (8006ef0 <std+0x68>)
 8006ebc:	6224      	str	r4, [r4, #32]
 8006ebe:	429c      	cmp	r4, r3
 8006ec0:	d006      	beq.n	8006ed0 <std+0x48>
 8006ec2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006ec6:	4294      	cmp	r4, r2
 8006ec8:	d002      	beq.n	8006ed0 <std+0x48>
 8006eca:	33d0      	adds	r3, #208	; 0xd0
 8006ecc:	429c      	cmp	r4, r3
 8006ece:	d105      	bne.n	8006edc <std+0x54>
 8006ed0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ed8:	f000 b976 	b.w	80071c8 <__retarget_lock_init_recursive>
 8006edc:	bd10      	pop	{r4, pc}
 8006ede:	bf00      	nop
 8006ee0:	08007031 	.word	0x08007031
 8006ee4:	08007053 	.word	0x08007053
 8006ee8:	0800708b 	.word	0x0800708b
 8006eec:	080070af 	.word	0x080070af
 8006ef0:	20014bfc 	.word	0x20014bfc

08006ef4 <stdio_exit_handler>:
 8006ef4:	4a02      	ldr	r2, [pc, #8]	; (8006f00 <stdio_exit_handler+0xc>)
 8006ef6:	4903      	ldr	r1, [pc, #12]	; (8006f04 <stdio_exit_handler+0x10>)
 8006ef8:	4803      	ldr	r0, [pc, #12]	; (8006f08 <stdio_exit_handler+0x14>)
 8006efa:	f000 b869 	b.w	8006fd0 <_fwalk_sglue>
 8006efe:	bf00      	nop
 8006f00:	20000dbc 	.word	0x20000dbc
 8006f04:	0800791d 	.word	0x0800791d
 8006f08:	20000dc8 	.word	0x20000dc8

08006f0c <cleanup_stdio>:
 8006f0c:	6841      	ldr	r1, [r0, #4]
 8006f0e:	4b0c      	ldr	r3, [pc, #48]	; (8006f40 <cleanup_stdio+0x34>)
 8006f10:	4299      	cmp	r1, r3
 8006f12:	b510      	push	{r4, lr}
 8006f14:	4604      	mov	r4, r0
 8006f16:	d001      	beq.n	8006f1c <cleanup_stdio+0x10>
 8006f18:	f000 fd00 	bl	800791c <_fflush_r>
 8006f1c:	68a1      	ldr	r1, [r4, #8]
 8006f1e:	4b09      	ldr	r3, [pc, #36]	; (8006f44 <cleanup_stdio+0x38>)
 8006f20:	4299      	cmp	r1, r3
 8006f22:	d002      	beq.n	8006f2a <cleanup_stdio+0x1e>
 8006f24:	4620      	mov	r0, r4
 8006f26:	f000 fcf9 	bl	800791c <_fflush_r>
 8006f2a:	68e1      	ldr	r1, [r4, #12]
 8006f2c:	4b06      	ldr	r3, [pc, #24]	; (8006f48 <cleanup_stdio+0x3c>)
 8006f2e:	4299      	cmp	r1, r3
 8006f30:	d004      	beq.n	8006f3c <cleanup_stdio+0x30>
 8006f32:	4620      	mov	r0, r4
 8006f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f38:	f000 bcf0 	b.w	800791c <_fflush_r>
 8006f3c:	bd10      	pop	{r4, pc}
 8006f3e:	bf00      	nop
 8006f40:	20014bfc 	.word	0x20014bfc
 8006f44:	20014c64 	.word	0x20014c64
 8006f48:	20014ccc 	.word	0x20014ccc

08006f4c <global_stdio_init.part.0>:
 8006f4c:	b510      	push	{r4, lr}
 8006f4e:	4b0b      	ldr	r3, [pc, #44]	; (8006f7c <global_stdio_init.part.0+0x30>)
 8006f50:	4c0b      	ldr	r4, [pc, #44]	; (8006f80 <global_stdio_init.part.0+0x34>)
 8006f52:	4a0c      	ldr	r2, [pc, #48]	; (8006f84 <global_stdio_init.part.0+0x38>)
 8006f54:	601a      	str	r2, [r3, #0]
 8006f56:	4620      	mov	r0, r4
 8006f58:	2200      	movs	r2, #0
 8006f5a:	2104      	movs	r1, #4
 8006f5c:	f7ff ff94 	bl	8006e88 <std>
 8006f60:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006f64:	2201      	movs	r2, #1
 8006f66:	2109      	movs	r1, #9
 8006f68:	f7ff ff8e 	bl	8006e88 <std>
 8006f6c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006f70:	2202      	movs	r2, #2
 8006f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f76:	2112      	movs	r1, #18
 8006f78:	f7ff bf86 	b.w	8006e88 <std>
 8006f7c:	20014d34 	.word	0x20014d34
 8006f80:	20014bfc 	.word	0x20014bfc
 8006f84:	08006ef5 	.word	0x08006ef5

08006f88 <__sfp_lock_acquire>:
 8006f88:	4801      	ldr	r0, [pc, #4]	; (8006f90 <__sfp_lock_acquire+0x8>)
 8006f8a:	f000 b91e 	b.w	80071ca <__retarget_lock_acquire_recursive>
 8006f8e:	bf00      	nop
 8006f90:	20014d3d 	.word	0x20014d3d

08006f94 <__sfp_lock_release>:
 8006f94:	4801      	ldr	r0, [pc, #4]	; (8006f9c <__sfp_lock_release+0x8>)
 8006f96:	f000 b919 	b.w	80071cc <__retarget_lock_release_recursive>
 8006f9a:	bf00      	nop
 8006f9c:	20014d3d 	.word	0x20014d3d

08006fa0 <__sinit>:
 8006fa0:	b510      	push	{r4, lr}
 8006fa2:	4604      	mov	r4, r0
 8006fa4:	f7ff fff0 	bl	8006f88 <__sfp_lock_acquire>
 8006fa8:	6a23      	ldr	r3, [r4, #32]
 8006faa:	b11b      	cbz	r3, 8006fb4 <__sinit+0x14>
 8006fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fb0:	f7ff bff0 	b.w	8006f94 <__sfp_lock_release>
 8006fb4:	4b04      	ldr	r3, [pc, #16]	; (8006fc8 <__sinit+0x28>)
 8006fb6:	6223      	str	r3, [r4, #32]
 8006fb8:	4b04      	ldr	r3, [pc, #16]	; (8006fcc <__sinit+0x2c>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1f5      	bne.n	8006fac <__sinit+0xc>
 8006fc0:	f7ff ffc4 	bl	8006f4c <global_stdio_init.part.0>
 8006fc4:	e7f2      	b.n	8006fac <__sinit+0xc>
 8006fc6:	bf00      	nop
 8006fc8:	08006f0d 	.word	0x08006f0d
 8006fcc:	20014d34 	.word	0x20014d34

08006fd0 <_fwalk_sglue>:
 8006fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fd4:	4607      	mov	r7, r0
 8006fd6:	4688      	mov	r8, r1
 8006fd8:	4614      	mov	r4, r2
 8006fda:	2600      	movs	r6, #0
 8006fdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fe0:	f1b9 0901 	subs.w	r9, r9, #1
 8006fe4:	d505      	bpl.n	8006ff2 <_fwalk_sglue+0x22>
 8006fe6:	6824      	ldr	r4, [r4, #0]
 8006fe8:	2c00      	cmp	r4, #0
 8006fea:	d1f7      	bne.n	8006fdc <_fwalk_sglue+0xc>
 8006fec:	4630      	mov	r0, r6
 8006fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ff2:	89ab      	ldrh	r3, [r5, #12]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d907      	bls.n	8007008 <_fwalk_sglue+0x38>
 8006ff8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	d003      	beq.n	8007008 <_fwalk_sglue+0x38>
 8007000:	4629      	mov	r1, r5
 8007002:	4638      	mov	r0, r7
 8007004:	47c0      	blx	r8
 8007006:	4306      	orrs	r6, r0
 8007008:	3568      	adds	r5, #104	; 0x68
 800700a:	e7e9      	b.n	8006fe0 <_fwalk_sglue+0x10>

0800700c <iprintf>:
 800700c:	b40f      	push	{r0, r1, r2, r3}
 800700e:	b507      	push	{r0, r1, r2, lr}
 8007010:	4906      	ldr	r1, [pc, #24]	; (800702c <iprintf+0x20>)
 8007012:	ab04      	add	r3, sp, #16
 8007014:	6808      	ldr	r0, [r1, #0]
 8007016:	f853 2b04 	ldr.w	r2, [r3], #4
 800701a:	6881      	ldr	r1, [r0, #8]
 800701c:	9301      	str	r3, [sp, #4]
 800701e:	f000 f94d 	bl	80072bc <_vfiprintf_r>
 8007022:	b003      	add	sp, #12
 8007024:	f85d eb04 	ldr.w	lr, [sp], #4
 8007028:	b004      	add	sp, #16
 800702a:	4770      	bx	lr
 800702c:	20000e14 	.word	0x20000e14

08007030 <__sread>:
 8007030:	b510      	push	{r4, lr}
 8007032:	460c      	mov	r4, r1
 8007034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007038:	f000 f868 	bl	800710c <_read_r>
 800703c:	2800      	cmp	r0, #0
 800703e:	bfab      	itete	ge
 8007040:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007042:	89a3      	ldrhlt	r3, [r4, #12]
 8007044:	181b      	addge	r3, r3, r0
 8007046:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800704a:	bfac      	ite	ge
 800704c:	6563      	strge	r3, [r4, #84]	; 0x54
 800704e:	81a3      	strhlt	r3, [r4, #12]
 8007050:	bd10      	pop	{r4, pc}

08007052 <__swrite>:
 8007052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007056:	461f      	mov	r7, r3
 8007058:	898b      	ldrh	r3, [r1, #12]
 800705a:	05db      	lsls	r3, r3, #23
 800705c:	4605      	mov	r5, r0
 800705e:	460c      	mov	r4, r1
 8007060:	4616      	mov	r6, r2
 8007062:	d505      	bpl.n	8007070 <__swrite+0x1e>
 8007064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007068:	2302      	movs	r3, #2
 800706a:	2200      	movs	r2, #0
 800706c:	f000 f83c 	bl	80070e8 <_lseek_r>
 8007070:	89a3      	ldrh	r3, [r4, #12]
 8007072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800707a:	81a3      	strh	r3, [r4, #12]
 800707c:	4632      	mov	r2, r6
 800707e:	463b      	mov	r3, r7
 8007080:	4628      	mov	r0, r5
 8007082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007086:	f000 b863 	b.w	8007150 <_write_r>

0800708a <__sseek>:
 800708a:	b510      	push	{r4, lr}
 800708c:	460c      	mov	r4, r1
 800708e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007092:	f000 f829 	bl	80070e8 <_lseek_r>
 8007096:	1c43      	adds	r3, r0, #1
 8007098:	89a3      	ldrh	r3, [r4, #12]
 800709a:	bf15      	itete	ne
 800709c:	6560      	strne	r0, [r4, #84]	; 0x54
 800709e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070a6:	81a3      	strheq	r3, [r4, #12]
 80070a8:	bf18      	it	ne
 80070aa:	81a3      	strhne	r3, [r4, #12]
 80070ac:	bd10      	pop	{r4, pc}

080070ae <__sclose>:
 80070ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070b2:	f000 b809 	b.w	80070c8 <_close_r>

080070b6 <memset>:
 80070b6:	4402      	add	r2, r0
 80070b8:	4603      	mov	r3, r0
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d100      	bne.n	80070c0 <memset+0xa>
 80070be:	4770      	bx	lr
 80070c0:	f803 1b01 	strb.w	r1, [r3], #1
 80070c4:	e7f9      	b.n	80070ba <memset+0x4>
	...

080070c8 <_close_r>:
 80070c8:	b538      	push	{r3, r4, r5, lr}
 80070ca:	4d06      	ldr	r5, [pc, #24]	; (80070e4 <_close_r+0x1c>)
 80070cc:	2300      	movs	r3, #0
 80070ce:	4604      	mov	r4, r0
 80070d0:	4608      	mov	r0, r1
 80070d2:	602b      	str	r3, [r5, #0]
 80070d4:	f000 fe98 	bl	8007e08 <_close>
 80070d8:	1c43      	adds	r3, r0, #1
 80070da:	d102      	bne.n	80070e2 <_close_r+0x1a>
 80070dc:	682b      	ldr	r3, [r5, #0]
 80070de:	b103      	cbz	r3, 80070e2 <_close_r+0x1a>
 80070e0:	6023      	str	r3, [r4, #0]
 80070e2:	bd38      	pop	{r3, r4, r5, pc}
 80070e4:	20014d38 	.word	0x20014d38

080070e8 <_lseek_r>:
 80070e8:	b538      	push	{r3, r4, r5, lr}
 80070ea:	4d07      	ldr	r5, [pc, #28]	; (8007108 <_lseek_r+0x20>)
 80070ec:	4604      	mov	r4, r0
 80070ee:	4608      	mov	r0, r1
 80070f0:	4611      	mov	r1, r2
 80070f2:	2200      	movs	r2, #0
 80070f4:	602a      	str	r2, [r5, #0]
 80070f6:	461a      	mov	r2, r3
 80070f8:	f000 fe9e 	bl	8007e38 <_lseek>
 80070fc:	1c43      	adds	r3, r0, #1
 80070fe:	d102      	bne.n	8007106 <_lseek_r+0x1e>
 8007100:	682b      	ldr	r3, [r5, #0]
 8007102:	b103      	cbz	r3, 8007106 <_lseek_r+0x1e>
 8007104:	6023      	str	r3, [r4, #0]
 8007106:	bd38      	pop	{r3, r4, r5, pc}
 8007108:	20014d38 	.word	0x20014d38

0800710c <_read_r>:
 800710c:	b538      	push	{r3, r4, r5, lr}
 800710e:	4d07      	ldr	r5, [pc, #28]	; (800712c <_read_r+0x20>)
 8007110:	4604      	mov	r4, r0
 8007112:	4608      	mov	r0, r1
 8007114:	4611      	mov	r1, r2
 8007116:	2200      	movs	r2, #0
 8007118:	602a      	str	r2, [r5, #0]
 800711a:	461a      	mov	r2, r3
 800711c:	f000 fe94 	bl	8007e48 <_read>
 8007120:	1c43      	adds	r3, r0, #1
 8007122:	d102      	bne.n	800712a <_read_r+0x1e>
 8007124:	682b      	ldr	r3, [r5, #0]
 8007126:	b103      	cbz	r3, 800712a <_read_r+0x1e>
 8007128:	6023      	str	r3, [r4, #0]
 800712a:	bd38      	pop	{r3, r4, r5, pc}
 800712c:	20014d38 	.word	0x20014d38

08007130 <_sbrk_r>:
 8007130:	b538      	push	{r3, r4, r5, lr}
 8007132:	4d06      	ldr	r5, [pc, #24]	; (800714c <_sbrk_r+0x1c>)
 8007134:	2300      	movs	r3, #0
 8007136:	4604      	mov	r4, r0
 8007138:	4608      	mov	r0, r1
 800713a:	602b      	str	r3, [r5, #0]
 800713c:	f7f9 fd4e 	bl	8000bdc <_sbrk>
 8007140:	1c43      	adds	r3, r0, #1
 8007142:	d102      	bne.n	800714a <_sbrk_r+0x1a>
 8007144:	682b      	ldr	r3, [r5, #0]
 8007146:	b103      	cbz	r3, 800714a <_sbrk_r+0x1a>
 8007148:	6023      	str	r3, [r4, #0]
 800714a:	bd38      	pop	{r3, r4, r5, pc}
 800714c:	20014d38 	.word	0x20014d38

08007150 <_write_r>:
 8007150:	b538      	push	{r3, r4, r5, lr}
 8007152:	4d07      	ldr	r5, [pc, #28]	; (8007170 <_write_r+0x20>)
 8007154:	4604      	mov	r4, r0
 8007156:	4608      	mov	r0, r1
 8007158:	4611      	mov	r1, r2
 800715a:	2200      	movs	r2, #0
 800715c:	602a      	str	r2, [r5, #0]
 800715e:	461a      	mov	r2, r3
 8007160:	f7f9 fb56 	bl	8000810 <_write>
 8007164:	1c43      	adds	r3, r0, #1
 8007166:	d102      	bne.n	800716e <_write_r+0x1e>
 8007168:	682b      	ldr	r3, [r5, #0]
 800716a:	b103      	cbz	r3, 800716e <_write_r+0x1e>
 800716c:	6023      	str	r3, [r4, #0]
 800716e:	bd38      	pop	{r3, r4, r5, pc}
 8007170:	20014d38 	.word	0x20014d38

08007174 <__errno>:
 8007174:	4b01      	ldr	r3, [pc, #4]	; (800717c <__errno+0x8>)
 8007176:	6818      	ldr	r0, [r3, #0]
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	20000e14 	.word	0x20000e14

08007180 <__libc_init_array>:
 8007180:	b570      	push	{r4, r5, r6, lr}
 8007182:	4d0d      	ldr	r5, [pc, #52]	; (80071b8 <__libc_init_array+0x38>)
 8007184:	4c0d      	ldr	r4, [pc, #52]	; (80071bc <__libc_init_array+0x3c>)
 8007186:	1b64      	subs	r4, r4, r5
 8007188:	10a4      	asrs	r4, r4, #2
 800718a:	2600      	movs	r6, #0
 800718c:	42a6      	cmp	r6, r4
 800718e:	d109      	bne.n	80071a4 <__libc_init_array+0x24>
 8007190:	4d0b      	ldr	r5, [pc, #44]	; (80071c0 <__libc_init_array+0x40>)
 8007192:	4c0c      	ldr	r4, [pc, #48]	; (80071c4 <__libc_init_array+0x44>)
 8007194:	f000 fe60 	bl	8007e58 <_init>
 8007198:	1b64      	subs	r4, r4, r5
 800719a:	10a4      	asrs	r4, r4, #2
 800719c:	2600      	movs	r6, #0
 800719e:	42a6      	cmp	r6, r4
 80071a0:	d105      	bne.n	80071ae <__libc_init_array+0x2e>
 80071a2:	bd70      	pop	{r4, r5, r6, pc}
 80071a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a8:	4798      	blx	r3
 80071aa:	3601      	adds	r6, #1
 80071ac:	e7ee      	b.n	800718c <__libc_init_array+0xc>
 80071ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80071b2:	4798      	blx	r3
 80071b4:	3601      	adds	r6, #1
 80071b6:	e7f2      	b.n	800719e <__libc_init_array+0x1e>
 80071b8:	080d3a34 	.word	0x080d3a34
 80071bc:	080d3a34 	.word	0x080d3a34
 80071c0:	080d3a34 	.word	0x080d3a34
 80071c4:	080d3a38 	.word	0x080d3a38

080071c8 <__retarget_lock_init_recursive>:
 80071c8:	4770      	bx	lr

080071ca <__retarget_lock_acquire_recursive>:
 80071ca:	4770      	bx	lr

080071cc <__retarget_lock_release_recursive>:
 80071cc:	4770      	bx	lr
	...

080071d0 <_free_r>:
 80071d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071d2:	2900      	cmp	r1, #0
 80071d4:	d044      	beq.n	8007260 <_free_r+0x90>
 80071d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071da:	9001      	str	r0, [sp, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f1a1 0404 	sub.w	r4, r1, #4
 80071e2:	bfb8      	it	lt
 80071e4:	18e4      	addlt	r4, r4, r3
 80071e6:	f7ff fe43 	bl	8006e70 <__malloc_lock>
 80071ea:	4a1e      	ldr	r2, [pc, #120]	; (8007264 <_free_r+0x94>)
 80071ec:	9801      	ldr	r0, [sp, #4]
 80071ee:	6813      	ldr	r3, [r2, #0]
 80071f0:	b933      	cbnz	r3, 8007200 <_free_r+0x30>
 80071f2:	6063      	str	r3, [r4, #4]
 80071f4:	6014      	str	r4, [r2, #0]
 80071f6:	b003      	add	sp, #12
 80071f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071fc:	f7ff be3e 	b.w	8006e7c <__malloc_unlock>
 8007200:	42a3      	cmp	r3, r4
 8007202:	d908      	bls.n	8007216 <_free_r+0x46>
 8007204:	6825      	ldr	r5, [r4, #0]
 8007206:	1961      	adds	r1, r4, r5
 8007208:	428b      	cmp	r3, r1
 800720a:	bf01      	itttt	eq
 800720c:	6819      	ldreq	r1, [r3, #0]
 800720e:	685b      	ldreq	r3, [r3, #4]
 8007210:	1949      	addeq	r1, r1, r5
 8007212:	6021      	streq	r1, [r4, #0]
 8007214:	e7ed      	b.n	80071f2 <_free_r+0x22>
 8007216:	461a      	mov	r2, r3
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	b10b      	cbz	r3, 8007220 <_free_r+0x50>
 800721c:	42a3      	cmp	r3, r4
 800721e:	d9fa      	bls.n	8007216 <_free_r+0x46>
 8007220:	6811      	ldr	r1, [r2, #0]
 8007222:	1855      	adds	r5, r2, r1
 8007224:	42a5      	cmp	r5, r4
 8007226:	d10b      	bne.n	8007240 <_free_r+0x70>
 8007228:	6824      	ldr	r4, [r4, #0]
 800722a:	4421      	add	r1, r4
 800722c:	1854      	adds	r4, r2, r1
 800722e:	42a3      	cmp	r3, r4
 8007230:	6011      	str	r1, [r2, #0]
 8007232:	d1e0      	bne.n	80071f6 <_free_r+0x26>
 8007234:	681c      	ldr	r4, [r3, #0]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	6053      	str	r3, [r2, #4]
 800723a:	440c      	add	r4, r1
 800723c:	6014      	str	r4, [r2, #0]
 800723e:	e7da      	b.n	80071f6 <_free_r+0x26>
 8007240:	d902      	bls.n	8007248 <_free_r+0x78>
 8007242:	230c      	movs	r3, #12
 8007244:	6003      	str	r3, [r0, #0]
 8007246:	e7d6      	b.n	80071f6 <_free_r+0x26>
 8007248:	6825      	ldr	r5, [r4, #0]
 800724a:	1961      	adds	r1, r4, r5
 800724c:	428b      	cmp	r3, r1
 800724e:	bf04      	itt	eq
 8007250:	6819      	ldreq	r1, [r3, #0]
 8007252:	685b      	ldreq	r3, [r3, #4]
 8007254:	6063      	str	r3, [r4, #4]
 8007256:	bf04      	itt	eq
 8007258:	1949      	addeq	r1, r1, r5
 800725a:	6021      	streq	r1, [r4, #0]
 800725c:	6054      	str	r4, [r2, #4]
 800725e:	e7ca      	b.n	80071f6 <_free_r+0x26>
 8007260:	b003      	add	sp, #12
 8007262:	bd30      	pop	{r4, r5, pc}
 8007264:	20014bf4 	.word	0x20014bf4

08007268 <__sfputc_r>:
 8007268:	6893      	ldr	r3, [r2, #8]
 800726a:	3b01      	subs	r3, #1
 800726c:	2b00      	cmp	r3, #0
 800726e:	b410      	push	{r4}
 8007270:	6093      	str	r3, [r2, #8]
 8007272:	da08      	bge.n	8007286 <__sfputc_r+0x1e>
 8007274:	6994      	ldr	r4, [r2, #24]
 8007276:	42a3      	cmp	r3, r4
 8007278:	db01      	blt.n	800727e <__sfputc_r+0x16>
 800727a:	290a      	cmp	r1, #10
 800727c:	d103      	bne.n	8007286 <__sfputc_r+0x1e>
 800727e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007282:	f000 bb73 	b.w	800796c <__swbuf_r>
 8007286:	6813      	ldr	r3, [r2, #0]
 8007288:	1c58      	adds	r0, r3, #1
 800728a:	6010      	str	r0, [r2, #0]
 800728c:	7019      	strb	r1, [r3, #0]
 800728e:	4608      	mov	r0, r1
 8007290:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007294:	4770      	bx	lr

08007296 <__sfputs_r>:
 8007296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007298:	4606      	mov	r6, r0
 800729a:	460f      	mov	r7, r1
 800729c:	4614      	mov	r4, r2
 800729e:	18d5      	adds	r5, r2, r3
 80072a0:	42ac      	cmp	r4, r5
 80072a2:	d101      	bne.n	80072a8 <__sfputs_r+0x12>
 80072a4:	2000      	movs	r0, #0
 80072a6:	e007      	b.n	80072b8 <__sfputs_r+0x22>
 80072a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ac:	463a      	mov	r2, r7
 80072ae:	4630      	mov	r0, r6
 80072b0:	f7ff ffda 	bl	8007268 <__sfputc_r>
 80072b4:	1c43      	adds	r3, r0, #1
 80072b6:	d1f3      	bne.n	80072a0 <__sfputs_r+0xa>
 80072b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080072bc <_vfiprintf_r>:
 80072bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c0:	460d      	mov	r5, r1
 80072c2:	b09d      	sub	sp, #116	; 0x74
 80072c4:	4614      	mov	r4, r2
 80072c6:	4698      	mov	r8, r3
 80072c8:	4606      	mov	r6, r0
 80072ca:	b118      	cbz	r0, 80072d4 <_vfiprintf_r+0x18>
 80072cc:	6a03      	ldr	r3, [r0, #32]
 80072ce:	b90b      	cbnz	r3, 80072d4 <_vfiprintf_r+0x18>
 80072d0:	f7ff fe66 	bl	8006fa0 <__sinit>
 80072d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072d6:	07d9      	lsls	r1, r3, #31
 80072d8:	d405      	bmi.n	80072e6 <_vfiprintf_r+0x2a>
 80072da:	89ab      	ldrh	r3, [r5, #12]
 80072dc:	059a      	lsls	r2, r3, #22
 80072de:	d402      	bmi.n	80072e6 <_vfiprintf_r+0x2a>
 80072e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072e2:	f7ff ff72 	bl	80071ca <__retarget_lock_acquire_recursive>
 80072e6:	89ab      	ldrh	r3, [r5, #12]
 80072e8:	071b      	lsls	r3, r3, #28
 80072ea:	d501      	bpl.n	80072f0 <_vfiprintf_r+0x34>
 80072ec:	692b      	ldr	r3, [r5, #16]
 80072ee:	b99b      	cbnz	r3, 8007318 <_vfiprintf_r+0x5c>
 80072f0:	4629      	mov	r1, r5
 80072f2:	4630      	mov	r0, r6
 80072f4:	f000 fb78 	bl	80079e8 <__swsetup_r>
 80072f8:	b170      	cbz	r0, 8007318 <_vfiprintf_r+0x5c>
 80072fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072fc:	07dc      	lsls	r4, r3, #31
 80072fe:	d504      	bpl.n	800730a <_vfiprintf_r+0x4e>
 8007300:	f04f 30ff 	mov.w	r0, #4294967295
 8007304:	b01d      	add	sp, #116	; 0x74
 8007306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800730a:	89ab      	ldrh	r3, [r5, #12]
 800730c:	0598      	lsls	r0, r3, #22
 800730e:	d4f7      	bmi.n	8007300 <_vfiprintf_r+0x44>
 8007310:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007312:	f7ff ff5b 	bl	80071cc <__retarget_lock_release_recursive>
 8007316:	e7f3      	b.n	8007300 <_vfiprintf_r+0x44>
 8007318:	2300      	movs	r3, #0
 800731a:	9309      	str	r3, [sp, #36]	; 0x24
 800731c:	2320      	movs	r3, #32
 800731e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007322:	f8cd 800c 	str.w	r8, [sp, #12]
 8007326:	2330      	movs	r3, #48	; 0x30
 8007328:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80074dc <_vfiprintf_r+0x220>
 800732c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007330:	f04f 0901 	mov.w	r9, #1
 8007334:	4623      	mov	r3, r4
 8007336:	469a      	mov	sl, r3
 8007338:	f813 2b01 	ldrb.w	r2, [r3], #1
 800733c:	b10a      	cbz	r2, 8007342 <_vfiprintf_r+0x86>
 800733e:	2a25      	cmp	r2, #37	; 0x25
 8007340:	d1f9      	bne.n	8007336 <_vfiprintf_r+0x7a>
 8007342:	ebba 0b04 	subs.w	fp, sl, r4
 8007346:	d00b      	beq.n	8007360 <_vfiprintf_r+0xa4>
 8007348:	465b      	mov	r3, fp
 800734a:	4622      	mov	r2, r4
 800734c:	4629      	mov	r1, r5
 800734e:	4630      	mov	r0, r6
 8007350:	f7ff ffa1 	bl	8007296 <__sfputs_r>
 8007354:	3001      	adds	r0, #1
 8007356:	f000 80a9 	beq.w	80074ac <_vfiprintf_r+0x1f0>
 800735a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800735c:	445a      	add	r2, fp
 800735e:	9209      	str	r2, [sp, #36]	; 0x24
 8007360:	f89a 3000 	ldrb.w	r3, [sl]
 8007364:	2b00      	cmp	r3, #0
 8007366:	f000 80a1 	beq.w	80074ac <_vfiprintf_r+0x1f0>
 800736a:	2300      	movs	r3, #0
 800736c:	f04f 32ff 	mov.w	r2, #4294967295
 8007370:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007374:	f10a 0a01 	add.w	sl, sl, #1
 8007378:	9304      	str	r3, [sp, #16]
 800737a:	9307      	str	r3, [sp, #28]
 800737c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007380:	931a      	str	r3, [sp, #104]	; 0x68
 8007382:	4654      	mov	r4, sl
 8007384:	2205      	movs	r2, #5
 8007386:	f814 1b01 	ldrb.w	r1, [r4], #1
 800738a:	4854      	ldr	r0, [pc, #336]	; (80074dc <_vfiprintf_r+0x220>)
 800738c:	f7f8 ff20 	bl	80001d0 <memchr>
 8007390:	9a04      	ldr	r2, [sp, #16]
 8007392:	b9d8      	cbnz	r0, 80073cc <_vfiprintf_r+0x110>
 8007394:	06d1      	lsls	r1, r2, #27
 8007396:	bf44      	itt	mi
 8007398:	2320      	movmi	r3, #32
 800739a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800739e:	0713      	lsls	r3, r2, #28
 80073a0:	bf44      	itt	mi
 80073a2:	232b      	movmi	r3, #43	; 0x2b
 80073a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073a8:	f89a 3000 	ldrb.w	r3, [sl]
 80073ac:	2b2a      	cmp	r3, #42	; 0x2a
 80073ae:	d015      	beq.n	80073dc <_vfiprintf_r+0x120>
 80073b0:	9a07      	ldr	r2, [sp, #28]
 80073b2:	4654      	mov	r4, sl
 80073b4:	2000      	movs	r0, #0
 80073b6:	f04f 0c0a 	mov.w	ip, #10
 80073ba:	4621      	mov	r1, r4
 80073bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073c0:	3b30      	subs	r3, #48	; 0x30
 80073c2:	2b09      	cmp	r3, #9
 80073c4:	d94d      	bls.n	8007462 <_vfiprintf_r+0x1a6>
 80073c6:	b1b0      	cbz	r0, 80073f6 <_vfiprintf_r+0x13a>
 80073c8:	9207      	str	r2, [sp, #28]
 80073ca:	e014      	b.n	80073f6 <_vfiprintf_r+0x13a>
 80073cc:	eba0 0308 	sub.w	r3, r0, r8
 80073d0:	fa09 f303 	lsl.w	r3, r9, r3
 80073d4:	4313      	orrs	r3, r2
 80073d6:	9304      	str	r3, [sp, #16]
 80073d8:	46a2      	mov	sl, r4
 80073da:	e7d2      	b.n	8007382 <_vfiprintf_r+0xc6>
 80073dc:	9b03      	ldr	r3, [sp, #12]
 80073de:	1d19      	adds	r1, r3, #4
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	9103      	str	r1, [sp, #12]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	bfbb      	ittet	lt
 80073e8:	425b      	neglt	r3, r3
 80073ea:	f042 0202 	orrlt.w	r2, r2, #2
 80073ee:	9307      	strge	r3, [sp, #28]
 80073f0:	9307      	strlt	r3, [sp, #28]
 80073f2:	bfb8      	it	lt
 80073f4:	9204      	strlt	r2, [sp, #16]
 80073f6:	7823      	ldrb	r3, [r4, #0]
 80073f8:	2b2e      	cmp	r3, #46	; 0x2e
 80073fa:	d10c      	bne.n	8007416 <_vfiprintf_r+0x15a>
 80073fc:	7863      	ldrb	r3, [r4, #1]
 80073fe:	2b2a      	cmp	r3, #42	; 0x2a
 8007400:	d134      	bne.n	800746c <_vfiprintf_r+0x1b0>
 8007402:	9b03      	ldr	r3, [sp, #12]
 8007404:	1d1a      	adds	r2, r3, #4
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	9203      	str	r2, [sp, #12]
 800740a:	2b00      	cmp	r3, #0
 800740c:	bfb8      	it	lt
 800740e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007412:	3402      	adds	r4, #2
 8007414:	9305      	str	r3, [sp, #20]
 8007416:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80074ec <_vfiprintf_r+0x230>
 800741a:	7821      	ldrb	r1, [r4, #0]
 800741c:	2203      	movs	r2, #3
 800741e:	4650      	mov	r0, sl
 8007420:	f7f8 fed6 	bl	80001d0 <memchr>
 8007424:	b138      	cbz	r0, 8007436 <_vfiprintf_r+0x17a>
 8007426:	9b04      	ldr	r3, [sp, #16]
 8007428:	eba0 000a 	sub.w	r0, r0, sl
 800742c:	2240      	movs	r2, #64	; 0x40
 800742e:	4082      	lsls	r2, r0
 8007430:	4313      	orrs	r3, r2
 8007432:	3401      	adds	r4, #1
 8007434:	9304      	str	r3, [sp, #16]
 8007436:	f814 1b01 	ldrb.w	r1, [r4], #1
 800743a:	4829      	ldr	r0, [pc, #164]	; (80074e0 <_vfiprintf_r+0x224>)
 800743c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007440:	2206      	movs	r2, #6
 8007442:	f7f8 fec5 	bl	80001d0 <memchr>
 8007446:	2800      	cmp	r0, #0
 8007448:	d03f      	beq.n	80074ca <_vfiprintf_r+0x20e>
 800744a:	4b26      	ldr	r3, [pc, #152]	; (80074e4 <_vfiprintf_r+0x228>)
 800744c:	bb1b      	cbnz	r3, 8007496 <_vfiprintf_r+0x1da>
 800744e:	9b03      	ldr	r3, [sp, #12]
 8007450:	3307      	adds	r3, #7
 8007452:	f023 0307 	bic.w	r3, r3, #7
 8007456:	3308      	adds	r3, #8
 8007458:	9303      	str	r3, [sp, #12]
 800745a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800745c:	443b      	add	r3, r7
 800745e:	9309      	str	r3, [sp, #36]	; 0x24
 8007460:	e768      	b.n	8007334 <_vfiprintf_r+0x78>
 8007462:	fb0c 3202 	mla	r2, ip, r2, r3
 8007466:	460c      	mov	r4, r1
 8007468:	2001      	movs	r0, #1
 800746a:	e7a6      	b.n	80073ba <_vfiprintf_r+0xfe>
 800746c:	2300      	movs	r3, #0
 800746e:	3401      	adds	r4, #1
 8007470:	9305      	str	r3, [sp, #20]
 8007472:	4619      	mov	r1, r3
 8007474:	f04f 0c0a 	mov.w	ip, #10
 8007478:	4620      	mov	r0, r4
 800747a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800747e:	3a30      	subs	r2, #48	; 0x30
 8007480:	2a09      	cmp	r2, #9
 8007482:	d903      	bls.n	800748c <_vfiprintf_r+0x1d0>
 8007484:	2b00      	cmp	r3, #0
 8007486:	d0c6      	beq.n	8007416 <_vfiprintf_r+0x15a>
 8007488:	9105      	str	r1, [sp, #20]
 800748a:	e7c4      	b.n	8007416 <_vfiprintf_r+0x15a>
 800748c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007490:	4604      	mov	r4, r0
 8007492:	2301      	movs	r3, #1
 8007494:	e7f0      	b.n	8007478 <_vfiprintf_r+0x1bc>
 8007496:	ab03      	add	r3, sp, #12
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	462a      	mov	r2, r5
 800749c:	4b12      	ldr	r3, [pc, #72]	; (80074e8 <_vfiprintf_r+0x22c>)
 800749e:	a904      	add	r1, sp, #16
 80074a0:	4630      	mov	r0, r6
 80074a2:	f3af 8000 	nop.w
 80074a6:	4607      	mov	r7, r0
 80074a8:	1c78      	adds	r0, r7, #1
 80074aa:	d1d6      	bne.n	800745a <_vfiprintf_r+0x19e>
 80074ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074ae:	07d9      	lsls	r1, r3, #31
 80074b0:	d405      	bmi.n	80074be <_vfiprintf_r+0x202>
 80074b2:	89ab      	ldrh	r3, [r5, #12]
 80074b4:	059a      	lsls	r2, r3, #22
 80074b6:	d402      	bmi.n	80074be <_vfiprintf_r+0x202>
 80074b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074ba:	f7ff fe87 	bl	80071cc <__retarget_lock_release_recursive>
 80074be:	89ab      	ldrh	r3, [r5, #12]
 80074c0:	065b      	lsls	r3, r3, #25
 80074c2:	f53f af1d 	bmi.w	8007300 <_vfiprintf_r+0x44>
 80074c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074c8:	e71c      	b.n	8007304 <_vfiprintf_r+0x48>
 80074ca:	ab03      	add	r3, sp, #12
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	462a      	mov	r2, r5
 80074d0:	4b05      	ldr	r3, [pc, #20]	; (80074e8 <_vfiprintf_r+0x22c>)
 80074d2:	a904      	add	r1, sp, #16
 80074d4:	4630      	mov	r0, r6
 80074d6:	f000 f879 	bl	80075cc <_printf_i>
 80074da:	e7e4      	b.n	80074a6 <_vfiprintf_r+0x1ea>
 80074dc:	080d39e0 	.word	0x080d39e0
 80074e0:	080d39ea 	.word	0x080d39ea
 80074e4:	00000000 	.word	0x00000000
 80074e8:	08007297 	.word	0x08007297
 80074ec:	080d39e6 	.word	0x080d39e6

080074f0 <_printf_common>:
 80074f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074f4:	4616      	mov	r6, r2
 80074f6:	4699      	mov	r9, r3
 80074f8:	688a      	ldr	r2, [r1, #8]
 80074fa:	690b      	ldr	r3, [r1, #16]
 80074fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007500:	4293      	cmp	r3, r2
 8007502:	bfb8      	it	lt
 8007504:	4613      	movlt	r3, r2
 8007506:	6033      	str	r3, [r6, #0]
 8007508:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800750c:	4607      	mov	r7, r0
 800750e:	460c      	mov	r4, r1
 8007510:	b10a      	cbz	r2, 8007516 <_printf_common+0x26>
 8007512:	3301      	adds	r3, #1
 8007514:	6033      	str	r3, [r6, #0]
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	0699      	lsls	r1, r3, #26
 800751a:	bf42      	ittt	mi
 800751c:	6833      	ldrmi	r3, [r6, #0]
 800751e:	3302      	addmi	r3, #2
 8007520:	6033      	strmi	r3, [r6, #0]
 8007522:	6825      	ldr	r5, [r4, #0]
 8007524:	f015 0506 	ands.w	r5, r5, #6
 8007528:	d106      	bne.n	8007538 <_printf_common+0x48>
 800752a:	f104 0a19 	add.w	sl, r4, #25
 800752e:	68e3      	ldr	r3, [r4, #12]
 8007530:	6832      	ldr	r2, [r6, #0]
 8007532:	1a9b      	subs	r3, r3, r2
 8007534:	42ab      	cmp	r3, r5
 8007536:	dc26      	bgt.n	8007586 <_printf_common+0x96>
 8007538:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800753c:	1e13      	subs	r3, r2, #0
 800753e:	6822      	ldr	r2, [r4, #0]
 8007540:	bf18      	it	ne
 8007542:	2301      	movne	r3, #1
 8007544:	0692      	lsls	r2, r2, #26
 8007546:	d42b      	bmi.n	80075a0 <_printf_common+0xb0>
 8007548:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800754c:	4649      	mov	r1, r9
 800754e:	4638      	mov	r0, r7
 8007550:	47c0      	blx	r8
 8007552:	3001      	adds	r0, #1
 8007554:	d01e      	beq.n	8007594 <_printf_common+0xa4>
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	6922      	ldr	r2, [r4, #16]
 800755a:	f003 0306 	and.w	r3, r3, #6
 800755e:	2b04      	cmp	r3, #4
 8007560:	bf02      	ittt	eq
 8007562:	68e5      	ldreq	r5, [r4, #12]
 8007564:	6833      	ldreq	r3, [r6, #0]
 8007566:	1aed      	subeq	r5, r5, r3
 8007568:	68a3      	ldr	r3, [r4, #8]
 800756a:	bf0c      	ite	eq
 800756c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007570:	2500      	movne	r5, #0
 8007572:	4293      	cmp	r3, r2
 8007574:	bfc4      	itt	gt
 8007576:	1a9b      	subgt	r3, r3, r2
 8007578:	18ed      	addgt	r5, r5, r3
 800757a:	2600      	movs	r6, #0
 800757c:	341a      	adds	r4, #26
 800757e:	42b5      	cmp	r5, r6
 8007580:	d11a      	bne.n	80075b8 <_printf_common+0xc8>
 8007582:	2000      	movs	r0, #0
 8007584:	e008      	b.n	8007598 <_printf_common+0xa8>
 8007586:	2301      	movs	r3, #1
 8007588:	4652      	mov	r2, sl
 800758a:	4649      	mov	r1, r9
 800758c:	4638      	mov	r0, r7
 800758e:	47c0      	blx	r8
 8007590:	3001      	adds	r0, #1
 8007592:	d103      	bne.n	800759c <_printf_common+0xac>
 8007594:	f04f 30ff 	mov.w	r0, #4294967295
 8007598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800759c:	3501      	adds	r5, #1
 800759e:	e7c6      	b.n	800752e <_printf_common+0x3e>
 80075a0:	18e1      	adds	r1, r4, r3
 80075a2:	1c5a      	adds	r2, r3, #1
 80075a4:	2030      	movs	r0, #48	; 0x30
 80075a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075aa:	4422      	add	r2, r4
 80075ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075b4:	3302      	adds	r3, #2
 80075b6:	e7c7      	b.n	8007548 <_printf_common+0x58>
 80075b8:	2301      	movs	r3, #1
 80075ba:	4622      	mov	r2, r4
 80075bc:	4649      	mov	r1, r9
 80075be:	4638      	mov	r0, r7
 80075c0:	47c0      	blx	r8
 80075c2:	3001      	adds	r0, #1
 80075c4:	d0e6      	beq.n	8007594 <_printf_common+0xa4>
 80075c6:	3601      	adds	r6, #1
 80075c8:	e7d9      	b.n	800757e <_printf_common+0x8e>
	...

080075cc <_printf_i>:
 80075cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075d0:	7e0f      	ldrb	r7, [r1, #24]
 80075d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075d4:	2f78      	cmp	r7, #120	; 0x78
 80075d6:	4691      	mov	r9, r2
 80075d8:	4680      	mov	r8, r0
 80075da:	460c      	mov	r4, r1
 80075dc:	469a      	mov	sl, r3
 80075de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075e2:	d807      	bhi.n	80075f4 <_printf_i+0x28>
 80075e4:	2f62      	cmp	r7, #98	; 0x62
 80075e6:	d80a      	bhi.n	80075fe <_printf_i+0x32>
 80075e8:	2f00      	cmp	r7, #0
 80075ea:	f000 80d4 	beq.w	8007796 <_printf_i+0x1ca>
 80075ee:	2f58      	cmp	r7, #88	; 0x58
 80075f0:	f000 80c0 	beq.w	8007774 <_printf_i+0x1a8>
 80075f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075fc:	e03a      	b.n	8007674 <_printf_i+0xa8>
 80075fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007602:	2b15      	cmp	r3, #21
 8007604:	d8f6      	bhi.n	80075f4 <_printf_i+0x28>
 8007606:	a101      	add	r1, pc, #4	; (adr r1, 800760c <_printf_i+0x40>)
 8007608:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800760c:	08007665 	.word	0x08007665
 8007610:	08007679 	.word	0x08007679
 8007614:	080075f5 	.word	0x080075f5
 8007618:	080075f5 	.word	0x080075f5
 800761c:	080075f5 	.word	0x080075f5
 8007620:	080075f5 	.word	0x080075f5
 8007624:	08007679 	.word	0x08007679
 8007628:	080075f5 	.word	0x080075f5
 800762c:	080075f5 	.word	0x080075f5
 8007630:	080075f5 	.word	0x080075f5
 8007634:	080075f5 	.word	0x080075f5
 8007638:	0800777d 	.word	0x0800777d
 800763c:	080076a5 	.word	0x080076a5
 8007640:	08007737 	.word	0x08007737
 8007644:	080075f5 	.word	0x080075f5
 8007648:	080075f5 	.word	0x080075f5
 800764c:	0800779f 	.word	0x0800779f
 8007650:	080075f5 	.word	0x080075f5
 8007654:	080076a5 	.word	0x080076a5
 8007658:	080075f5 	.word	0x080075f5
 800765c:	080075f5 	.word	0x080075f5
 8007660:	0800773f 	.word	0x0800773f
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	1d1a      	adds	r2, r3, #4
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	602a      	str	r2, [r5, #0]
 800766c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007670:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007674:	2301      	movs	r3, #1
 8007676:	e09f      	b.n	80077b8 <_printf_i+0x1ec>
 8007678:	6820      	ldr	r0, [r4, #0]
 800767a:	682b      	ldr	r3, [r5, #0]
 800767c:	0607      	lsls	r7, r0, #24
 800767e:	f103 0104 	add.w	r1, r3, #4
 8007682:	6029      	str	r1, [r5, #0]
 8007684:	d501      	bpl.n	800768a <_printf_i+0xbe>
 8007686:	681e      	ldr	r6, [r3, #0]
 8007688:	e003      	b.n	8007692 <_printf_i+0xc6>
 800768a:	0646      	lsls	r6, r0, #25
 800768c:	d5fb      	bpl.n	8007686 <_printf_i+0xba>
 800768e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007692:	2e00      	cmp	r6, #0
 8007694:	da03      	bge.n	800769e <_printf_i+0xd2>
 8007696:	232d      	movs	r3, #45	; 0x2d
 8007698:	4276      	negs	r6, r6
 800769a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800769e:	485a      	ldr	r0, [pc, #360]	; (8007808 <_printf_i+0x23c>)
 80076a0:	230a      	movs	r3, #10
 80076a2:	e012      	b.n	80076ca <_printf_i+0xfe>
 80076a4:	682b      	ldr	r3, [r5, #0]
 80076a6:	6820      	ldr	r0, [r4, #0]
 80076a8:	1d19      	adds	r1, r3, #4
 80076aa:	6029      	str	r1, [r5, #0]
 80076ac:	0605      	lsls	r5, r0, #24
 80076ae:	d501      	bpl.n	80076b4 <_printf_i+0xe8>
 80076b0:	681e      	ldr	r6, [r3, #0]
 80076b2:	e002      	b.n	80076ba <_printf_i+0xee>
 80076b4:	0641      	lsls	r1, r0, #25
 80076b6:	d5fb      	bpl.n	80076b0 <_printf_i+0xe4>
 80076b8:	881e      	ldrh	r6, [r3, #0]
 80076ba:	4853      	ldr	r0, [pc, #332]	; (8007808 <_printf_i+0x23c>)
 80076bc:	2f6f      	cmp	r7, #111	; 0x6f
 80076be:	bf0c      	ite	eq
 80076c0:	2308      	moveq	r3, #8
 80076c2:	230a      	movne	r3, #10
 80076c4:	2100      	movs	r1, #0
 80076c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076ca:	6865      	ldr	r5, [r4, #4]
 80076cc:	60a5      	str	r5, [r4, #8]
 80076ce:	2d00      	cmp	r5, #0
 80076d0:	bfa2      	ittt	ge
 80076d2:	6821      	ldrge	r1, [r4, #0]
 80076d4:	f021 0104 	bicge.w	r1, r1, #4
 80076d8:	6021      	strge	r1, [r4, #0]
 80076da:	b90e      	cbnz	r6, 80076e0 <_printf_i+0x114>
 80076dc:	2d00      	cmp	r5, #0
 80076de:	d04b      	beq.n	8007778 <_printf_i+0x1ac>
 80076e0:	4615      	mov	r5, r2
 80076e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80076e6:	fb03 6711 	mls	r7, r3, r1, r6
 80076ea:	5dc7      	ldrb	r7, [r0, r7]
 80076ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076f0:	4637      	mov	r7, r6
 80076f2:	42bb      	cmp	r3, r7
 80076f4:	460e      	mov	r6, r1
 80076f6:	d9f4      	bls.n	80076e2 <_printf_i+0x116>
 80076f8:	2b08      	cmp	r3, #8
 80076fa:	d10b      	bne.n	8007714 <_printf_i+0x148>
 80076fc:	6823      	ldr	r3, [r4, #0]
 80076fe:	07de      	lsls	r6, r3, #31
 8007700:	d508      	bpl.n	8007714 <_printf_i+0x148>
 8007702:	6923      	ldr	r3, [r4, #16]
 8007704:	6861      	ldr	r1, [r4, #4]
 8007706:	4299      	cmp	r1, r3
 8007708:	bfde      	ittt	le
 800770a:	2330      	movle	r3, #48	; 0x30
 800770c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007710:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007714:	1b52      	subs	r2, r2, r5
 8007716:	6122      	str	r2, [r4, #16]
 8007718:	f8cd a000 	str.w	sl, [sp]
 800771c:	464b      	mov	r3, r9
 800771e:	aa03      	add	r2, sp, #12
 8007720:	4621      	mov	r1, r4
 8007722:	4640      	mov	r0, r8
 8007724:	f7ff fee4 	bl	80074f0 <_printf_common>
 8007728:	3001      	adds	r0, #1
 800772a:	d14a      	bne.n	80077c2 <_printf_i+0x1f6>
 800772c:	f04f 30ff 	mov.w	r0, #4294967295
 8007730:	b004      	add	sp, #16
 8007732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007736:	6823      	ldr	r3, [r4, #0]
 8007738:	f043 0320 	orr.w	r3, r3, #32
 800773c:	6023      	str	r3, [r4, #0]
 800773e:	4833      	ldr	r0, [pc, #204]	; (800780c <_printf_i+0x240>)
 8007740:	2778      	movs	r7, #120	; 0x78
 8007742:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007746:	6823      	ldr	r3, [r4, #0]
 8007748:	6829      	ldr	r1, [r5, #0]
 800774a:	061f      	lsls	r7, r3, #24
 800774c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007750:	d402      	bmi.n	8007758 <_printf_i+0x18c>
 8007752:	065f      	lsls	r7, r3, #25
 8007754:	bf48      	it	mi
 8007756:	b2b6      	uxthmi	r6, r6
 8007758:	07df      	lsls	r7, r3, #31
 800775a:	bf48      	it	mi
 800775c:	f043 0320 	orrmi.w	r3, r3, #32
 8007760:	6029      	str	r1, [r5, #0]
 8007762:	bf48      	it	mi
 8007764:	6023      	strmi	r3, [r4, #0]
 8007766:	b91e      	cbnz	r6, 8007770 <_printf_i+0x1a4>
 8007768:	6823      	ldr	r3, [r4, #0]
 800776a:	f023 0320 	bic.w	r3, r3, #32
 800776e:	6023      	str	r3, [r4, #0]
 8007770:	2310      	movs	r3, #16
 8007772:	e7a7      	b.n	80076c4 <_printf_i+0xf8>
 8007774:	4824      	ldr	r0, [pc, #144]	; (8007808 <_printf_i+0x23c>)
 8007776:	e7e4      	b.n	8007742 <_printf_i+0x176>
 8007778:	4615      	mov	r5, r2
 800777a:	e7bd      	b.n	80076f8 <_printf_i+0x12c>
 800777c:	682b      	ldr	r3, [r5, #0]
 800777e:	6826      	ldr	r6, [r4, #0]
 8007780:	6961      	ldr	r1, [r4, #20]
 8007782:	1d18      	adds	r0, r3, #4
 8007784:	6028      	str	r0, [r5, #0]
 8007786:	0635      	lsls	r5, r6, #24
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	d501      	bpl.n	8007790 <_printf_i+0x1c4>
 800778c:	6019      	str	r1, [r3, #0]
 800778e:	e002      	b.n	8007796 <_printf_i+0x1ca>
 8007790:	0670      	lsls	r0, r6, #25
 8007792:	d5fb      	bpl.n	800778c <_printf_i+0x1c0>
 8007794:	8019      	strh	r1, [r3, #0]
 8007796:	2300      	movs	r3, #0
 8007798:	6123      	str	r3, [r4, #16]
 800779a:	4615      	mov	r5, r2
 800779c:	e7bc      	b.n	8007718 <_printf_i+0x14c>
 800779e:	682b      	ldr	r3, [r5, #0]
 80077a0:	1d1a      	adds	r2, r3, #4
 80077a2:	602a      	str	r2, [r5, #0]
 80077a4:	681d      	ldr	r5, [r3, #0]
 80077a6:	6862      	ldr	r2, [r4, #4]
 80077a8:	2100      	movs	r1, #0
 80077aa:	4628      	mov	r0, r5
 80077ac:	f7f8 fd10 	bl	80001d0 <memchr>
 80077b0:	b108      	cbz	r0, 80077b6 <_printf_i+0x1ea>
 80077b2:	1b40      	subs	r0, r0, r5
 80077b4:	6060      	str	r0, [r4, #4]
 80077b6:	6863      	ldr	r3, [r4, #4]
 80077b8:	6123      	str	r3, [r4, #16]
 80077ba:	2300      	movs	r3, #0
 80077bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077c0:	e7aa      	b.n	8007718 <_printf_i+0x14c>
 80077c2:	6923      	ldr	r3, [r4, #16]
 80077c4:	462a      	mov	r2, r5
 80077c6:	4649      	mov	r1, r9
 80077c8:	4640      	mov	r0, r8
 80077ca:	47d0      	blx	sl
 80077cc:	3001      	adds	r0, #1
 80077ce:	d0ad      	beq.n	800772c <_printf_i+0x160>
 80077d0:	6823      	ldr	r3, [r4, #0]
 80077d2:	079b      	lsls	r3, r3, #30
 80077d4:	d413      	bmi.n	80077fe <_printf_i+0x232>
 80077d6:	68e0      	ldr	r0, [r4, #12]
 80077d8:	9b03      	ldr	r3, [sp, #12]
 80077da:	4298      	cmp	r0, r3
 80077dc:	bfb8      	it	lt
 80077de:	4618      	movlt	r0, r3
 80077e0:	e7a6      	b.n	8007730 <_printf_i+0x164>
 80077e2:	2301      	movs	r3, #1
 80077e4:	4632      	mov	r2, r6
 80077e6:	4649      	mov	r1, r9
 80077e8:	4640      	mov	r0, r8
 80077ea:	47d0      	blx	sl
 80077ec:	3001      	adds	r0, #1
 80077ee:	d09d      	beq.n	800772c <_printf_i+0x160>
 80077f0:	3501      	adds	r5, #1
 80077f2:	68e3      	ldr	r3, [r4, #12]
 80077f4:	9903      	ldr	r1, [sp, #12]
 80077f6:	1a5b      	subs	r3, r3, r1
 80077f8:	42ab      	cmp	r3, r5
 80077fa:	dcf2      	bgt.n	80077e2 <_printf_i+0x216>
 80077fc:	e7eb      	b.n	80077d6 <_printf_i+0x20a>
 80077fe:	2500      	movs	r5, #0
 8007800:	f104 0619 	add.w	r6, r4, #25
 8007804:	e7f5      	b.n	80077f2 <_printf_i+0x226>
 8007806:	bf00      	nop
 8007808:	080d39f1 	.word	0x080d39f1
 800780c:	080d3a02 	.word	0x080d3a02

08007810 <__sflush_r>:
 8007810:	898a      	ldrh	r2, [r1, #12]
 8007812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007816:	4605      	mov	r5, r0
 8007818:	0710      	lsls	r0, r2, #28
 800781a:	460c      	mov	r4, r1
 800781c:	d458      	bmi.n	80078d0 <__sflush_r+0xc0>
 800781e:	684b      	ldr	r3, [r1, #4]
 8007820:	2b00      	cmp	r3, #0
 8007822:	dc05      	bgt.n	8007830 <__sflush_r+0x20>
 8007824:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007826:	2b00      	cmp	r3, #0
 8007828:	dc02      	bgt.n	8007830 <__sflush_r+0x20>
 800782a:	2000      	movs	r0, #0
 800782c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007830:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007832:	2e00      	cmp	r6, #0
 8007834:	d0f9      	beq.n	800782a <__sflush_r+0x1a>
 8007836:	2300      	movs	r3, #0
 8007838:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800783c:	682f      	ldr	r7, [r5, #0]
 800783e:	6a21      	ldr	r1, [r4, #32]
 8007840:	602b      	str	r3, [r5, #0]
 8007842:	d032      	beq.n	80078aa <__sflush_r+0x9a>
 8007844:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007846:	89a3      	ldrh	r3, [r4, #12]
 8007848:	075a      	lsls	r2, r3, #29
 800784a:	d505      	bpl.n	8007858 <__sflush_r+0x48>
 800784c:	6863      	ldr	r3, [r4, #4]
 800784e:	1ac0      	subs	r0, r0, r3
 8007850:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007852:	b10b      	cbz	r3, 8007858 <__sflush_r+0x48>
 8007854:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007856:	1ac0      	subs	r0, r0, r3
 8007858:	2300      	movs	r3, #0
 800785a:	4602      	mov	r2, r0
 800785c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800785e:	6a21      	ldr	r1, [r4, #32]
 8007860:	4628      	mov	r0, r5
 8007862:	47b0      	blx	r6
 8007864:	1c43      	adds	r3, r0, #1
 8007866:	89a3      	ldrh	r3, [r4, #12]
 8007868:	d106      	bne.n	8007878 <__sflush_r+0x68>
 800786a:	6829      	ldr	r1, [r5, #0]
 800786c:	291d      	cmp	r1, #29
 800786e:	d82b      	bhi.n	80078c8 <__sflush_r+0xb8>
 8007870:	4a29      	ldr	r2, [pc, #164]	; (8007918 <__sflush_r+0x108>)
 8007872:	410a      	asrs	r2, r1
 8007874:	07d6      	lsls	r6, r2, #31
 8007876:	d427      	bmi.n	80078c8 <__sflush_r+0xb8>
 8007878:	2200      	movs	r2, #0
 800787a:	6062      	str	r2, [r4, #4]
 800787c:	04d9      	lsls	r1, r3, #19
 800787e:	6922      	ldr	r2, [r4, #16]
 8007880:	6022      	str	r2, [r4, #0]
 8007882:	d504      	bpl.n	800788e <__sflush_r+0x7e>
 8007884:	1c42      	adds	r2, r0, #1
 8007886:	d101      	bne.n	800788c <__sflush_r+0x7c>
 8007888:	682b      	ldr	r3, [r5, #0]
 800788a:	b903      	cbnz	r3, 800788e <__sflush_r+0x7e>
 800788c:	6560      	str	r0, [r4, #84]	; 0x54
 800788e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007890:	602f      	str	r7, [r5, #0]
 8007892:	2900      	cmp	r1, #0
 8007894:	d0c9      	beq.n	800782a <__sflush_r+0x1a>
 8007896:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800789a:	4299      	cmp	r1, r3
 800789c:	d002      	beq.n	80078a4 <__sflush_r+0x94>
 800789e:	4628      	mov	r0, r5
 80078a0:	f7ff fc96 	bl	80071d0 <_free_r>
 80078a4:	2000      	movs	r0, #0
 80078a6:	6360      	str	r0, [r4, #52]	; 0x34
 80078a8:	e7c0      	b.n	800782c <__sflush_r+0x1c>
 80078aa:	2301      	movs	r3, #1
 80078ac:	4628      	mov	r0, r5
 80078ae:	47b0      	blx	r6
 80078b0:	1c41      	adds	r1, r0, #1
 80078b2:	d1c8      	bne.n	8007846 <__sflush_r+0x36>
 80078b4:	682b      	ldr	r3, [r5, #0]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d0c5      	beq.n	8007846 <__sflush_r+0x36>
 80078ba:	2b1d      	cmp	r3, #29
 80078bc:	d001      	beq.n	80078c2 <__sflush_r+0xb2>
 80078be:	2b16      	cmp	r3, #22
 80078c0:	d101      	bne.n	80078c6 <__sflush_r+0xb6>
 80078c2:	602f      	str	r7, [r5, #0]
 80078c4:	e7b1      	b.n	800782a <__sflush_r+0x1a>
 80078c6:	89a3      	ldrh	r3, [r4, #12]
 80078c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078cc:	81a3      	strh	r3, [r4, #12]
 80078ce:	e7ad      	b.n	800782c <__sflush_r+0x1c>
 80078d0:	690f      	ldr	r7, [r1, #16]
 80078d2:	2f00      	cmp	r7, #0
 80078d4:	d0a9      	beq.n	800782a <__sflush_r+0x1a>
 80078d6:	0793      	lsls	r3, r2, #30
 80078d8:	680e      	ldr	r6, [r1, #0]
 80078da:	bf08      	it	eq
 80078dc:	694b      	ldreq	r3, [r1, #20]
 80078de:	600f      	str	r7, [r1, #0]
 80078e0:	bf18      	it	ne
 80078e2:	2300      	movne	r3, #0
 80078e4:	eba6 0807 	sub.w	r8, r6, r7
 80078e8:	608b      	str	r3, [r1, #8]
 80078ea:	f1b8 0f00 	cmp.w	r8, #0
 80078ee:	dd9c      	ble.n	800782a <__sflush_r+0x1a>
 80078f0:	6a21      	ldr	r1, [r4, #32]
 80078f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80078f4:	4643      	mov	r3, r8
 80078f6:	463a      	mov	r2, r7
 80078f8:	4628      	mov	r0, r5
 80078fa:	47b0      	blx	r6
 80078fc:	2800      	cmp	r0, #0
 80078fe:	dc06      	bgt.n	800790e <__sflush_r+0xfe>
 8007900:	89a3      	ldrh	r3, [r4, #12]
 8007902:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007906:	81a3      	strh	r3, [r4, #12]
 8007908:	f04f 30ff 	mov.w	r0, #4294967295
 800790c:	e78e      	b.n	800782c <__sflush_r+0x1c>
 800790e:	4407      	add	r7, r0
 8007910:	eba8 0800 	sub.w	r8, r8, r0
 8007914:	e7e9      	b.n	80078ea <__sflush_r+0xda>
 8007916:	bf00      	nop
 8007918:	dfbffffe 	.word	0xdfbffffe

0800791c <_fflush_r>:
 800791c:	b538      	push	{r3, r4, r5, lr}
 800791e:	690b      	ldr	r3, [r1, #16]
 8007920:	4605      	mov	r5, r0
 8007922:	460c      	mov	r4, r1
 8007924:	b913      	cbnz	r3, 800792c <_fflush_r+0x10>
 8007926:	2500      	movs	r5, #0
 8007928:	4628      	mov	r0, r5
 800792a:	bd38      	pop	{r3, r4, r5, pc}
 800792c:	b118      	cbz	r0, 8007936 <_fflush_r+0x1a>
 800792e:	6a03      	ldr	r3, [r0, #32]
 8007930:	b90b      	cbnz	r3, 8007936 <_fflush_r+0x1a>
 8007932:	f7ff fb35 	bl	8006fa0 <__sinit>
 8007936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d0f3      	beq.n	8007926 <_fflush_r+0xa>
 800793e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007940:	07d0      	lsls	r0, r2, #31
 8007942:	d404      	bmi.n	800794e <_fflush_r+0x32>
 8007944:	0599      	lsls	r1, r3, #22
 8007946:	d402      	bmi.n	800794e <_fflush_r+0x32>
 8007948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800794a:	f7ff fc3e 	bl	80071ca <__retarget_lock_acquire_recursive>
 800794e:	4628      	mov	r0, r5
 8007950:	4621      	mov	r1, r4
 8007952:	f7ff ff5d 	bl	8007810 <__sflush_r>
 8007956:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007958:	07da      	lsls	r2, r3, #31
 800795a:	4605      	mov	r5, r0
 800795c:	d4e4      	bmi.n	8007928 <_fflush_r+0xc>
 800795e:	89a3      	ldrh	r3, [r4, #12]
 8007960:	059b      	lsls	r3, r3, #22
 8007962:	d4e1      	bmi.n	8007928 <_fflush_r+0xc>
 8007964:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007966:	f7ff fc31 	bl	80071cc <__retarget_lock_release_recursive>
 800796a:	e7dd      	b.n	8007928 <_fflush_r+0xc>

0800796c <__swbuf_r>:
 800796c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796e:	460e      	mov	r6, r1
 8007970:	4614      	mov	r4, r2
 8007972:	4605      	mov	r5, r0
 8007974:	b118      	cbz	r0, 800797e <__swbuf_r+0x12>
 8007976:	6a03      	ldr	r3, [r0, #32]
 8007978:	b90b      	cbnz	r3, 800797e <__swbuf_r+0x12>
 800797a:	f7ff fb11 	bl	8006fa0 <__sinit>
 800797e:	69a3      	ldr	r3, [r4, #24]
 8007980:	60a3      	str	r3, [r4, #8]
 8007982:	89a3      	ldrh	r3, [r4, #12]
 8007984:	071a      	lsls	r2, r3, #28
 8007986:	d525      	bpl.n	80079d4 <__swbuf_r+0x68>
 8007988:	6923      	ldr	r3, [r4, #16]
 800798a:	b31b      	cbz	r3, 80079d4 <__swbuf_r+0x68>
 800798c:	6823      	ldr	r3, [r4, #0]
 800798e:	6922      	ldr	r2, [r4, #16]
 8007990:	1a98      	subs	r0, r3, r2
 8007992:	6963      	ldr	r3, [r4, #20]
 8007994:	b2f6      	uxtb	r6, r6
 8007996:	4283      	cmp	r3, r0
 8007998:	4637      	mov	r7, r6
 800799a:	dc04      	bgt.n	80079a6 <__swbuf_r+0x3a>
 800799c:	4621      	mov	r1, r4
 800799e:	4628      	mov	r0, r5
 80079a0:	f7ff ffbc 	bl	800791c <_fflush_r>
 80079a4:	b9e0      	cbnz	r0, 80079e0 <__swbuf_r+0x74>
 80079a6:	68a3      	ldr	r3, [r4, #8]
 80079a8:	3b01      	subs	r3, #1
 80079aa:	60a3      	str	r3, [r4, #8]
 80079ac:	6823      	ldr	r3, [r4, #0]
 80079ae:	1c5a      	adds	r2, r3, #1
 80079b0:	6022      	str	r2, [r4, #0]
 80079b2:	701e      	strb	r6, [r3, #0]
 80079b4:	6962      	ldr	r2, [r4, #20]
 80079b6:	1c43      	adds	r3, r0, #1
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d004      	beq.n	80079c6 <__swbuf_r+0x5a>
 80079bc:	89a3      	ldrh	r3, [r4, #12]
 80079be:	07db      	lsls	r3, r3, #31
 80079c0:	d506      	bpl.n	80079d0 <__swbuf_r+0x64>
 80079c2:	2e0a      	cmp	r6, #10
 80079c4:	d104      	bne.n	80079d0 <__swbuf_r+0x64>
 80079c6:	4621      	mov	r1, r4
 80079c8:	4628      	mov	r0, r5
 80079ca:	f7ff ffa7 	bl	800791c <_fflush_r>
 80079ce:	b938      	cbnz	r0, 80079e0 <__swbuf_r+0x74>
 80079d0:	4638      	mov	r0, r7
 80079d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079d4:	4621      	mov	r1, r4
 80079d6:	4628      	mov	r0, r5
 80079d8:	f000 f806 	bl	80079e8 <__swsetup_r>
 80079dc:	2800      	cmp	r0, #0
 80079de:	d0d5      	beq.n	800798c <__swbuf_r+0x20>
 80079e0:	f04f 37ff 	mov.w	r7, #4294967295
 80079e4:	e7f4      	b.n	80079d0 <__swbuf_r+0x64>
	...

080079e8 <__swsetup_r>:
 80079e8:	b538      	push	{r3, r4, r5, lr}
 80079ea:	4b2a      	ldr	r3, [pc, #168]	; (8007a94 <__swsetup_r+0xac>)
 80079ec:	4605      	mov	r5, r0
 80079ee:	6818      	ldr	r0, [r3, #0]
 80079f0:	460c      	mov	r4, r1
 80079f2:	b118      	cbz	r0, 80079fc <__swsetup_r+0x14>
 80079f4:	6a03      	ldr	r3, [r0, #32]
 80079f6:	b90b      	cbnz	r3, 80079fc <__swsetup_r+0x14>
 80079f8:	f7ff fad2 	bl	8006fa0 <__sinit>
 80079fc:	89a3      	ldrh	r3, [r4, #12]
 80079fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a02:	0718      	lsls	r0, r3, #28
 8007a04:	d422      	bmi.n	8007a4c <__swsetup_r+0x64>
 8007a06:	06d9      	lsls	r1, r3, #27
 8007a08:	d407      	bmi.n	8007a1a <__swsetup_r+0x32>
 8007a0a:	2309      	movs	r3, #9
 8007a0c:	602b      	str	r3, [r5, #0]
 8007a0e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a12:	81a3      	strh	r3, [r4, #12]
 8007a14:	f04f 30ff 	mov.w	r0, #4294967295
 8007a18:	e034      	b.n	8007a84 <__swsetup_r+0x9c>
 8007a1a:	0758      	lsls	r0, r3, #29
 8007a1c:	d512      	bpl.n	8007a44 <__swsetup_r+0x5c>
 8007a1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a20:	b141      	cbz	r1, 8007a34 <__swsetup_r+0x4c>
 8007a22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a26:	4299      	cmp	r1, r3
 8007a28:	d002      	beq.n	8007a30 <__swsetup_r+0x48>
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	f7ff fbd0 	bl	80071d0 <_free_r>
 8007a30:	2300      	movs	r3, #0
 8007a32:	6363      	str	r3, [r4, #52]	; 0x34
 8007a34:	89a3      	ldrh	r3, [r4, #12]
 8007a36:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a3a:	81a3      	strh	r3, [r4, #12]
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	6063      	str	r3, [r4, #4]
 8007a40:	6923      	ldr	r3, [r4, #16]
 8007a42:	6023      	str	r3, [r4, #0]
 8007a44:	89a3      	ldrh	r3, [r4, #12]
 8007a46:	f043 0308 	orr.w	r3, r3, #8
 8007a4a:	81a3      	strh	r3, [r4, #12]
 8007a4c:	6923      	ldr	r3, [r4, #16]
 8007a4e:	b94b      	cbnz	r3, 8007a64 <__swsetup_r+0x7c>
 8007a50:	89a3      	ldrh	r3, [r4, #12]
 8007a52:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a5a:	d003      	beq.n	8007a64 <__swsetup_r+0x7c>
 8007a5c:	4621      	mov	r1, r4
 8007a5e:	4628      	mov	r0, r5
 8007a60:	f000 f840 	bl	8007ae4 <__smakebuf_r>
 8007a64:	89a0      	ldrh	r0, [r4, #12]
 8007a66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a6a:	f010 0301 	ands.w	r3, r0, #1
 8007a6e:	d00a      	beq.n	8007a86 <__swsetup_r+0x9e>
 8007a70:	2300      	movs	r3, #0
 8007a72:	60a3      	str	r3, [r4, #8]
 8007a74:	6963      	ldr	r3, [r4, #20]
 8007a76:	425b      	negs	r3, r3
 8007a78:	61a3      	str	r3, [r4, #24]
 8007a7a:	6923      	ldr	r3, [r4, #16]
 8007a7c:	b943      	cbnz	r3, 8007a90 <__swsetup_r+0xa8>
 8007a7e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007a82:	d1c4      	bne.n	8007a0e <__swsetup_r+0x26>
 8007a84:	bd38      	pop	{r3, r4, r5, pc}
 8007a86:	0781      	lsls	r1, r0, #30
 8007a88:	bf58      	it	pl
 8007a8a:	6963      	ldrpl	r3, [r4, #20]
 8007a8c:	60a3      	str	r3, [r4, #8]
 8007a8e:	e7f4      	b.n	8007a7a <__swsetup_r+0x92>
 8007a90:	2000      	movs	r0, #0
 8007a92:	e7f7      	b.n	8007a84 <__swsetup_r+0x9c>
 8007a94:	20000e14 	.word	0x20000e14

08007a98 <__swhatbuf_r>:
 8007a98:	b570      	push	{r4, r5, r6, lr}
 8007a9a:	460c      	mov	r4, r1
 8007a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aa0:	2900      	cmp	r1, #0
 8007aa2:	b096      	sub	sp, #88	; 0x58
 8007aa4:	4615      	mov	r5, r2
 8007aa6:	461e      	mov	r6, r3
 8007aa8:	da0d      	bge.n	8007ac6 <__swhatbuf_r+0x2e>
 8007aaa:	89a3      	ldrh	r3, [r4, #12]
 8007aac:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007ab0:	f04f 0100 	mov.w	r1, #0
 8007ab4:	bf0c      	ite	eq
 8007ab6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007aba:	2340      	movne	r3, #64	; 0x40
 8007abc:	2000      	movs	r0, #0
 8007abe:	6031      	str	r1, [r6, #0]
 8007ac0:	602b      	str	r3, [r5, #0]
 8007ac2:	b016      	add	sp, #88	; 0x58
 8007ac4:	bd70      	pop	{r4, r5, r6, pc}
 8007ac6:	466a      	mov	r2, sp
 8007ac8:	f000 f848 	bl	8007b5c <_fstat_r>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	dbec      	blt.n	8007aaa <__swhatbuf_r+0x12>
 8007ad0:	9901      	ldr	r1, [sp, #4]
 8007ad2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007ad6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007ada:	4259      	negs	r1, r3
 8007adc:	4159      	adcs	r1, r3
 8007ade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ae2:	e7eb      	b.n	8007abc <__swhatbuf_r+0x24>

08007ae4 <__smakebuf_r>:
 8007ae4:	898b      	ldrh	r3, [r1, #12]
 8007ae6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ae8:	079d      	lsls	r5, r3, #30
 8007aea:	4606      	mov	r6, r0
 8007aec:	460c      	mov	r4, r1
 8007aee:	d507      	bpl.n	8007b00 <__smakebuf_r+0x1c>
 8007af0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	6123      	str	r3, [r4, #16]
 8007af8:	2301      	movs	r3, #1
 8007afa:	6163      	str	r3, [r4, #20]
 8007afc:	b002      	add	sp, #8
 8007afe:	bd70      	pop	{r4, r5, r6, pc}
 8007b00:	ab01      	add	r3, sp, #4
 8007b02:	466a      	mov	r2, sp
 8007b04:	f7ff ffc8 	bl	8007a98 <__swhatbuf_r>
 8007b08:	9900      	ldr	r1, [sp, #0]
 8007b0a:	4605      	mov	r5, r0
 8007b0c:	4630      	mov	r0, r6
 8007b0e:	f7ff f92f 	bl	8006d70 <_malloc_r>
 8007b12:	b948      	cbnz	r0, 8007b28 <__smakebuf_r+0x44>
 8007b14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b18:	059a      	lsls	r2, r3, #22
 8007b1a:	d4ef      	bmi.n	8007afc <__smakebuf_r+0x18>
 8007b1c:	f023 0303 	bic.w	r3, r3, #3
 8007b20:	f043 0302 	orr.w	r3, r3, #2
 8007b24:	81a3      	strh	r3, [r4, #12]
 8007b26:	e7e3      	b.n	8007af0 <__smakebuf_r+0xc>
 8007b28:	89a3      	ldrh	r3, [r4, #12]
 8007b2a:	6020      	str	r0, [r4, #0]
 8007b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b30:	81a3      	strh	r3, [r4, #12]
 8007b32:	9b00      	ldr	r3, [sp, #0]
 8007b34:	6163      	str	r3, [r4, #20]
 8007b36:	9b01      	ldr	r3, [sp, #4]
 8007b38:	6120      	str	r0, [r4, #16]
 8007b3a:	b15b      	cbz	r3, 8007b54 <__smakebuf_r+0x70>
 8007b3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b40:	4630      	mov	r0, r6
 8007b42:	f000 f81d 	bl	8007b80 <_isatty_r>
 8007b46:	b128      	cbz	r0, 8007b54 <__smakebuf_r+0x70>
 8007b48:	89a3      	ldrh	r3, [r4, #12]
 8007b4a:	f023 0303 	bic.w	r3, r3, #3
 8007b4e:	f043 0301 	orr.w	r3, r3, #1
 8007b52:	81a3      	strh	r3, [r4, #12]
 8007b54:	89a3      	ldrh	r3, [r4, #12]
 8007b56:	431d      	orrs	r5, r3
 8007b58:	81a5      	strh	r5, [r4, #12]
 8007b5a:	e7cf      	b.n	8007afc <__smakebuf_r+0x18>

08007b5c <_fstat_r>:
 8007b5c:	b538      	push	{r3, r4, r5, lr}
 8007b5e:	4d07      	ldr	r5, [pc, #28]	; (8007b7c <_fstat_r+0x20>)
 8007b60:	2300      	movs	r3, #0
 8007b62:	4604      	mov	r4, r0
 8007b64:	4608      	mov	r0, r1
 8007b66:	4611      	mov	r1, r2
 8007b68:	602b      	str	r3, [r5, #0]
 8007b6a:	f000 f955 	bl	8007e18 <_fstat>
 8007b6e:	1c43      	adds	r3, r0, #1
 8007b70:	d102      	bne.n	8007b78 <_fstat_r+0x1c>
 8007b72:	682b      	ldr	r3, [r5, #0]
 8007b74:	b103      	cbz	r3, 8007b78 <_fstat_r+0x1c>
 8007b76:	6023      	str	r3, [r4, #0]
 8007b78:	bd38      	pop	{r3, r4, r5, pc}
 8007b7a:	bf00      	nop
 8007b7c:	20014d38 	.word	0x20014d38

08007b80 <_isatty_r>:
 8007b80:	b538      	push	{r3, r4, r5, lr}
 8007b82:	4d06      	ldr	r5, [pc, #24]	; (8007b9c <_isatty_r+0x1c>)
 8007b84:	2300      	movs	r3, #0
 8007b86:	4604      	mov	r4, r0
 8007b88:	4608      	mov	r0, r1
 8007b8a:	602b      	str	r3, [r5, #0]
 8007b8c:	f000 f94c 	bl	8007e28 <_isatty>
 8007b90:	1c43      	adds	r3, r0, #1
 8007b92:	d102      	bne.n	8007b9a <_isatty_r+0x1a>
 8007b94:	682b      	ldr	r3, [r5, #0]
 8007b96:	b103      	cbz	r3, 8007b9a <_isatty_r+0x1a>
 8007b98:	6023      	str	r3, [r4, #0]
 8007b9a:	bd38      	pop	{r3, r4, r5, pc}
 8007b9c:	20014d38 	.word	0x20014d38

08007ba0 <expf>:
 8007ba0:	b508      	push	{r3, lr}
 8007ba2:	ed2d 8b02 	vpush	{d8}
 8007ba6:	eef0 8a40 	vmov.f32	s17, s0
 8007baa:	f000 f85f 	bl	8007c6c <__ieee754_expf>
 8007bae:	eeb0 8a40 	vmov.f32	s16, s0
 8007bb2:	eeb0 0a68 	vmov.f32	s0, s17
 8007bb6:	f000 f829 	bl	8007c0c <finitef>
 8007bba:	b160      	cbz	r0, 8007bd6 <expf+0x36>
 8007bbc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8007bfc <expf+0x5c>
 8007bc0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8007bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bc8:	dd0a      	ble.n	8007be0 <expf+0x40>
 8007bca:	f7ff fad3 	bl	8007174 <__errno>
 8007bce:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8007c00 <expf+0x60>
 8007bd2:	2322      	movs	r3, #34	; 0x22
 8007bd4:	6003      	str	r3, [r0, #0]
 8007bd6:	eeb0 0a48 	vmov.f32	s0, s16
 8007bda:	ecbd 8b02 	vpop	{d8}
 8007bde:	bd08      	pop	{r3, pc}
 8007be0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007c04 <expf+0x64>
 8007be4:	eef4 8ae7 	vcmpe.f32	s17, s15
 8007be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bec:	d5f3      	bpl.n	8007bd6 <expf+0x36>
 8007bee:	f7ff fac1 	bl	8007174 <__errno>
 8007bf2:	2322      	movs	r3, #34	; 0x22
 8007bf4:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8007c08 <expf+0x68>
 8007bf8:	6003      	str	r3, [r0, #0]
 8007bfa:	e7ec      	b.n	8007bd6 <expf+0x36>
 8007bfc:	42b17217 	.word	0x42b17217
 8007c00:	7f800000 	.word	0x7f800000
 8007c04:	c2cff1b5 	.word	0xc2cff1b5
 8007c08:	00000000 	.word	0x00000000

08007c0c <finitef>:
 8007c0c:	b082      	sub	sp, #8
 8007c0e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007c12:	9801      	ldr	r0, [sp, #4]
 8007c14:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007c18:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007c1c:	bfac      	ite	ge
 8007c1e:	2000      	movge	r0, #0
 8007c20:	2001      	movlt	r0, #1
 8007c22:	b002      	add	sp, #8
 8007c24:	4770      	bx	lr

08007c26 <with_errnof>:
 8007c26:	b513      	push	{r0, r1, r4, lr}
 8007c28:	4604      	mov	r4, r0
 8007c2a:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007c2e:	f7ff faa1 	bl	8007174 <__errno>
 8007c32:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007c36:	6004      	str	r4, [r0, #0]
 8007c38:	b002      	add	sp, #8
 8007c3a:	bd10      	pop	{r4, pc}

08007c3c <xflowf>:
 8007c3c:	b130      	cbz	r0, 8007c4c <xflowf+0x10>
 8007c3e:	eef1 7a40 	vneg.f32	s15, s0
 8007c42:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007c46:	2022      	movs	r0, #34	; 0x22
 8007c48:	f7ff bfed 	b.w	8007c26 <with_errnof>
 8007c4c:	eef0 7a40 	vmov.f32	s15, s0
 8007c50:	e7f7      	b.n	8007c42 <xflowf+0x6>
	...

08007c54 <__math_uflowf>:
 8007c54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007c5c <__math_uflowf+0x8>
 8007c58:	f7ff bff0 	b.w	8007c3c <xflowf>
 8007c5c:	10000000 	.word	0x10000000

08007c60 <__math_oflowf>:
 8007c60:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007c68 <__math_oflowf+0x8>
 8007c64:	f7ff bfea 	b.w	8007c3c <xflowf>
 8007c68:	70000000 	.word	0x70000000

08007c6c <__ieee754_expf>:
 8007c6c:	ee10 2a10 	vmov	r2, s0
 8007c70:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8007c74:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007c78:	d902      	bls.n	8007c80 <__ieee754_expf+0x14>
 8007c7a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007c7e:	4770      	bx	lr
 8007c80:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8007c84:	d106      	bne.n	8007c94 <__ieee754_expf+0x28>
 8007c86:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8007dc0 <__ieee754_expf+0x154>
 8007c8a:	2900      	cmp	r1, #0
 8007c8c:	bf18      	it	ne
 8007c8e:	eeb0 0a67 	vmovne.f32	s0, s15
 8007c92:	4770      	bx	lr
 8007c94:	484b      	ldr	r0, [pc, #300]	; (8007dc4 <__ieee754_expf+0x158>)
 8007c96:	4282      	cmp	r2, r0
 8007c98:	dd02      	ble.n	8007ca0 <__ieee754_expf+0x34>
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	f7ff bfe0 	b.w	8007c60 <__math_oflowf>
 8007ca0:	2a00      	cmp	r2, #0
 8007ca2:	da05      	bge.n	8007cb0 <__ieee754_expf+0x44>
 8007ca4:	4a48      	ldr	r2, [pc, #288]	; (8007dc8 <__ieee754_expf+0x15c>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d902      	bls.n	8007cb0 <__ieee754_expf+0x44>
 8007caa:	2000      	movs	r0, #0
 8007cac:	f7ff bfd2 	b.w	8007c54 <__math_uflowf>
 8007cb0:	4a46      	ldr	r2, [pc, #280]	; (8007dcc <__ieee754_expf+0x160>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007cb8:	d952      	bls.n	8007d60 <__ieee754_expf+0xf4>
 8007cba:	4a45      	ldr	r2, [pc, #276]	; (8007dd0 <__ieee754_expf+0x164>)
 8007cbc:	4293      	cmp	r3, r2
 8007cbe:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8007cc2:	d834      	bhi.n	8007d2e <__ieee754_expf+0xc2>
 8007cc4:	4b43      	ldr	r3, [pc, #268]	; (8007dd4 <__ieee754_expf+0x168>)
 8007cc6:	4413      	add	r3, r2
 8007cc8:	ed93 7a00 	vldr	s14, [r3]
 8007ccc:	4b42      	ldr	r3, [pc, #264]	; (8007dd8 <__ieee754_expf+0x16c>)
 8007cce:	4413      	add	r3, r2
 8007cd0:	ee30 7a47 	vsub.f32	s14, s0, s14
 8007cd4:	f1c1 0201 	rsb	r2, r1, #1
 8007cd8:	edd3 7a00 	vldr	s15, [r3]
 8007cdc:	1a52      	subs	r2, r2, r1
 8007cde:	ee37 0a67 	vsub.f32	s0, s14, s15
 8007ce2:	ee20 6a00 	vmul.f32	s12, s0, s0
 8007ce6:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8007ddc <__ieee754_expf+0x170>
 8007cea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007de0 <__ieee754_expf+0x174>
 8007cee:	eee6 6a05 	vfma.f32	s13, s12, s10
 8007cf2:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8007de4 <__ieee754_expf+0x178>
 8007cf6:	eea6 5a86 	vfma.f32	s10, s13, s12
 8007cfa:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007de8 <__ieee754_expf+0x17c>
 8007cfe:	eee5 6a06 	vfma.f32	s13, s10, s12
 8007d02:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8007dec <__ieee754_expf+0x180>
 8007d06:	eea6 5a86 	vfma.f32	s10, s13, s12
 8007d0a:	eef0 6a40 	vmov.f32	s13, s0
 8007d0e:	eee5 6a46 	vfms.f32	s13, s10, s12
 8007d12:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8007d16:	ee20 5a26 	vmul.f32	s10, s0, s13
 8007d1a:	bb92      	cbnz	r2, 8007d82 <__ieee754_expf+0x116>
 8007d1c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8007d20:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8007d24:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007d28:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8007d2c:	4770      	bx	lr
 8007d2e:	4b30      	ldr	r3, [pc, #192]	; (8007df0 <__ieee754_expf+0x184>)
 8007d30:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8007df4 <__ieee754_expf+0x188>
 8007d34:	eddf 6a30 	vldr	s13, [pc, #192]	; 8007df8 <__ieee754_expf+0x18c>
 8007d38:	4413      	add	r3, r2
 8007d3a:	edd3 7a00 	vldr	s15, [r3]
 8007d3e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007d42:	eeb0 7a40 	vmov.f32	s14, s0
 8007d46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d4a:	ee17 2a90 	vmov	r2, s15
 8007d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d52:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8007d56:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007dfc <__ieee754_expf+0x190>
 8007d5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007d5e:	e7be      	b.n	8007cde <__ieee754_expf+0x72>
 8007d60:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8007d64:	d20b      	bcs.n	8007d7e <__ieee754_expf+0x112>
 8007d66:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007e00 <__ieee754_expf+0x194>
 8007d6a:	ee70 6a26 	vadd.f32	s13, s0, s13
 8007d6e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8007d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d76:	dd02      	ble.n	8007d7e <__ieee754_expf+0x112>
 8007d78:	ee30 0a25 	vadd.f32	s0, s0, s11
 8007d7c:	4770      	bx	lr
 8007d7e:	2200      	movs	r2, #0
 8007d80:	e7af      	b.n	8007ce2 <__ieee754_expf+0x76>
 8007d82:	ee36 6a66 	vsub.f32	s12, s12, s13
 8007d86:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8007d8a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8007d8e:	bfb8      	it	lt
 8007d90:	3264      	addlt	r2, #100	; 0x64
 8007d92:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007d96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007d9a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8007d9e:	ee17 3a90 	vmov	r3, s15
 8007da2:	bfab      	itete	ge
 8007da4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8007da8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8007dac:	ee00 3a10 	vmovge	s0, r3
 8007db0:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8007e04 <__ieee754_expf+0x198>
 8007db4:	bfbc      	itt	lt
 8007db6:	ee00 3a10 	vmovlt	s0, r3
 8007dba:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8007dbe:	4770      	bx	lr
 8007dc0:	00000000 	.word	0x00000000
 8007dc4:	42b17217 	.word	0x42b17217
 8007dc8:	42cff1b5 	.word	0x42cff1b5
 8007dcc:	3eb17218 	.word	0x3eb17218
 8007dd0:	3f851591 	.word	0x3f851591
 8007dd4:	080d3a1c 	.word	0x080d3a1c
 8007dd8:	080d3a24 	.word	0x080d3a24
 8007ddc:	3331bb4c 	.word	0x3331bb4c
 8007de0:	b5ddea0e 	.word	0xb5ddea0e
 8007de4:	388ab355 	.word	0x388ab355
 8007de8:	bb360b61 	.word	0xbb360b61
 8007dec:	3e2aaaab 	.word	0x3e2aaaab
 8007df0:	080d3a14 	.word	0x080d3a14
 8007df4:	3fb8aa3b 	.word	0x3fb8aa3b
 8007df8:	3f317180 	.word	0x3f317180
 8007dfc:	3717f7d1 	.word	0x3717f7d1
 8007e00:	7149f2ca 	.word	0x7149f2ca
 8007e04:	0d800000 	.word	0x0d800000

08007e08 <_close>:
 8007e08:	4b02      	ldr	r3, [pc, #8]	; (8007e14 <_close+0xc>)
 8007e0a:	2258      	movs	r2, #88	; 0x58
 8007e0c:	601a      	str	r2, [r3, #0]
 8007e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e12:	4770      	bx	lr
 8007e14:	20014d38 	.word	0x20014d38

08007e18 <_fstat>:
 8007e18:	4b02      	ldr	r3, [pc, #8]	; (8007e24 <_fstat+0xc>)
 8007e1a:	2258      	movs	r2, #88	; 0x58
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e22:	4770      	bx	lr
 8007e24:	20014d38 	.word	0x20014d38

08007e28 <_isatty>:
 8007e28:	4b02      	ldr	r3, [pc, #8]	; (8007e34 <_isatty+0xc>)
 8007e2a:	2258      	movs	r2, #88	; 0x58
 8007e2c:	601a      	str	r2, [r3, #0]
 8007e2e:	2000      	movs	r0, #0
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	20014d38 	.word	0x20014d38

08007e38 <_lseek>:
 8007e38:	4b02      	ldr	r3, [pc, #8]	; (8007e44 <_lseek+0xc>)
 8007e3a:	2258      	movs	r2, #88	; 0x58
 8007e3c:	601a      	str	r2, [r3, #0]
 8007e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e42:	4770      	bx	lr
 8007e44:	20014d38 	.word	0x20014d38

08007e48 <_read>:
 8007e48:	4b02      	ldr	r3, [pc, #8]	; (8007e54 <_read+0xc>)
 8007e4a:	2258      	movs	r2, #88	; 0x58
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e52:	4770      	bx	lr
 8007e54:	20014d38 	.word	0x20014d38

08007e58 <_init>:
 8007e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5a:	bf00      	nop
 8007e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e5e:	bc08      	pop	{r3}
 8007e60:	469e      	mov	lr, r3
 8007e62:	4770      	bx	lr

08007e64 <_fini>:
 8007e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e66:	bf00      	nop
 8007e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e6a:	bc08      	pop	{r3}
 8007e6c:	469e      	mov	lr, r3
 8007e6e:	4770      	bx	lr
